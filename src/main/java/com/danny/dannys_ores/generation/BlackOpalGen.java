package com.danny.dannys_ores.generation;

import com.danny.dannys_ores.Main;
import com.danny.dannys_ores.configs.BlackOpal;
import com.danny.dannys_ores.configs.General;
import com.danny.dannys_ores.init.BlockInit;
import net.minecraft.block.Blocks;
import net.minecraft.block.pattern.BlockMatcher;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.GenerationStage;
import net.minecraft.world.gen.feature.Feature;
import net.minecraft.world.gen.feature.OreFeatureConfig;
import net.minecraft.world.gen.placement.CountRangeConfig;
import net.minecraft.world.gen.placement.Placement;

public class BlackOpalGen {
    public static void addBlackOpalGen(Biome biome, String biomeRNS, String biomeTS) {
        addBlackOpalOreGeneration(biome, biomeRNS, biomeTS);
    }

    private static void addBlackOpalOreGeneration(Biome biome, String biomeRNS, String biomeTS) {
        // Vanilla
        if (!General.disableStoneOreGeneration.get()) {
            if (BlackOpal.enableStoneBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistStoneBlackOpalOre.get() && BlackOpal.temperatureBlacklistStoneBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistStoneBlackOpalOre.get() && !BlackOpal.temperatureBlacklistStoneBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistStoneBlackOpalOre.get() && BlackOpal.biomeBlacklistStoneBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistStoneBlackOpalOre.get() && !BlackOpal.biomeBlacklistStoneBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("stone", null, new BlockMatcher(Blocks.STONE)), BlockInit.STONE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeStoneBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkStoneBlackOpalOre.get(), BlackOpal.minHeightStoneBlackOpalOre.get(), 0, BlackOpal.maxHeightStoneBlackOpalOre.get()))));
                    } } } }
        if (!General.disableAndesiteOreGeneration.get()) {
            if (BlackOpal.enableAndesiteBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistAndesiteBlackOpalOre.get() && BlackOpal.temperatureBlacklistAndesiteBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistAndesiteBlackOpalOre.get() && !BlackOpal.temperatureBlacklistAndesiteBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistAndesiteBlackOpalOre.get() && BlackOpal.biomeBlacklistAndesiteBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistAndesiteBlackOpalOre.get() && !BlackOpal.biomeBlacklistAndesiteBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("andesite", null, new BlockMatcher(Blocks.ANDESITE)), BlockInit.ANDESITE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeAndesiteBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkAndesiteBlackOpalOre.get(), BlackOpal.minHeightAndesiteBlackOpalOre.get(), 0, BlackOpal.maxHeightAndesiteBlackOpalOre.get()))));
                    } } } }
        if (!General.disableDioriteOreGeneration.get()) {
            if (BlackOpal.enableDioriteBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistDioriteBlackOpalOre.get() && BlackOpal.temperatureBlacklistDioriteBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistDioriteBlackOpalOre.get() && !BlackOpal.temperatureBlacklistDioriteBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistDioriteBlackOpalOre.get() && BlackOpal.biomeBlacklistDioriteBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistDioriteBlackOpalOre.get() && !BlackOpal.biomeBlacklistDioriteBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("diorite", null, new BlockMatcher(Blocks.DIORITE)), BlockInit.DIORITE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeDioriteBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkDioriteBlackOpalOre.get(), BlackOpal.minHeightDioriteBlackOpalOre.get(), 0, BlackOpal.maxHeightDioriteBlackOpalOre.get()))));
                    } } } }
        if (!General.disableGraniteOreGeneration.get()) {
            if (BlackOpal.enableGraniteBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistGraniteBlackOpalOre.get() && BlackOpal.temperatureBlacklistGraniteBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistGraniteBlackOpalOre.get() && !BlackOpal.temperatureBlacklistGraniteBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistGraniteBlackOpalOre.get() && BlackOpal.biomeBlacklistGraniteBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistGraniteBlackOpalOre.get() && !BlackOpal.biomeBlacklistGraniteBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("granite", null, new BlockMatcher(Blocks.GRANITE)), BlockInit.GRANITE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeGraniteBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkGraniteBlackOpalOre.get(), BlackOpal.minHeightGraniteBlackOpalOre.get(), 0, BlackOpal.maxHeightGraniteBlackOpalOre.get()))));
                    } } } }
        if (!General.disableNetherrackOreGeneration.get()) {
            if (BlackOpal.enableNetherrackBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistNetherrackBlackOpalOre.get() && BlackOpal.temperatureBlacklistNetherrackBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistNetherrackBlackOpalOre.get() && !BlackOpal.temperatureBlacklistNetherrackBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistNetherrackBlackOpalOre.get() && BlackOpal.biomeBlacklistNetherrackBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistNetherrackBlackOpalOre.get() && !BlackOpal.biomeBlacklistNetherrackBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("netherrack", null, new BlockMatcher(Blocks.NETHERRACK)), BlockInit.NETHERRACK_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeNetherrackBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkNetherrackBlackOpalOre.get(), BlackOpal.minHeightNetherrackBlackOpalOre.get(), 0, BlackOpal.maxHeightNetherrackBlackOpalOre.get()))));
                    } } } }
        if (!General.disableEndStoneOreGeneration.get()) {
            if (BlackOpal.enableEndStoneBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistEndStoneBlackOpalOre.get() && BlackOpal.temperatureBlacklistEndStoneBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistEndStoneBlackOpalOre.get() && !BlackOpal.temperatureBlacklistEndStoneBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistEndStoneBlackOpalOre.get() && BlackOpal.biomeBlacklistEndStoneBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistEndStoneBlackOpalOre.get() && !BlackOpal.biomeBlacklistEndStoneBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("end_stone", null, new BlockMatcher(Blocks.END_STONE)), BlockInit.END_STONE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeEndStoneBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkEndStoneBlackOpalOre.get(), BlackOpal.minHeightEndStoneBlackOpalOre.get(), 0, BlackOpal.maxHeightEndStoneBlackOpalOre.get()))));
                    } } } }
        if (!General.disableSandOreGeneration.get()) {
            if (BlackOpal.enableSandBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistSandBlackOpalOre.get() && BlackOpal.temperatureBlacklistSandBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistSandBlackOpalOre.get() && !BlackOpal.temperatureBlacklistSandBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistSandBlackOpalOre.get() && BlackOpal.biomeBlacklistSandBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistSandBlackOpalOre.get() && !BlackOpal.biomeBlacklistSandBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("sand", null, new BlockMatcher(Blocks.SAND)), BlockInit.SAND_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeSandBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkSandBlackOpalOre.get(), BlackOpal.minHeightSandBlackOpalOre.get(), 0, BlackOpal.maxHeightSandBlackOpalOre.get()))));
                    } } } }
        if (!General.disableRedSandOreGeneration.get()) {
            if (BlackOpal.enableRedSandBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistRedSandBlackOpalOre.get() && BlackOpal.temperatureBlacklistRedSandBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistRedSandBlackOpalOre.get() && !BlackOpal.temperatureBlacklistRedSandBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistRedSandBlackOpalOre.get() && BlackOpal.biomeBlacklistRedSandBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistRedSandBlackOpalOre.get() && !BlackOpal.biomeBlacklistRedSandBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("red_sand", null, new BlockMatcher(Blocks.RED_SAND)), BlockInit.RED_SAND_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeRedSandBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkRedSandBlackOpalOre.get(), BlackOpal.minHeightRedSandBlackOpalOre.get(), 0, BlackOpal.maxHeightRedSandBlackOpalOre.get()))));
                    } } } }
        if (!General.disableGravelOreGeneration.get()) {
            if (BlackOpal.enableGravelBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistGravelBlackOpalOre.get() && BlackOpal.temperatureBlacklistGravelBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistGravelBlackOpalOre.get() && !BlackOpal.temperatureBlacklistGravelBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistGravelBlackOpalOre.get() && BlackOpal.biomeBlacklistGravelBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistGravelBlackOpalOre.get() && !BlackOpal.biomeBlacklistGravelBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("gravel", null, new BlockMatcher(Blocks.GRAVEL)), BlockInit.GRAVEL_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeGravelBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkGravelBlackOpalOre.get(), BlackOpal.minHeightGravelBlackOpalOre.get(), 0, BlackOpal.maxHeightGravelBlackOpalOre.get()))));
                    } } } }
        if (!General.disableSandstoneOreGeneration.get()) {
            if (BlackOpal.enableSandstoneBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistSandstoneBlackOpalOre.get() && BlackOpal.temperatureBlacklistSandstoneBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistSandstoneBlackOpalOre.get() && !BlackOpal.temperatureBlacklistSandstoneBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistSandstoneBlackOpalOre.get() && BlackOpal.biomeBlacklistSandstoneBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistSandstoneBlackOpalOre.get() && !BlackOpal.biomeBlacklistSandstoneBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("sandstone", null, new BlockMatcher(Blocks.SANDSTONE)), BlockInit.SANDSTONE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeSandstoneBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkSandstoneBlackOpalOre.get(), BlackOpal.minHeightSandstoneBlackOpalOre.get(), 0, BlackOpal.maxHeightSandstoneBlackOpalOre.get()))));
                    } } } }
        if (!General.disableRedSandstoneOreGeneration.get()) {
            if (BlackOpal.enableRedSandstoneBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistRedSandstoneBlackOpalOre.get() && BlackOpal.temperatureBlacklistRedSandstoneBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistRedSandstoneBlackOpalOre.get() && !BlackOpal.temperatureBlacklistRedSandstoneBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistRedSandstoneBlackOpalOre.get() && BlackOpal.biomeBlacklistRedSandstoneBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistRedSandstoneBlackOpalOre.get() && !BlackOpal.biomeBlacklistRedSandstoneBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("red_sandstone", null, new BlockMatcher(Blocks.RED_SANDSTONE)), BlockInit.RED_SANDSTONE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeRedSandstoneBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkRedSandstoneBlackOpalOre.get(), BlackOpal.minHeightRedSandstoneBlackOpalOre.get(), 0, BlackOpal.maxHeightRedSandstoneBlackOpalOre.get()))));
                    } } } }
        if (!General.disableBlueIceOreGeneration.get()) {
            if (BlackOpal.enableBlueIceBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistBlueIceBlackOpalOre.get() && BlackOpal.temperatureBlacklistBlueIceBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistBlueIceBlackOpalOre.get() && !BlackOpal.temperatureBlacklistBlueIceBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistBlueIceBlackOpalOre.get() && BlackOpal.biomeBlacklistBlueIceBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistBlueIceBlackOpalOre.get() && !BlackOpal.biomeBlacklistBlueIceBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("blue_ice", null, new BlockMatcher(Blocks.BLUE_ICE)), BlockInit.BLUE_ICE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeBlueIceBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkBlueIceBlackOpalOre.get(), BlackOpal.minHeightBlueIceBlackOpalOre.get(), 0, BlackOpal.maxHeightBlueIceBlackOpalOre.get()))));
                    } } } }
        if (!General.disablePackedIceOreGeneration.get()) {
            if (BlackOpal.enablePackedIceBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistPackedIceBlackOpalOre.get() && BlackOpal.temperatureBlacklistPackedIceBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistPackedIceBlackOpalOre.get() && !BlackOpal.temperatureBlacklistPackedIceBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistPackedIceBlackOpalOre.get() && BlackOpal.biomeBlacklistPackedIceBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistPackedIceBlackOpalOre.get() && !BlackOpal.biomeBlacklistPackedIceBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("packed_ice", null, new BlockMatcher(Blocks.PACKED_ICE)), BlockInit.PACKED_ICE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizePackedIceBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkPackedIceBlackOpalOre.get(), BlackOpal.minHeightPackedIceBlackOpalOre.get(), 0, BlackOpal.maxHeightPackedIceBlackOpalOre.get()))));
                    } } } }
        if (!General.disableBedrockOreGeneration.get()) {
            if (BlackOpal.enableBedrockBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistBedrockBlackOpalOre.get() && BlackOpal.temperatureBlacklistBedrockBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistBedrockBlackOpalOre.get() && !BlackOpal.temperatureBlacklistBedrockBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistBedrockBlackOpalOre.get() && BlackOpal.biomeBlacklistBedrockBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistBedrockBlackOpalOre.get() && !BlackOpal.biomeBlacklistBedrockBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("bedrock", null, new BlockMatcher(Blocks.BEDROCK)), BlockInit.BEDROCK_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeBedrockBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkBedrockBlackOpalOre.get(), BlackOpal.minHeightBedrockBlackOpalOre.get(), 0, BlackOpal.maxHeightBedrockBlackOpalOre.get()))));
                    } } } }
        // Quark
        if (!General.disableQuarkBasaltOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableQuarkBasaltBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistQuarkBasaltBlackOpalOre.get() && BlackOpal.temperatureBlacklistQuarkBasaltBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistQuarkBasaltBlackOpalOre.get() && !BlackOpal.temperatureBlacklistQuarkBasaltBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistQuarkBasaltBlackOpalOre.get() && BlackOpal.biomeBlacklistQuarkBasaltBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistQuarkBasaltBlackOpalOre.get() && !BlackOpal.biomeBlacklistQuarkBasaltBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_basalt", null, new BlockMatcher(BlockInit.QUARK_BASALT != null ? BlockInit.QUARK_BASALT : Blocks.BARRIER)), BlockInit.QUARK_BASALT_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeQuarkBasaltBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkQuarkBasaltBlackOpalOre.get(), BlackOpal.minHeightQuarkBasaltBlackOpalOre.get(), 0, BlackOpal.maxHeightQuarkBasaltBlackOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkMarbleOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableQuarkMarbleBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistQuarkMarbleBlackOpalOre.get() && BlackOpal.temperatureBlacklistQuarkMarbleBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistQuarkMarbleBlackOpalOre.get() && !BlackOpal.temperatureBlacklistQuarkMarbleBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistQuarkMarbleBlackOpalOre.get() && BlackOpal.biomeBlacklistQuarkMarbleBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistQuarkMarbleBlackOpalOre.get() && !BlackOpal.biomeBlacklistQuarkMarbleBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_marble", null, new BlockMatcher(BlockInit.QUARK_MARBLE != null ? BlockInit.QUARK_MARBLE : Blocks.BARRIER)), BlockInit.QUARK_MARBLE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeQuarkMarbleBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkQuarkMarbleBlackOpalOre.get(), BlackOpal.minHeightQuarkMarbleBlackOpalOre.get(), 0, BlackOpal.maxHeightQuarkMarbleBlackOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkSlateOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableQuarkSlateBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistQuarkSlateBlackOpalOre.get() && BlackOpal.temperatureBlacklistQuarkSlateBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistQuarkSlateBlackOpalOre.get() && !BlackOpal.temperatureBlacklistQuarkSlateBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistQuarkSlateBlackOpalOre.get() && BlackOpal.biomeBlacklistQuarkSlateBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistQuarkSlateBlackOpalOre.get() && !BlackOpal.biomeBlacklistQuarkSlateBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_slate", null, new BlockMatcher(BlockInit.QUARK_SLATE != null ? BlockInit.QUARK_SLATE : Blocks.BARRIER)), BlockInit.QUARK_SLATE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeQuarkSlateBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkQuarkSlateBlackOpalOre.get(), BlackOpal.minHeightQuarkSlateBlackOpalOre.get(), 0, BlackOpal.maxHeightQuarkSlateBlackOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkLimestoneOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableQuarkLimestoneBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistQuarkLimestoneBlackOpalOre.get() && BlackOpal.temperatureBlacklistQuarkLimestoneBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistQuarkLimestoneBlackOpalOre.get() && !BlackOpal.temperatureBlacklistQuarkLimestoneBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistQuarkLimestoneBlackOpalOre.get() && BlackOpal.biomeBlacklistQuarkLimestoneBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistQuarkLimestoneBlackOpalOre.get() && !BlackOpal.biomeBlacklistQuarkLimestoneBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_limestone", null, new BlockMatcher(BlockInit.QUARK_LIMESTONE != null ? BlockInit.QUARK_LIMESTONE : Blocks.BARRIER)), BlockInit.QUARK_LIMESTONE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeQuarkLimestoneBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkQuarkLimestoneBlackOpalOre.get(), BlackOpal.minHeightQuarkLimestoneBlackOpalOre.get(), 0, BlackOpal.maxHeightQuarkLimestoneBlackOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkJasperOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableQuarkJasperBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistQuarkJasperBlackOpalOre.get() && BlackOpal.temperatureBlacklistQuarkJasperBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistQuarkJasperBlackOpalOre.get() && !BlackOpal.temperatureBlacklistQuarkJasperBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistQuarkJasperBlackOpalOre.get() && BlackOpal.biomeBlacklistQuarkJasperBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistQuarkJasperBlackOpalOre.get() && !BlackOpal.biomeBlacklistQuarkJasperBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_jasper", null, new BlockMatcher(BlockInit.QUARK_JASPER != null ? BlockInit.QUARK_JASPER : Blocks.BARRIER)), BlockInit.QUARK_JASPER_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeQuarkJasperBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkQuarkJasperBlackOpalOre.get(), BlackOpal.minHeightQuarkJasperBlackOpalOre.get(), 0, BlackOpal.maxHeightQuarkJasperBlackOpalOre.get()))));
                    } } } }
        // Embellishcraft
        if (!General.disableEmbellishcraftBasaltOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableEmbellishcraftBasaltBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistEmbellishcraftBasaltBlackOpalOre.get() && BlackOpal.temperatureBlacklistEmbellishcraftBasaltBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistEmbellishcraftBasaltBlackOpalOre.get() && !BlackOpal.temperatureBlacklistEmbellishcraftBasaltBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistEmbellishcraftBasaltBlackOpalOre.get() && BlackOpal.biomeBlacklistEmbellishcraftBasaltBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistEmbellishcraftBasaltBlackOpalOre.get() && !BlackOpal.biomeBlacklistEmbellishcraftBasaltBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_basalt", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_BASALT != null ? BlockInit.EMBELLISHCRAFT_BASALT : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_BASALT_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeEmbellishcraftBasaltBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkEmbellishcraftBasaltBlackOpalOre.get(), BlackOpal.minHeightEmbellishcraftBasaltBlackOpalOre.get(), 0, BlackOpal.maxHeightEmbellishcraftBasaltBlackOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftGneissOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableEmbellishcraftGneissBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistEmbellishcraftGneissBlackOpalOre.get() && BlackOpal.temperatureBlacklistEmbellishcraftGneissBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistEmbellishcraftGneissBlackOpalOre.get() && !BlackOpal.temperatureBlacklistEmbellishcraftGneissBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistEmbellishcraftGneissBlackOpalOre.get() && BlackOpal.biomeBlacklistEmbellishcraftGneissBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistEmbellishcraftGneissBlackOpalOre.get() && !BlackOpal.biomeBlacklistEmbellishcraftGneissBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_gneiss", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_GNEISS != null ? BlockInit.EMBELLISHCRAFT_GNEISS : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_GNEISS_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeEmbellishcraftGneissBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkEmbellishcraftGneissBlackOpalOre.get(), BlackOpal.minHeightEmbellishcraftGneissBlackOpalOre.get(), 0, BlackOpal.maxHeightEmbellishcraftGneissBlackOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftJadeOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableEmbellishcraftJadeBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistEmbellishcraftJadeBlackOpalOre.get() && BlackOpal.temperatureBlacklistEmbellishcraftJadeBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistEmbellishcraftJadeBlackOpalOre.get() && !BlackOpal.temperatureBlacklistEmbellishcraftJadeBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistEmbellishcraftJadeBlackOpalOre.get() && BlackOpal.biomeBlacklistEmbellishcraftJadeBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistEmbellishcraftJadeBlackOpalOre.get() && !BlackOpal.biomeBlacklistEmbellishcraftJadeBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_jade", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_JADE != null ? BlockInit.EMBELLISHCRAFT_JADE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_JADE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeEmbellishcraftJadeBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkEmbellishcraftJadeBlackOpalOre.get(), BlackOpal.minHeightEmbellishcraftJadeBlackOpalOre.get(), 0, BlackOpal.maxHeightEmbellishcraftJadeBlackOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftLarvikiteOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableEmbellishcraftLarvikiteBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistEmbellishcraftLarvikiteBlackOpalOre.get() && BlackOpal.temperatureBlacklistEmbellishcraftLarvikiteBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistEmbellishcraftLarvikiteBlackOpalOre.get() && !BlackOpal.temperatureBlacklistEmbellishcraftLarvikiteBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistEmbellishcraftLarvikiteBlackOpalOre.get() && BlackOpal.biomeBlacklistEmbellishcraftLarvikiteBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistEmbellishcraftLarvikiteBlackOpalOre.get() && !BlackOpal.biomeBlacklistEmbellishcraftLarvikiteBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_larvikite", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_LARVIKITE != null ? BlockInit.EMBELLISHCRAFT_LARVIKITE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_LARVIKITE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeEmbellishcraftLarvikiteBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkEmbellishcraftLarvikiteBlackOpalOre.get(), BlackOpal.minHeightEmbellishcraftLarvikiteBlackOpalOre.get(), 0, BlackOpal.maxHeightEmbellishcraftLarvikiteBlackOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftMarbleOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableEmbellishcraftMarbleBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistEmbellishcraftMarbleBlackOpalOre.get() && BlackOpal.temperatureBlacklistEmbellishcraftMarbleBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistEmbellishcraftMarbleBlackOpalOre.get() && !BlackOpal.temperatureBlacklistEmbellishcraftMarbleBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistEmbellishcraftMarbleBlackOpalOre.get() && BlackOpal.biomeBlacklistEmbellishcraftMarbleBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistEmbellishcraftMarbleBlackOpalOre.get() && !BlackOpal.biomeBlacklistEmbellishcraftMarbleBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_marble", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_MARBLE != null ? BlockInit.EMBELLISHCRAFT_MARBLE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_MARBLE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeEmbellishcraftMarbleBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkEmbellishcraftMarbleBlackOpalOre.get(), BlackOpal.minHeightEmbellishcraftMarbleBlackOpalOre.get(), 0, BlackOpal.maxHeightEmbellishcraftMarbleBlackOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftSlateOreGeneration.get() && Main.quark) {
            if (BlackOpal.enableEmbellishcraftSlateBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistEmbellishcraftSlateBlackOpalOre.get() && BlackOpal.temperatureBlacklistEmbellishcraftSlateBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistEmbellishcraftSlateBlackOpalOre.get() && !BlackOpal.temperatureBlacklistEmbellishcraftSlateBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistEmbellishcraftSlateBlackOpalOre.get() && BlackOpal.biomeBlacklistEmbellishcraftSlateBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistEmbellishcraftSlateBlackOpalOre.get() && !BlackOpal.biomeBlacklistEmbellishcraftSlateBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_slate", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_SLATE != null ? BlockInit.EMBELLISHCRAFT_SLATE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_SLATE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeEmbellishcraftSlateBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkEmbellishcraftSlateBlackOpalOre.get(), BlackOpal.minHeightEmbellishcraftSlateBlackOpalOre.get(), 0, BlackOpal.maxHeightEmbellishcraftSlateBlackOpalOre.get()))));
                    } } } }
        // Danny's Ores
        if (!General.disableHardenedStoneOreGeneration.get()) {
            if (BlackOpal.enableHardenedStoneBlackOpalOre.get()) {
                if ((BlackOpal.isTempWhitelistHardenedStoneBlackOpalOre.get() && BlackOpal.temperatureBlacklistHardenedStoneBlackOpalOre.get().contains(biomeTS)) || (!BlackOpal.isTempWhitelistHardenedStoneBlackOpalOre.get() && !BlackOpal.temperatureBlacklistHardenedStoneBlackOpalOre.get().contains(biomeTS))) {
                    if ((BlackOpal.isBiomeWhitelistHardenedStoneBlackOpalOre.get() && BlackOpal.biomeBlacklistHardenedStoneBlackOpalOre.get().contains(biomeRNS)) || (!BlackOpal.isBiomeWhitelistHardenedStoneBlackOpalOre.get() && !BlackOpal.biomeBlacklistHardenedStoneBlackOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("hardened_stone", null, new BlockMatcher(BlockInit.HARDENED_STONE.get())), BlockInit.HARDENED_STONE_BLACK_OPAL_ORE.get().getDefaultState(), BlackOpal.veinSizeHardenedStoneBlackOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(BlackOpal.veinsPerChunkHardenedStoneBlackOpalOre.get(), BlackOpal.minHeightHardenedStoneBlackOpalOre.get(), 0, BlackOpal.maxHeightHardenedStoneBlackOpalOre.get()))));
                    } } } }
    }
}
