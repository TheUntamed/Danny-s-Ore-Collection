package com.danny.dannys_ores.generation;

import com.danny.dannys_ores.Main;
import com.danny.dannys_ores.configs.WhiteOpal;
import com.danny.dannys_ores.configs.General;
import com.danny.dannys_ores.init.BlockInit;
import net.minecraft.block.Blocks;
import net.minecraft.block.pattern.BlockMatcher;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.GenerationStage;
import net.minecraft.world.gen.feature.Feature;
import net.minecraft.world.gen.feature.OreFeatureConfig;
import net.minecraft.world.gen.placement.CountRangeConfig;
import net.minecraft.world.gen.placement.Placement;

public class WhiteOpalGen {
    public static void addWhiteOpalGen(Biome biome, String biomeRNS, String biomeTS) {
        addWhiteOpalOreGeneration(biome, biomeRNS, biomeTS);
    }

    private static void addWhiteOpalOreGeneration(Biome biome, String biomeRNS, String biomeTS) {
        // Vanilla
        if (!General.disableStoneOreGeneration.get()) {
            if (WhiteOpal.enableStoneWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistStoneWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistStoneWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistStoneWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistStoneWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistStoneWhiteOpalOre.get() && WhiteOpal.biomeBlacklistStoneWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistStoneWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistStoneWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("stone", null, new BlockMatcher(Blocks.STONE)), BlockInit.STONE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeStoneWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkStoneWhiteOpalOre.get(), WhiteOpal.minHeightStoneWhiteOpalOre.get(), 0, WhiteOpal.maxHeightStoneWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableAndesiteOreGeneration.get()) {
            if (WhiteOpal.enableAndesiteWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistAndesiteWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistAndesiteWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistAndesiteWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistAndesiteWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistAndesiteWhiteOpalOre.get() && WhiteOpal.biomeBlacklistAndesiteWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistAndesiteWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistAndesiteWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("andesite", null, new BlockMatcher(Blocks.ANDESITE)), BlockInit.ANDESITE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeAndesiteWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkAndesiteWhiteOpalOre.get(), WhiteOpal.minHeightAndesiteWhiteOpalOre.get(), 0, WhiteOpal.maxHeightAndesiteWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableDioriteOreGeneration.get()) {
            if (WhiteOpal.enableDioriteWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistDioriteWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistDioriteWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistDioriteWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistDioriteWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistDioriteWhiteOpalOre.get() && WhiteOpal.biomeBlacklistDioriteWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistDioriteWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistDioriteWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("diorite", null, new BlockMatcher(Blocks.DIORITE)), BlockInit.DIORITE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeDioriteWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkDioriteWhiteOpalOre.get(), WhiteOpal.minHeightDioriteWhiteOpalOre.get(), 0, WhiteOpal.maxHeightDioriteWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableGraniteOreGeneration.get()) {
            if (WhiteOpal.enableGraniteWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistGraniteWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistGraniteWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistGraniteWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistGraniteWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistGraniteWhiteOpalOre.get() && WhiteOpal.biomeBlacklistGraniteWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistGraniteWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistGraniteWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("granite", null, new BlockMatcher(Blocks.GRANITE)), BlockInit.GRANITE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeGraniteWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkGraniteWhiteOpalOre.get(), WhiteOpal.minHeightGraniteWhiteOpalOre.get(), 0, WhiteOpal.maxHeightGraniteWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableNetherrackOreGeneration.get()) {
            if (WhiteOpal.enableNetherrackWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistNetherrackWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistNetherrackWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistNetherrackWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistNetherrackWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistNetherrackWhiteOpalOre.get() && WhiteOpal.biomeBlacklistNetherrackWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistNetherrackWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistNetherrackWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("netherrack", null, new BlockMatcher(Blocks.NETHERRACK)), BlockInit.NETHERRACK_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeNetherrackWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkNetherrackWhiteOpalOre.get(), WhiteOpal.minHeightNetherrackWhiteOpalOre.get(), 0, WhiteOpal.maxHeightNetherrackWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableEndStoneOreGeneration.get()) {
            if (WhiteOpal.enableEndStoneWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistEndStoneWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistEndStoneWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistEndStoneWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistEndStoneWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistEndStoneWhiteOpalOre.get() && WhiteOpal.biomeBlacklistEndStoneWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistEndStoneWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistEndStoneWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("end_stone", null, new BlockMatcher(Blocks.END_STONE)), BlockInit.END_STONE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeEndStoneWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkEndStoneWhiteOpalOre.get(), WhiteOpal.minHeightEndStoneWhiteOpalOre.get(), 0, WhiteOpal.maxHeightEndStoneWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableSandOreGeneration.get()) {
            if (WhiteOpal.enableSandWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistSandWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistSandWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistSandWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistSandWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistSandWhiteOpalOre.get() && WhiteOpal.biomeBlacklistSandWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistSandWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistSandWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("sand", null, new BlockMatcher(Blocks.SAND)), BlockInit.SAND_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeSandWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkSandWhiteOpalOre.get(), WhiteOpal.minHeightSandWhiteOpalOre.get(), 0, WhiteOpal.maxHeightSandWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableRedSandOreGeneration.get()) {
            if (WhiteOpal.enableRedSandWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistRedSandWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistRedSandWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistRedSandWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistRedSandWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistRedSandWhiteOpalOre.get() && WhiteOpal.biomeBlacklistRedSandWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistRedSandWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistRedSandWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("red_sand", null, new BlockMatcher(Blocks.RED_SAND)), BlockInit.RED_SAND_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeRedSandWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkRedSandWhiteOpalOre.get(), WhiteOpal.minHeightRedSandWhiteOpalOre.get(), 0, WhiteOpal.maxHeightRedSandWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableGravelOreGeneration.get()) {
            if (WhiteOpal.enableGravelWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistGravelWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistGravelWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistGravelWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistGravelWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistGravelWhiteOpalOre.get() && WhiteOpal.biomeBlacklistGravelWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistGravelWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistGravelWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("gravel", null, new BlockMatcher(Blocks.GRAVEL)), BlockInit.GRAVEL_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeGravelWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkGravelWhiteOpalOre.get(), WhiteOpal.minHeightGravelWhiteOpalOre.get(), 0, WhiteOpal.maxHeightGravelWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableSandstoneOreGeneration.get()) {
            if (WhiteOpal.enableSandstoneWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistSandstoneWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistSandstoneWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistSandstoneWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistSandstoneWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistSandstoneWhiteOpalOre.get() && WhiteOpal.biomeBlacklistSandstoneWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistSandstoneWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistSandstoneWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("sandstone", null, new BlockMatcher(Blocks.SANDSTONE)), BlockInit.SANDSTONE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeSandstoneWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkSandstoneWhiteOpalOre.get(), WhiteOpal.minHeightSandstoneWhiteOpalOre.get(), 0, WhiteOpal.maxHeightSandstoneWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableRedSandstoneOreGeneration.get()) {
            if (WhiteOpal.enableRedSandstoneWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistRedSandstoneWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistRedSandstoneWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistRedSandstoneWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistRedSandstoneWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistRedSandstoneWhiteOpalOre.get() && WhiteOpal.biomeBlacklistRedSandstoneWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistRedSandstoneWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistRedSandstoneWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("red_sandstone", null, new BlockMatcher(Blocks.RED_SANDSTONE)), BlockInit.RED_SANDSTONE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeRedSandstoneWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkRedSandstoneWhiteOpalOre.get(), WhiteOpal.minHeightRedSandstoneWhiteOpalOre.get(), 0, WhiteOpal.maxHeightRedSandstoneWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableBlueIceOreGeneration.get()) {
            if (WhiteOpal.enableBlueIceWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistBlueIceWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistBlueIceWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistBlueIceWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistBlueIceWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistBlueIceWhiteOpalOre.get() && WhiteOpal.biomeBlacklistBlueIceWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistBlueIceWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistBlueIceWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("blue_ice", null, new BlockMatcher(Blocks.BLUE_ICE)), BlockInit.BLUE_ICE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeBlueIceWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkBlueIceWhiteOpalOre.get(), WhiteOpal.minHeightBlueIceWhiteOpalOre.get(), 0, WhiteOpal.maxHeightBlueIceWhiteOpalOre.get()))));
                    } } } }
        if (!General.disablePackedIceOreGeneration.get()) {
            if (WhiteOpal.enablePackedIceWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistPackedIceWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistPackedIceWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistPackedIceWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistPackedIceWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistPackedIceWhiteOpalOre.get() && WhiteOpal.biomeBlacklistPackedIceWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistPackedIceWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistPackedIceWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("packed_ice", null, new BlockMatcher(Blocks.PACKED_ICE)), BlockInit.PACKED_ICE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizePackedIceWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkPackedIceWhiteOpalOre.get(), WhiteOpal.minHeightPackedIceWhiteOpalOre.get(), 0, WhiteOpal.maxHeightPackedIceWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableBedrockOreGeneration.get()) {
            if (WhiteOpal.enableBedrockWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistBedrockWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistBedrockWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistBedrockWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistBedrockWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistBedrockWhiteOpalOre.get() && WhiteOpal.biomeBlacklistBedrockWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistBedrockWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistBedrockWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("bedrock", null, new BlockMatcher(Blocks.BEDROCK)), BlockInit.BEDROCK_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeBedrockWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkBedrockWhiteOpalOre.get(), WhiteOpal.minHeightBedrockWhiteOpalOre.get(), 0, WhiteOpal.maxHeightBedrockWhiteOpalOre.get()))));
                    } } } }
        // Quark
        if (!General.disableQuarkBasaltOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableQuarkBasaltWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistQuarkBasaltWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistQuarkBasaltWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistQuarkBasaltWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistQuarkBasaltWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistQuarkBasaltWhiteOpalOre.get() && WhiteOpal.biomeBlacklistQuarkBasaltWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistQuarkBasaltWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistQuarkBasaltWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_basalt", null, new BlockMatcher(BlockInit.QUARK_BASALT != null ? BlockInit.QUARK_BASALT : Blocks.BARRIER)), BlockInit.QUARK_BASALT_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeQuarkBasaltWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkQuarkBasaltWhiteOpalOre.get(), WhiteOpal.minHeightQuarkBasaltWhiteOpalOre.get(), 0, WhiteOpal.maxHeightQuarkBasaltWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkMarbleOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableQuarkMarbleWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistQuarkMarbleWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistQuarkMarbleWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistQuarkMarbleWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistQuarkMarbleWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistQuarkMarbleWhiteOpalOre.get() && WhiteOpal.biomeBlacklistQuarkMarbleWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistQuarkMarbleWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistQuarkMarbleWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_marble", null, new BlockMatcher(BlockInit.QUARK_MARBLE != null ? BlockInit.QUARK_MARBLE : Blocks.BARRIER)), BlockInit.QUARK_MARBLE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeQuarkMarbleWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkQuarkMarbleWhiteOpalOre.get(), WhiteOpal.minHeightQuarkMarbleWhiteOpalOre.get(), 0, WhiteOpal.maxHeightQuarkMarbleWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkSlateOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableQuarkSlateWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistQuarkSlateWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistQuarkSlateWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistQuarkSlateWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistQuarkSlateWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistQuarkSlateWhiteOpalOre.get() && WhiteOpal.biomeBlacklistQuarkSlateWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistQuarkSlateWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistQuarkSlateWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_slate", null, new BlockMatcher(BlockInit.QUARK_SLATE != null ? BlockInit.QUARK_SLATE : Blocks.BARRIER)), BlockInit.QUARK_SLATE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeQuarkSlateWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkQuarkSlateWhiteOpalOre.get(), WhiteOpal.minHeightQuarkSlateWhiteOpalOre.get(), 0, WhiteOpal.maxHeightQuarkSlateWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkLimestoneOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableQuarkLimestoneWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistQuarkLimestoneWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistQuarkLimestoneWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistQuarkLimestoneWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistQuarkLimestoneWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistQuarkLimestoneWhiteOpalOre.get() && WhiteOpal.biomeBlacklistQuarkLimestoneWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistQuarkLimestoneWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistQuarkLimestoneWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_limestone", null, new BlockMatcher(BlockInit.QUARK_LIMESTONE != null ? BlockInit.QUARK_LIMESTONE : Blocks.BARRIER)), BlockInit.QUARK_LIMESTONE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeQuarkLimestoneWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkQuarkLimestoneWhiteOpalOre.get(), WhiteOpal.minHeightQuarkLimestoneWhiteOpalOre.get(), 0, WhiteOpal.maxHeightQuarkLimestoneWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableQuarkJasperOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableQuarkJasperWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistQuarkJasperWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistQuarkJasperWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistQuarkJasperWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistQuarkJasperWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistQuarkJasperWhiteOpalOre.get() && WhiteOpal.biomeBlacklistQuarkJasperWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistQuarkJasperWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistQuarkJasperWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_jasper", null, new BlockMatcher(BlockInit.QUARK_JASPER != null ? BlockInit.QUARK_JASPER : Blocks.BARRIER)), BlockInit.QUARK_JASPER_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeQuarkJasperWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkQuarkJasperWhiteOpalOre.get(), WhiteOpal.minHeightQuarkJasperWhiteOpalOre.get(), 0, WhiteOpal.maxHeightQuarkJasperWhiteOpalOre.get()))));
                    } } } }
        // Embellishcraft
        if (!General.disableEmbellishcraftBasaltOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableEmbellishcraftBasaltWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistEmbellishcraftBasaltWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistEmbellishcraftBasaltWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistEmbellishcraftBasaltWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistEmbellishcraftBasaltWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistEmbellishcraftBasaltWhiteOpalOre.get() && WhiteOpal.biomeBlacklistEmbellishcraftBasaltWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistEmbellishcraftBasaltWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistEmbellishcraftBasaltWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_basalt", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_BASALT != null ? BlockInit.EMBELLISHCRAFT_BASALT : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_BASALT_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeEmbellishcraftBasaltWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkEmbellishcraftBasaltWhiteOpalOre.get(), WhiteOpal.minHeightEmbellishcraftBasaltWhiteOpalOre.get(), 0, WhiteOpal.maxHeightEmbellishcraftBasaltWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftGneissOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableEmbellishcraftGneissWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistEmbellishcraftGneissWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistEmbellishcraftGneissWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistEmbellishcraftGneissWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistEmbellishcraftGneissWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistEmbellishcraftGneissWhiteOpalOre.get() && WhiteOpal.biomeBlacklistEmbellishcraftGneissWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistEmbellishcraftGneissWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistEmbellishcraftGneissWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_gneiss", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_GNEISS != null ? BlockInit.EMBELLISHCRAFT_GNEISS : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_GNEISS_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeEmbellishcraftGneissWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkEmbellishcraftGneissWhiteOpalOre.get(), WhiteOpal.minHeightEmbellishcraftGneissWhiteOpalOre.get(), 0, WhiteOpal.maxHeightEmbellishcraftGneissWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftJadeOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableEmbellishcraftJadeWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistEmbellishcraftJadeWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistEmbellishcraftJadeWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistEmbellishcraftJadeWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistEmbellishcraftJadeWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistEmbellishcraftJadeWhiteOpalOre.get() && WhiteOpal.biomeBlacklistEmbellishcraftJadeWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistEmbellishcraftJadeWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistEmbellishcraftJadeWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_jade", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_JADE != null ? BlockInit.EMBELLISHCRAFT_JADE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_JADE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeEmbellishcraftJadeWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkEmbellishcraftJadeWhiteOpalOre.get(), WhiteOpal.minHeightEmbellishcraftJadeWhiteOpalOre.get(), 0, WhiteOpal.maxHeightEmbellishcraftJadeWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftLarvikiteOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableEmbellishcraftLarvikiteWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistEmbellishcraftLarvikiteWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistEmbellishcraftLarvikiteWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistEmbellishcraftLarvikiteWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistEmbellishcraftLarvikiteWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistEmbellishcraftLarvikiteWhiteOpalOre.get() && WhiteOpal.biomeBlacklistEmbellishcraftLarvikiteWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistEmbellishcraftLarvikiteWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistEmbellishcraftLarvikiteWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_larvikite", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_LARVIKITE != null ? BlockInit.EMBELLISHCRAFT_LARVIKITE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_LARVIKITE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeEmbellishcraftLarvikiteWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkEmbellishcraftLarvikiteWhiteOpalOre.get(), WhiteOpal.minHeightEmbellishcraftLarvikiteWhiteOpalOre.get(), 0, WhiteOpal.maxHeightEmbellishcraftLarvikiteWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftMarbleOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableEmbellishcraftMarbleWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistEmbellishcraftMarbleWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistEmbellishcraftMarbleWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistEmbellishcraftMarbleWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistEmbellishcraftMarbleWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistEmbellishcraftMarbleWhiteOpalOre.get() && WhiteOpal.biomeBlacklistEmbellishcraftMarbleWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistEmbellishcraftMarbleWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistEmbellishcraftMarbleWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_marble", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_MARBLE != null ? BlockInit.EMBELLISHCRAFT_MARBLE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_MARBLE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeEmbellishcraftMarbleWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkEmbellishcraftMarbleWhiteOpalOre.get(), WhiteOpal.minHeightEmbellishcraftMarbleWhiteOpalOre.get(), 0, WhiteOpal.maxHeightEmbellishcraftMarbleWhiteOpalOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftSlateOreGeneration.get() && Main.quark) {
            if (WhiteOpal.enableEmbellishcraftSlateWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistEmbellishcraftSlateWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistEmbellishcraftSlateWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistEmbellishcraftSlateWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistEmbellishcraftSlateWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistEmbellishcraftSlateWhiteOpalOre.get() && WhiteOpal.biomeBlacklistEmbellishcraftSlateWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistEmbellishcraftSlateWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistEmbellishcraftSlateWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_slate", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_SLATE != null ? BlockInit.EMBELLISHCRAFT_SLATE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_SLATE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeEmbellishcraftSlateWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkEmbellishcraftSlateWhiteOpalOre.get(), WhiteOpal.minHeightEmbellishcraftSlateWhiteOpalOre.get(), 0, WhiteOpal.maxHeightEmbellishcraftSlateWhiteOpalOre.get()))));
                    } } } }
        // Danny's Ores
        if (!General.disableHardenedStoneOreGeneration.get()) {
            if (WhiteOpal.enableHardenedStoneWhiteOpalOre.get()) {
                if ((WhiteOpal.isTempWhitelistHardenedStoneWhiteOpalOre.get() && WhiteOpal.temperatureBlacklistHardenedStoneWhiteOpalOre.get().contains(biomeTS)) || (!WhiteOpal.isTempWhitelistHardenedStoneWhiteOpalOre.get() && !WhiteOpal.temperatureBlacklistHardenedStoneWhiteOpalOre.get().contains(biomeTS))) {
                    if ((WhiteOpal.isBiomeWhitelistHardenedStoneWhiteOpalOre.get() && WhiteOpal.biomeBlacklistHardenedStoneWhiteOpalOre.get().contains(biomeRNS)) || (!WhiteOpal.isBiomeWhitelistHardenedStoneWhiteOpalOre.get() && !WhiteOpal.biomeBlacklistHardenedStoneWhiteOpalOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.func_225566_b_(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("hardened_stone", null, new BlockMatcher(BlockInit.HARDENED_STONE.get())), BlockInit.HARDENED_STONE_WHITE_OPAL_ORE.get().getDefaultState(), WhiteOpal.veinSizeHardenedStoneWhiteOpalOre.get())).func_227228_a_(Placement.COUNT_RANGE.func_227446_a_(new CountRangeConfig(WhiteOpal.veinsPerChunkHardenedStoneWhiteOpalOre.get(), WhiteOpal.minHeightHardenedStoneWhiteOpalOre.get(), 0, WhiteOpal.maxHeightHardenedStoneWhiteOpalOre.get()))));
                    } } } }
    }
}
