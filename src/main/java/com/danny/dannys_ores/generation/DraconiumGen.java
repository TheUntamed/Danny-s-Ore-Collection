package com.danny.dannys_ores.generation;

import com.danny.dannys_ores.Main;
import com.danny.dannys_ores.configs.Draconium;
import com.danny.dannys_ores.configs.General;
import com.danny.dannys_ores.init.BlockInit;
import net.minecraft.block.Blocks;
import net.minecraft.block.pattern.BlockMatcher;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.GenerationStage;
import net.minecraft.world.gen.feature.Feature;
import net.minecraft.world.gen.feature.OreFeatureConfig;
import net.minecraft.world.gen.placement.CountRangeConfig;
import net.minecraft.world.gen.placement.Placement;

public class DraconiumGen {

    public static void addDraconiumGen(Biome biome, String biomeRNS, String biomeTS) {
        addDraconiumOreGeneration(biome, biomeRNS, biomeTS);
    }

    private static void addDraconiumOreGeneration(Biome biome, String biomeRNS, String biomeTS) {
        // Vanilla
        if (!General.disableStoneOreGeneration.get()) {
            if (Draconium.enableStoneDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistStoneDraconiumOre.get() && Draconium.temperatureBlacklistStoneDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistStoneDraconiumOre.get() && !Draconium.temperatureBlacklistStoneDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistStoneDraconiumOre.get() && Draconium.biomeBlacklistStoneDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistStoneDraconiumOre.get() && !Draconium.biomeBlacklistStoneDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("stone", null, new BlockMatcher(Blocks.STONE)), BlockInit.STONE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeStoneDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkStoneDraconiumOre.get(), Draconium.minHeightStoneDraconiumOre.get(), 0, Draconium.maxHeightStoneDraconiumOre.get()))));
                    } } } }
        if (!General.disableAndesiteOreGeneration.get()) {
            if (Draconium.enableAndesiteDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistAndesiteDraconiumOre.get() && Draconium.temperatureBlacklistAndesiteDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistAndesiteDraconiumOre.get() && !Draconium.temperatureBlacklistAndesiteDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistAndesiteDraconiumOre.get() && Draconium.biomeBlacklistAndesiteDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistAndesiteDraconiumOre.get() && !Draconium.biomeBlacklistAndesiteDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("andesite", null, new BlockMatcher(Blocks.ANDESITE)), BlockInit.ANDESITE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeAndesiteDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkAndesiteDraconiumOre.get(), Draconium.minHeightAndesiteDraconiumOre.get(), 0, Draconium.maxHeightAndesiteDraconiumOre.get()))));
                    } } } }
        if (!General.disableDioriteOreGeneration.get()) {
            if (Draconium.enableDioriteDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistDioriteDraconiumOre.get() && Draconium.temperatureBlacklistDioriteDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistDioriteDraconiumOre.get() && !Draconium.temperatureBlacklistDioriteDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistDioriteDraconiumOre.get() && Draconium.biomeBlacklistDioriteDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistDioriteDraconiumOre.get() && !Draconium.biomeBlacklistDioriteDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("diorite", null, new BlockMatcher(Blocks.DIORITE)), BlockInit.DIORITE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeDioriteDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkDioriteDraconiumOre.get(), Draconium.minHeightDioriteDraconiumOre.get(), 0, Draconium.maxHeightDioriteDraconiumOre.get()))));
                    } } } }
        if (!General.disableGraniteOreGeneration.get()) {
            if (Draconium.enableGraniteDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistGraniteDraconiumOre.get() && Draconium.temperatureBlacklistGraniteDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistGraniteDraconiumOre.get() && !Draconium.temperatureBlacklistGraniteDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistGraniteDraconiumOre.get() && Draconium.biomeBlacklistGraniteDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistGraniteDraconiumOre.get() && !Draconium.biomeBlacklistGraniteDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("granite", null, new BlockMatcher(Blocks.GRANITE)), BlockInit.GRANITE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeGraniteDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkGraniteDraconiumOre.get(), Draconium.minHeightGraniteDraconiumOre.get(), 0, Draconium.maxHeightGraniteDraconiumOre.get()))));
                    } } } }
        if (!General.disableNetherrackOreGeneration.get()) {
            if (Draconium.enableNetherrackDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistNetherrackDraconiumOre.get() && Draconium.temperatureBlacklistNetherrackDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistNetherrackDraconiumOre.get() && !Draconium.temperatureBlacklistNetherrackDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistNetherrackDraconiumOre.get() && Draconium.biomeBlacklistNetherrackDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistNetherrackDraconiumOre.get() && !Draconium.biomeBlacklistNetherrackDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("netherrack", null, new BlockMatcher(Blocks.NETHERRACK)), BlockInit.NETHERRACK_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeNetherrackDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkNetherrackDraconiumOre.get(), Draconium.minHeightNetherrackDraconiumOre.get(), 0, Draconium.maxHeightNetherrackDraconiumOre.get()))));
                    } } } }
        if (!General.disableEndStoneOreGeneration.get()) {
            if (Draconium.enableEndStoneDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistEndStoneDraconiumOre.get() && Draconium.temperatureBlacklistEndStoneDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistEndStoneDraconiumOre.get() && !Draconium.temperatureBlacklistEndStoneDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistEndStoneDraconiumOre.get() && Draconium.biomeBlacklistEndStoneDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistEndStoneDraconiumOre.get() && !Draconium.biomeBlacklistEndStoneDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("end_stone", null, new BlockMatcher(Blocks.END_STONE)), BlockInit.END_STONE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeEndStoneDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkEndStoneDraconiumOre.get(), Draconium.minHeightEndStoneDraconiumOre.get(), 0, Draconium.maxHeightEndStoneDraconiumOre.get()))));
                    } } } }
        if (!General.disableSandOreGeneration.get()) {
            if (Draconium.enableSandDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistSandDraconiumOre.get() && Draconium.temperatureBlacklistSandDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistSandDraconiumOre.get() && !Draconium.temperatureBlacklistSandDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistSandDraconiumOre.get() && Draconium.biomeBlacklistSandDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistSandDraconiumOre.get() && !Draconium.biomeBlacklistSandDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("sand", null, new BlockMatcher(Blocks.SAND)), BlockInit.SAND_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeSandDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkSandDraconiumOre.get(), Draconium.minHeightSandDraconiumOre.get(), 0, Draconium.maxHeightSandDraconiumOre.get()))));
                    } } } }
        if (!General.disableRedSandOreGeneration.get()) {
            if (Draconium.enableRedSandDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistRedSandDraconiumOre.get() && Draconium.temperatureBlacklistRedSandDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistRedSandDraconiumOre.get() && !Draconium.temperatureBlacklistRedSandDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistRedSandDraconiumOre.get() && Draconium.biomeBlacklistRedSandDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistRedSandDraconiumOre.get() && !Draconium.biomeBlacklistRedSandDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("red_sand", null, new BlockMatcher(Blocks.RED_SAND)), BlockInit.RED_SAND_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeRedSandDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkRedSandDraconiumOre.get(), Draconium.minHeightRedSandDraconiumOre.get(), 0, Draconium.maxHeightRedSandDraconiumOre.get()))));
                    } } } }
        if (!General.disableGravelOreGeneration.get()) {
            if (Draconium.enableGravelDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistGravelDraconiumOre.get() && Draconium.temperatureBlacklistGravelDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistGravelDraconiumOre.get() && !Draconium.temperatureBlacklistGravelDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistGravelDraconiumOre.get() && Draconium.biomeBlacklistGravelDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistGravelDraconiumOre.get() && !Draconium.biomeBlacklistGravelDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("gravel", null, new BlockMatcher(Blocks.GRAVEL)), BlockInit.GRAVEL_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeGravelDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkGravelDraconiumOre.get(), Draconium.minHeightGravelDraconiumOre.get(), 0, Draconium.maxHeightGravelDraconiumOre.get()))));
                    } } } }
        if (!General.disableSandstoneOreGeneration.get()) {
            if (Draconium.enableSandstoneDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistSandstoneDraconiumOre.get() && Draconium.temperatureBlacklistSandstoneDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistSandstoneDraconiumOre.get() && !Draconium.temperatureBlacklistSandstoneDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistSandstoneDraconiumOre.get() && Draconium.biomeBlacklistSandstoneDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistSandstoneDraconiumOre.get() && !Draconium.biomeBlacklistSandstoneDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("sandstone", null, new BlockMatcher(Blocks.SANDSTONE)), BlockInit.SANDSTONE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeSandstoneDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkSandstoneDraconiumOre.get(), Draconium.minHeightSandstoneDraconiumOre.get(), 0, Draconium.maxHeightSandstoneDraconiumOre.get()))));
                    } } } }
        if (!General.disableRedSandstoneOreGeneration.get()) {
            if (Draconium.enableRedSandstoneDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistRedSandstoneDraconiumOre.get() && Draconium.temperatureBlacklistRedSandstoneDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistRedSandstoneDraconiumOre.get() && !Draconium.temperatureBlacklistRedSandstoneDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistRedSandstoneDraconiumOre.get() && Draconium.biomeBlacklistRedSandstoneDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistRedSandstoneDraconiumOre.get() && !Draconium.biomeBlacklistRedSandstoneDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("red_sandstone", null, new BlockMatcher(Blocks.RED_SANDSTONE)), BlockInit.RED_SANDSTONE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeRedSandstoneDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkRedSandstoneDraconiumOre.get(), Draconium.minHeightRedSandstoneDraconiumOre.get(), 0, Draconium.maxHeightRedSandstoneDraconiumOre.get()))));
                    } } } }
        if (!General.disableBlueIceOreGeneration.get()) {
            if (Draconium.enableBlueIceDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistBlueIceDraconiumOre.get() && Draconium.temperatureBlacklistBlueIceDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistBlueIceDraconiumOre.get() && !Draconium.temperatureBlacklistBlueIceDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistBlueIceDraconiumOre.get() && Draconium.biomeBlacklistBlueIceDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistBlueIceDraconiumOre.get() && !Draconium.biomeBlacklistBlueIceDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("blue_ice", null, new BlockMatcher(Blocks.BLUE_ICE)), BlockInit.BLUE_ICE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeBlueIceDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkBlueIceDraconiumOre.get(), Draconium.minHeightBlueIceDraconiumOre.get(), 0, Draconium.maxHeightBlueIceDraconiumOre.get()))));
                    } } } }
        if (!General.disablePackedIceOreGeneration.get()) {
            if (Draconium.enablePackedIceDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistPackedIceDraconiumOre.get() && Draconium.temperatureBlacklistPackedIceDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistPackedIceDraconiumOre.get() && !Draconium.temperatureBlacklistPackedIceDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistPackedIceDraconiumOre.get() && Draconium.biomeBlacklistPackedIceDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistPackedIceDraconiumOre.get() && !Draconium.biomeBlacklistPackedIceDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("packed_ice", null, new BlockMatcher(Blocks.PACKED_ICE)), BlockInit.PACKED_ICE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizePackedIceDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkPackedIceDraconiumOre.get(), Draconium.minHeightPackedIceDraconiumOre.get(), 0, Draconium.maxHeightPackedIceDraconiumOre.get()))));
                    } } } }
        if (!General.disableBedrockOreGeneration.get()) {
            if (Draconium.enableBedrockDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistBedrockDraconiumOre.get() && Draconium.temperatureBlacklistBedrockDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistBedrockDraconiumOre.get() && !Draconium.temperatureBlacklistBedrockDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistBedrockDraconiumOre.get() && Draconium.biomeBlacklistBedrockDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistBedrockDraconiumOre.get() && !Draconium.biomeBlacklistBedrockDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("bedrock", null, new BlockMatcher(Blocks.BEDROCK)), BlockInit.BEDROCK_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeBedrockDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkBedrockDraconiumOre.get(), Draconium.minHeightBedrockDraconiumOre.get(), 0, Draconium.maxHeightBedrockDraconiumOre.get()))));
                    } } } }
        // Quark
        if (!General.disableQuarkBasaltOreGeneration.get() && Main.quark) {
            if (Draconium.enableQuarkBasaltDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistQuarkBasaltDraconiumOre.get() && Draconium.temperatureBlacklistQuarkBasaltDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistQuarkBasaltDraconiumOre.get() && !Draconium.temperatureBlacklistQuarkBasaltDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistQuarkBasaltDraconiumOre.get() && Draconium.biomeBlacklistQuarkBasaltDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistQuarkBasaltDraconiumOre.get() && !Draconium.biomeBlacklistQuarkBasaltDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_basalt", null, new BlockMatcher(BlockInit.QUARK_BASALT != null ? BlockInit.QUARK_BASALT : Blocks.BARRIER)), BlockInit.QUARK_BASALT_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeQuarkBasaltDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkQuarkBasaltDraconiumOre.get(), Draconium.minHeightQuarkBasaltDraconiumOre.get(), 0, Draconium.maxHeightQuarkBasaltDraconiumOre.get()))));
                    } } } }
        if (!General.disableQuarkMarbleOreGeneration.get() && Main.quark) {
            if (Draconium.enableQuarkMarbleDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistQuarkMarbleDraconiumOre.get() && Draconium.temperatureBlacklistQuarkMarbleDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistQuarkMarbleDraconiumOre.get() && !Draconium.temperatureBlacklistQuarkMarbleDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistQuarkMarbleDraconiumOre.get() && Draconium.biomeBlacklistQuarkMarbleDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistQuarkMarbleDraconiumOre.get() && !Draconium.biomeBlacklistQuarkMarbleDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_marble", null, new BlockMatcher(BlockInit.QUARK_MARBLE != null ? BlockInit.QUARK_MARBLE : Blocks.BARRIER)), BlockInit.QUARK_MARBLE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeQuarkMarbleDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkQuarkMarbleDraconiumOre.get(), Draconium.minHeightQuarkMarbleDraconiumOre.get(), 0, Draconium.maxHeightQuarkMarbleDraconiumOre.get()))));
                    } } } }
        if (!General.disableQuarkSlateOreGeneration.get() && Main.quark) {
            if (Draconium.enableQuarkSlateDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistQuarkSlateDraconiumOre.get() && Draconium.temperatureBlacklistQuarkSlateDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistQuarkSlateDraconiumOre.get() && !Draconium.temperatureBlacklistQuarkSlateDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistQuarkSlateDraconiumOre.get() && Draconium.biomeBlacklistQuarkSlateDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistQuarkSlateDraconiumOre.get() && !Draconium.biomeBlacklistQuarkSlateDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_slate", null, new BlockMatcher(BlockInit.QUARK_SLATE != null ? BlockInit.QUARK_SLATE : Blocks.BARRIER)), BlockInit.QUARK_SLATE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeQuarkSlateDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkQuarkSlateDraconiumOre.get(), Draconium.minHeightQuarkSlateDraconiumOre.get(), 0, Draconium.maxHeightQuarkSlateDraconiumOre.get()))));
                    } } } }
        if (!General.disableQuarkLimestoneOreGeneration.get() && Main.quark) {
            if (Draconium.enableQuarkLimestoneDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistQuarkLimestoneDraconiumOre.get() && Draconium.temperatureBlacklistQuarkLimestoneDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistQuarkLimestoneDraconiumOre.get() && !Draconium.temperatureBlacklistQuarkLimestoneDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistQuarkLimestoneDraconiumOre.get() && Draconium.biomeBlacklistQuarkLimestoneDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistQuarkLimestoneDraconiumOre.get() && !Draconium.biomeBlacklistQuarkLimestoneDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_limestone", null, new BlockMatcher(BlockInit.QUARK_LIMESTONE != null ? BlockInit.QUARK_LIMESTONE : Blocks.BARRIER)), BlockInit.QUARK_LIMESTONE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeQuarkLimestoneDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkQuarkLimestoneDraconiumOre.get(), Draconium.minHeightQuarkLimestoneDraconiumOre.get(), 0, Draconium.maxHeightQuarkLimestoneDraconiumOre.get()))));
                    } } } }
        if (!General.disableQuarkJasperOreGeneration.get() && Main.quark) {
            if (Draconium.enableQuarkJasperDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistQuarkJasperDraconiumOre.get() && Draconium.temperatureBlacklistQuarkJasperDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistQuarkJasperDraconiumOre.get() && !Draconium.temperatureBlacklistQuarkJasperDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistQuarkJasperDraconiumOre.get() && Draconium.biomeBlacklistQuarkJasperDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistQuarkJasperDraconiumOre.get() && !Draconium.biomeBlacklistQuarkJasperDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("quark_jasper", null, new BlockMatcher(BlockInit.QUARK_JASPER != null ? BlockInit.QUARK_JASPER : Blocks.BARRIER)), BlockInit.QUARK_JASPER_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeQuarkJasperDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkQuarkJasperDraconiumOre.get(), Draconium.minHeightQuarkJasperDraconiumOre.get(), 0, Draconium.maxHeightQuarkJasperDraconiumOre.get()))));
                    } } } }
        // Embellishcraft
        if (!General.disableEmbellishcraftBasaltOreGeneration.get() && Main.quark) {
            if (Draconium.enableEmbellishcraftBasaltDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistEmbellishcraftBasaltDraconiumOre.get() && Draconium.temperatureBlacklistEmbellishcraftBasaltDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistEmbellishcraftBasaltDraconiumOre.get() && !Draconium.temperatureBlacklistEmbellishcraftBasaltDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistEmbellishcraftBasaltDraconiumOre.get() && Draconium.biomeBlacklistEmbellishcraftBasaltDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistEmbellishcraftBasaltDraconiumOre.get() && !Draconium.biomeBlacklistEmbellishcraftBasaltDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_basalt", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_BASALT != null ? BlockInit.EMBELLISHCRAFT_BASALT : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_BASALT_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeEmbellishcraftBasaltDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkEmbellishcraftBasaltDraconiumOre.get(), Draconium.minHeightEmbellishcraftBasaltDraconiumOre.get(), 0, Draconium.maxHeightEmbellishcraftBasaltDraconiumOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftGneissOreGeneration.get() && Main.quark) {
            if (Draconium.enableEmbellishcraftGneissDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistEmbellishcraftGneissDraconiumOre.get() && Draconium.temperatureBlacklistEmbellishcraftGneissDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistEmbellishcraftGneissDraconiumOre.get() && !Draconium.temperatureBlacklistEmbellishcraftGneissDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistEmbellishcraftGneissDraconiumOre.get() && Draconium.biomeBlacklistEmbellishcraftGneissDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistEmbellishcraftGneissDraconiumOre.get() && !Draconium.biomeBlacklistEmbellishcraftGneissDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_gneiss", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_GNEISS != null ? BlockInit.EMBELLISHCRAFT_GNEISS : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_GNEISS_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeEmbellishcraftGneissDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkEmbellishcraftGneissDraconiumOre.get(), Draconium.minHeightEmbellishcraftGneissDraconiumOre.get(), 0, Draconium.maxHeightEmbellishcraftGneissDraconiumOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftJadeOreGeneration.get() && Main.quark) {
            if (Draconium.enableEmbellishcraftJadeDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistEmbellishcraftJadeDraconiumOre.get() && Draconium.temperatureBlacklistEmbellishcraftJadeDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistEmbellishcraftJadeDraconiumOre.get() && !Draconium.temperatureBlacklistEmbellishcraftJadeDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistEmbellishcraftJadeDraconiumOre.get() && Draconium.biomeBlacklistEmbellishcraftJadeDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistEmbellishcraftJadeDraconiumOre.get() && !Draconium.biomeBlacklistEmbellishcraftJadeDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_jade", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_JADE != null ? BlockInit.EMBELLISHCRAFT_JADE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_JADE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeEmbellishcraftJadeDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkEmbellishcraftJadeDraconiumOre.get(), Draconium.minHeightEmbellishcraftJadeDraconiumOre.get(), 0, Draconium.maxHeightEmbellishcraftJadeDraconiumOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftLarvikiteOreGeneration.get() && Main.quark) {
            if (Draconium.enableEmbellishcraftLarvikiteDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistEmbellishcraftLarvikiteDraconiumOre.get() && Draconium.temperatureBlacklistEmbellishcraftLarvikiteDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistEmbellishcraftLarvikiteDraconiumOre.get() && !Draconium.temperatureBlacklistEmbellishcraftLarvikiteDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistEmbellishcraftLarvikiteDraconiumOre.get() && Draconium.biomeBlacklistEmbellishcraftLarvikiteDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistEmbellishcraftLarvikiteDraconiumOre.get() && !Draconium.biomeBlacklistEmbellishcraftLarvikiteDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_larvikite", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_LARVIKITE != null ? BlockInit.EMBELLISHCRAFT_LARVIKITE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_LARVIKITE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeEmbellishcraftLarvikiteDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkEmbellishcraftLarvikiteDraconiumOre.get(), Draconium.minHeightEmbellishcraftLarvikiteDraconiumOre.get(), 0, Draconium.maxHeightEmbellishcraftLarvikiteDraconiumOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftMarbleOreGeneration.get() && Main.quark) {
            if (Draconium.enableEmbellishcraftMarbleDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistEmbellishcraftMarbleDraconiumOre.get() && Draconium.temperatureBlacklistEmbellishcraftMarbleDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistEmbellishcraftMarbleDraconiumOre.get() && !Draconium.temperatureBlacklistEmbellishcraftMarbleDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistEmbellishcraftMarbleDraconiumOre.get() && Draconium.biomeBlacklistEmbellishcraftMarbleDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistEmbellishcraftMarbleDraconiumOre.get() && !Draconium.biomeBlacklistEmbellishcraftMarbleDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_marble", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_MARBLE != null ? BlockInit.EMBELLISHCRAFT_MARBLE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_MARBLE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeEmbellishcraftMarbleDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkEmbellishcraftMarbleDraconiumOre.get(), Draconium.minHeightEmbellishcraftMarbleDraconiumOre.get(), 0, Draconium.maxHeightEmbellishcraftMarbleDraconiumOre.get()))));
                    } } } }
        if (!General.disableEmbellishcraftSlateOreGeneration.get() && Main.quark) {
            if (Draconium.enableEmbellishcraftSlateDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistEmbellishcraftSlateDraconiumOre.get() && Draconium.temperatureBlacklistEmbellishcraftSlateDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistEmbellishcraftSlateDraconiumOre.get() && !Draconium.temperatureBlacklistEmbellishcraftSlateDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistEmbellishcraftSlateDraconiumOre.get() && Draconium.biomeBlacklistEmbellishcraftSlateDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistEmbellishcraftSlateDraconiumOre.get() && !Draconium.biomeBlacklistEmbellishcraftSlateDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("embellishcraft_slate", null, new BlockMatcher(BlockInit.EMBELLISHCRAFT_SLATE != null ? BlockInit.EMBELLISHCRAFT_SLATE : Blocks.BARRIER)), BlockInit.EMBELLISHCRAFT_SLATE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeEmbellishcraftSlateDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkEmbellishcraftSlateDraconiumOre.get(), Draconium.minHeightEmbellishcraftSlateDraconiumOre.get(), 0, Draconium.maxHeightEmbellishcraftSlateDraconiumOre.get()))));
                    } } } }
        // Danny's Ores
        if (!General.disableHardenedStoneOreGeneration.get()) {
            if (Draconium.enableHardenedStoneDraconiumOre.get()) {
                if ((Draconium.isTempWhitelistHardenedStoneDraconiumOre.get() && Draconium.temperatureBlacklistHardenedStoneDraconiumOre.get().contains(biomeTS)) || (!Draconium.isTempWhitelistHardenedStoneDraconiumOre.get() && !Draconium.temperatureBlacklistHardenedStoneDraconiumOre.get().contains(biomeTS))) {
                    if ((Draconium.isBiomeWhitelistHardenedStoneDraconiumOre.get() && Draconium.biomeBlacklistHardenedStoneDraconiumOre.get().contains(biomeRNS)) || (!Draconium.isBiomeWhitelistHardenedStoneDraconiumOre.get() && !Draconium.biomeBlacklistHardenedStoneDraconiumOre.get().contains(biomeRNS))) {
                        biome.addFeature(GenerationStage.Decoration.UNDERGROUND_DECORATION, Feature.ORE.withConfiguration(new OreFeatureConfig(OreFeatureConfig.FillerBlockType.create("hardened_stone", null, new BlockMatcher(BlockInit.HARDENED_STONE.get())), BlockInit.HARDENED_STONE_DRACONIUM_ORE.get().getDefaultState(), Draconium.veinSizeHardenedStoneDraconiumOre.get())).withPlacement(Placement.COUNT_RANGE.configure(new CountRangeConfig(Draconium.veinsPerChunkHardenedStoneDraconiumOre.get(), Draconium.minHeightHardenedStoneDraconiumOre.get(), 0, Draconium.maxHeightHardenedStoneDraconiumOre.get()))));
                    } } } }
    }
}
