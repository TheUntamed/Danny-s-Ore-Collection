package com.danny.dannys_ores.generation;

import com.danny.dannys_ores.Main;
import com.danny.dannys_ores.configs.*;

import java.util.ArrayList;

/*
The biome verifier was inspired by the code of the mod Embellishcraft by MapperTV.
https://github.com/MapperTV/embellishcraft
 */
public class ConfigChecker {

    public static void checkConfig(ArrayList biomeVerify, ArrayList tempVerify) {
        checkStoneVariants(biomeVerify, tempVerify);
        checkIron(biomeVerify, tempVerify);
        checkCoal(biomeVerify, tempVerify);
        checkDiamond(biomeVerify, tempVerify);
        checkEmerald(biomeVerify, tempVerify);
        checkGold(biomeVerify, tempVerify);
        checkLapis(biomeVerify, tempVerify);
        checkQuartz(biomeVerify, tempVerify);
        checkRedstone(biomeVerify, tempVerify);
        checkCopper(biomeVerify, tempVerify);
        checkXp(biomeVerify, tempVerify);
        checkAluminum(biomeVerify, tempVerify);
        checkIridium(biomeVerify, tempVerify);
        checkLead(biomeVerify, tempVerify);
        checkPlatinum(biomeVerify, tempVerify);
        checkSilver(biomeVerify, tempVerify);
        checkTin(biomeVerify, tempVerify);
        checkZinc(biomeVerify, tempVerify);
        checkNickel(biomeVerify, tempVerify);
        checkOsmium(biomeVerify, tempVerify);
        checkUranium(biomeVerify, tempVerify);
        checkAdamantium(biomeVerify, tempVerify);
        checkAmethyst(biomeVerify, tempVerify);
        checkBismuth(biomeVerify, tempVerify);
        checkBlackOpal(biomeVerify, tempVerify);
        checkWhiteOpal(biomeVerify, tempVerify);
        checkLucky(biomeVerify, tempVerify);
        checkRunite(biomeVerify, tempVerify);
        checkMithril(biomeVerify, tempVerify);
    }

    private static void checkStoneVariants(ArrayList biomeVerify, ArrayList tempVerify) {
        for (String name : StoneVariants.biomeBlacklistHardenedStone.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/stone_variants.toml in biomeBlacklistHardenedStone, please check the entries!"); } }

        for (String temp : StoneVariants.temperatureBlacklistHardenedStone.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/stone_variants.toml in temperatureBlacklistHardenedStone, please check the entries!"); } }
    }

    private static void checkAdamantium(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Adamantium.biomeBlacklistStoneAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistStoneAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistAndesiteAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistAndesiteAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistDioriteAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistDioriteAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistGraniteAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistGraniteAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistNetherrackAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistNetherrackAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistEndStoneAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistEndStoneAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistSandAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistSandAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistGravelAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistGravelAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistSandstoneAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistSandstoneAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistRedSandstoneAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistRedSandstoneAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistRedSandAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistRedSandAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistBlueIceAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistBlueIceAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistPackedIceAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistPackedIceAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistBedrockAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistBedrockAdamantiumOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Adamantium.biomeBlacklistQuarkBasaltAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistQuarkBasaltAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistQuarkLimestoneAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistQuarkLimestoneAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistQuarkJasperAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistQuarkJasperAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistQuarkMarbleAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistQuarkMarbleAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistQuarkSlateAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistQuarkSlateAdamantiumOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Adamantium.biomeBlacklistEmbellishcraftBasaltAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistEmbellishcraftBasaltAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistEmbellishcraftGneissAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistEmbellishcraftGneissAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistEmbellishcraftJadeAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistEmbellishcraftJadeAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistEmbellishcraftLarvikiteAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistEmbellishcraftLarvikiteAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistEmbellishcraftMarbleAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistEmbellishcraftMarbleAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.biomeBlacklistEmbellishcraftSlateAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistEmbellishcraftSlateAdamantiumOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Adamantium.biomeBlacklistHardenedStoneAdamantiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/adamantium.toml in biomeBlacklistHardenedStoneAdamantiumOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Adamantium.temperatureBlacklistStoneAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistStoneAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistAndesiteAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistAndesiteAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistDioriteAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistDioriteAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistGraniteAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistGraniteAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistNetherrackAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistNetherrackAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistEndStoneAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistEndStoneAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistSandAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistSandAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistGravelAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistGravelAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistSandstoneAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistSandstoneAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistRedSandstoneAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistRedSandstoneAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistRedSandAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistRedSandAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistBlueIceAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistBlueIceAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistPackedIceAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistPackedIceAdamantiumOre, please check the entries!"); } }
        for (String temp : Adamantium.temperatureBlacklistBedrockAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistBedrockAdamantiumOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Adamantium.temperatureBlacklistQuarkBasaltAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistQuarkBasaltAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistQuarkLimestoneAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistQuarkLimestoneAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistQuarkJasperAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistQuarkJasperAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistQuarkMarbleAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistQuarkMarbleAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistQuarkSlateAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistQuarkSlateAdamantiumOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Adamantium.temperatureBlacklistEmbellishcraftBasaltAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistEmbellishcraftBasaltAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistEmbellishcraftGneissAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistEmbellishcraftGneissAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistEmbellishcraftJadeAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistEmbellishcraftJadeAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistEmbellishcraftLarvikiteAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistEmbellishcraftLarvikiteAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistEmbellishcraftMarbleAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistEmbellishcraftMarbleAdamantiumOre, please check the entries!"); } }
        for (String name : Adamantium.temperatureBlacklistEmbellishcraftSlateAdamantiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistEmbellishcraftSlateAdamantiumOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Adamantium.temperatureBlacklistSandAdamantiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/adamantium.toml in temperatureBlacklistSandAdamantiumOre, please check the entries!"); } }
    }

    private static void checkAmethyst(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Amethyst.biomeBlacklistStoneAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistStoneAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistAndesiteAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistAndesiteAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistDioriteAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistDioriteAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistGraniteAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistGraniteAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistNetherrackAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistNetherrackAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistEndStoneAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistEndStoneAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistSandAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistSandAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistGravelAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistGravelAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistSandstoneAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistSandstoneAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistRedSandstoneAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistRedSandstoneAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistRedSandAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistRedSandAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistBlueIceAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistBlueIceAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistPackedIceAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistPackedIceAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistBedrockAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistBedrockAmethystOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Amethyst.biomeBlacklistQuarkBasaltAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistQuarkBasaltAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistQuarkLimestoneAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistQuarkLimestoneAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistQuarkJasperAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistQuarkJasperAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistQuarkMarbleAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistQuarkMarbleAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistQuarkSlateAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistQuarkSlateAmethystOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Amethyst.biomeBlacklistEmbellishcraftBasaltAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistEmbellishcraftBasaltAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistEmbellishcraftGneissAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistEmbellishcraftGneissAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistEmbellishcraftJadeAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistEmbellishcraftJadeAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistEmbellishcraftLarvikiteAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistEmbellishcraftLarvikiteAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistEmbellishcraftMarbleAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistEmbellishcraftMarbleAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.biomeBlacklistEmbellishcraftSlateAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistEmbellishcraftSlateAmethystOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Amethyst.biomeBlacklistHardenedStoneAmethystOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/amethyst.toml in biomeBlacklistHardenedStoneAmethystOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Amethyst.temperatureBlacklistStoneAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistStoneAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistAndesiteAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistAndesiteAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistDioriteAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistDioriteAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistGraniteAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistGraniteAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistNetherrackAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistNetherrackAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistEndStoneAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistEndStoneAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistSandAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistSandAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistGravelAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistGravelAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistSandstoneAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistSandstoneAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistRedSandstoneAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistRedSandstoneAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistRedSandAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistRedSandAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistBlueIceAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistBlueIceAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistPackedIceAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistPackedIceAmethystOre, please check the entries!"); } }
        for (String temp : Amethyst.temperatureBlacklistBedrockAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistBedrockAmethystOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Amethyst.temperatureBlacklistQuarkBasaltAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistQuarkBasaltAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistQuarkLimestoneAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistQuarkLimestoneAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistQuarkJasperAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistQuarkJasperAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistQuarkMarbleAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistQuarkMarbleAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistQuarkSlateAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistQuarkSlateAmethystOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Amethyst.temperatureBlacklistEmbellishcraftBasaltAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistEmbellishcraftBasaltAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistEmbellishcraftGneissAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistEmbellishcraftGneissAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistEmbellishcraftJadeAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistEmbellishcraftJadeAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistEmbellishcraftLarvikiteAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistEmbellishcraftLarvikiteAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistEmbellishcraftMarbleAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistEmbellishcraftMarbleAmethystOre, please check the entries!"); } }
        for (String name : Amethyst.temperatureBlacklistEmbellishcraftSlateAmethystOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistEmbellishcraftSlateAmethystOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Amethyst.temperatureBlacklistSandAmethystOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/amethyst.toml in temperatureBlacklistSandAmethystOre, please check the entries!"); } }
    }

    private static void checkBismuth(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Bismuth.biomeBlacklistStoneBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistStoneBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistAndesiteBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistAndesiteBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistDioriteBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistDioriteBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistGraniteBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistGraniteBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistNetherrackBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistNetherrackBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistEndStoneBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistEndStoneBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistSandBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistSandBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistGravelBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistGravelBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistSandstoneBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistSandstoneBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistRedSandstoneBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistRedSandstoneBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistRedSandBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistRedSandBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistBlueIceBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistBlueIceBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistPackedIceBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistPackedIceBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistBedrockBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistBedrockBismuthOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Bismuth.biomeBlacklistQuarkBasaltBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistQuarkBasaltBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistQuarkLimestoneBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistQuarkLimestoneBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistQuarkJasperBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistQuarkJasperBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistQuarkMarbleBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistQuarkMarbleBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistQuarkSlateBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistQuarkSlateBismuthOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Bismuth.biomeBlacklistEmbellishcraftBasaltBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistEmbellishcraftBasaltBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistEmbellishcraftGneissBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistEmbellishcraftGneissBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistEmbellishcraftJadeBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistEmbellishcraftJadeBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistEmbellishcraftLarvikiteBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistEmbellishcraftLarvikiteBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistEmbellishcraftMarbleBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistEmbellishcraftMarbleBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.biomeBlacklistEmbellishcraftSlateBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistEmbellishcraftSlateBismuthOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Bismuth.biomeBlacklistHardenedStoneBismuthOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/bismuth.toml in biomeBlacklistHardenedStoneBismuthOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Bismuth.temperatureBlacklistStoneBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistStoneBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistAndesiteBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistAndesiteBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistDioriteBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistDioriteBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistGraniteBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistGraniteBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistNetherrackBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistNetherrackBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistEndStoneBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistEndStoneBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistSandBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistSandBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistGravelBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistGravelBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistSandstoneBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistSandstoneBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistRedSandstoneBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistRedSandstoneBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistRedSandBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistRedSandBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistBlueIceBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistBlueIceBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistPackedIceBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistPackedIceBismuthOre, please check the entries!"); } }
        for (String temp : Bismuth.temperatureBlacklistBedrockBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistBedrockBismuthOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Bismuth.temperatureBlacklistQuarkBasaltBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistQuarkBasaltBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistQuarkLimestoneBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistQuarkLimestoneBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistQuarkJasperBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistQuarkJasperBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistQuarkMarbleBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistQuarkMarbleBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistQuarkSlateBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistQuarkSlateBismuthOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Bismuth.temperatureBlacklistEmbellishcraftBasaltBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistEmbellishcraftBasaltBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistEmbellishcraftGneissBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistEmbellishcraftGneissBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistEmbellishcraftJadeBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistEmbellishcraftJadeBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistEmbellishcraftLarvikiteBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistEmbellishcraftLarvikiteBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistEmbellishcraftMarbleBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistEmbellishcraftMarbleBismuthOre, please check the entries!"); } }
        for (String name : Bismuth.temperatureBlacklistEmbellishcraftSlateBismuthOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistEmbellishcraftSlateBismuthOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Bismuth.temperatureBlacklistSandBismuthOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/bismuth.toml in temperatureBlacklistSandBismuthOre, please check the entries!"); } }
    }

    private static void checkBlackOpal(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : BlackOpal.biomeBlacklistStoneBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistStoneBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistAndesiteBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistAndesiteBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistDioriteBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistDioriteBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistGraniteBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistGraniteBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistNetherrackBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistNetherrackBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistEndStoneBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistEndStoneBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistSandBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistSandBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistGravelBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistGravelBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistSandstoneBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistSandstoneBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistRedSandstoneBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistRedSandstoneBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistRedSandBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistRedSandBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistBlueIceBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistBlueIceBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistPackedIceBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistPackedIceBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistBedrockBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistBedrockBlackOpalOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : BlackOpal.biomeBlacklistQuarkBasaltBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistQuarkBasaltBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistQuarkLimestoneBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistQuarkLimestoneBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistQuarkJasperBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistQuarkJasperBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistQuarkMarbleBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistQuarkMarbleBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistQuarkSlateBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistQuarkSlateBlackOpalOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : BlackOpal.biomeBlacklistEmbellishcraftBasaltBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistEmbellishcraftBasaltBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistEmbellishcraftGneissBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistEmbellishcraftGneissBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistEmbellishcraftJadeBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistEmbellishcraftJadeBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistEmbellishcraftLarvikiteBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistEmbellishcraftLarvikiteBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistEmbellishcraftMarbleBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistEmbellishcraftMarbleBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.biomeBlacklistEmbellishcraftSlateBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistEmbellishcraftSlateBlackOpalOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : BlackOpal.biomeBlacklistHardenedStoneBlackOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/black_opal.toml in biomeBlacklistHardenedStoneBlackOpalOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : BlackOpal.temperatureBlacklistStoneBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistStoneBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistAndesiteBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistAndesiteBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistDioriteBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistDioriteBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistGraniteBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistGraniteBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistNetherrackBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistNetherrackBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistEndStoneBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistEndStoneBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistSandBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistSandBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistGravelBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistGravelBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistSandstoneBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistSandstoneBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistRedSandstoneBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistRedSandstoneBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistRedSandBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistRedSandBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistBlueIceBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistBlueIceBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistPackedIceBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistPackedIceBlackOpalOre, please check the entries!"); } }
        for (String temp : BlackOpal.temperatureBlacklistBedrockBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistBedrockBlackOpalOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : BlackOpal.temperatureBlacklistQuarkBasaltBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistQuarkBasaltBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistQuarkLimestoneBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistQuarkLimestoneBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistQuarkJasperBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistQuarkJasperBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistQuarkMarbleBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistQuarkMarbleBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistQuarkSlateBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistQuarkSlateBlackOpalOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : BlackOpal.temperatureBlacklistEmbellishcraftBasaltBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistEmbellishcraftBasaltBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistEmbellishcraftGneissBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistEmbellishcraftGneissBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistEmbellishcraftJadeBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistEmbellishcraftJadeBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistEmbellishcraftLarvikiteBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistEmbellishcraftLarvikiteBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistEmbellishcraftMarbleBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistEmbellishcraftMarbleBlackOpalOre, please check the entries!"); } }
        for (String name : BlackOpal.temperatureBlacklistEmbellishcraftSlateBlackOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistEmbellishcraftSlateBlackOpalOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : BlackOpal.temperatureBlacklistSandBlackOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/black_opal.toml in temperatureBlacklistSandBlackOpalOre, please check the entries!"); } }
    }

    private static void checkLucky(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Lucky.biomeBlacklistStoneLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistStoneLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistAndesiteLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistAndesiteLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistDioriteLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistDioriteLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistGraniteLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistGraniteLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistNetherrackLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistNetherrackLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistEndStoneLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistEndStoneLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistSandLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistSandLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistGravelLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistGravelLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistSandstoneLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistSandstoneLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistRedSandstoneLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistRedSandstoneLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistRedSandLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistRedSandLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistBlueIceLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistBlueIceLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistPackedIceLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistPackedIceLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistBedrockLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistBedrockLuckyOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Lucky.biomeBlacklistQuarkBasaltLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistQuarkBasaltLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistQuarkLimestoneLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistQuarkLimestoneLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistQuarkJasperLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistQuarkJasperLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistQuarkMarbleLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistQuarkMarbleLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistQuarkSlateLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistQuarkSlateLuckyOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Lucky.biomeBlacklistEmbellishcraftBasaltLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistEmbellishcraftBasaltLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistEmbellishcraftGneissLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistEmbellishcraftGneissLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistEmbellishcraftJadeLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistEmbellishcraftJadeLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistEmbellishcraftLarvikiteLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistEmbellishcraftLarvikiteLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistEmbellishcraftMarbleLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistEmbellishcraftMarbleLuckyOre, please check the entries!"); } }
        for (String name : Lucky.biomeBlacklistEmbellishcraftSlateLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistEmbellishcraftSlateLuckyOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Lucky.biomeBlacklistHardenedStoneLuckyOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lucky.toml in biomeBlacklistHardenedStoneLuckyOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Lucky.temperatureBlacklistStoneLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistStoneLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistAndesiteLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistAndesiteLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistDioriteLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistDioriteLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistGraniteLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistGraniteLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistNetherrackLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistNetherrackLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistEndStoneLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistEndStoneLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistSandLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistSandLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistGravelLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistGravelLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistSandstoneLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistSandstoneLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistRedSandstoneLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistRedSandstoneLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistRedSandLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistRedSandLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistBlueIceLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistBlueIceLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistPackedIceLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistPackedIceLuckyOre, please check the entries!"); } }
        for (String temp : Lucky.temperatureBlacklistBedrockLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistBedrockLuckyOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Lucky.temperatureBlacklistQuarkBasaltLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistQuarkBasaltLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistQuarkLimestoneLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistQuarkLimestoneLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistQuarkJasperLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistQuarkJasperLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistQuarkMarbleLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistQuarkMarbleLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistQuarkSlateLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistQuarkSlateLuckyOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Lucky.temperatureBlacklistEmbellishcraftBasaltLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistEmbellishcraftBasaltLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistEmbellishcraftGneissLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistEmbellishcraftGneissLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistEmbellishcraftJadeLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistEmbellishcraftJadeLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistEmbellishcraftLarvikiteLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistEmbellishcraftLarvikiteLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistEmbellishcraftMarbleLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistEmbellishcraftMarbleLuckyOre, please check the entries!"); } }
        for (String name : Lucky.temperatureBlacklistEmbellishcraftSlateLuckyOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lucky.toml in temperatureBlacklistEmbellishcraftSlateLuckyOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Lucky.temperatureBlacklistSandLuckyOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lucky.toml in temperatureBlacklistSandLuckyOre, please check the entries!"); } }
    }

    private static void checkMithril(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Mithril.biomeBlacklistStoneMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistStoneMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistAndesiteMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistAndesiteMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistDioriteMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistDioriteMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistGraniteMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistGraniteMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistNetherrackMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistNetherrackMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistEndStoneMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistEndStoneMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistSandMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistSandMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistGravelMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistGravelMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistSandstoneMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistSandstoneMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistRedSandstoneMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistRedSandstoneMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistRedSandMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistRedSandMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistBlueIceMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistBlueIceMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistPackedIceMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistPackedIceMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistBedrockMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistBedrockMithrilOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Mithril.biomeBlacklistQuarkBasaltMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistQuarkBasaltMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistQuarkLimestoneMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistQuarkLimestoneMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistQuarkJasperMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistQuarkJasperMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistQuarkMarbleMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistQuarkMarbleMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistQuarkSlateMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistQuarkSlateMithrilOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Mithril.biomeBlacklistEmbellishcraftBasaltMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistEmbellishcraftBasaltMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistEmbellishcraftGneissMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistEmbellishcraftGneissMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistEmbellishcraftJadeMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistEmbellishcraftJadeMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistEmbellishcraftLarvikiteMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistEmbellishcraftLarvikiteMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistEmbellishcraftMarbleMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistEmbellishcraftMarbleMithrilOre, please check the entries!"); } }
        for (String name : Mithril.biomeBlacklistEmbellishcraftSlateMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistEmbellishcraftSlateMithrilOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Mithril.biomeBlacklistHardenedStoneMithrilOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/mithril.toml in biomeBlacklistHardenedStoneMithrilOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Mithril.temperatureBlacklistStoneMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistStoneMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistAndesiteMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistAndesiteMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistDioriteMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistDioriteMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistGraniteMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistGraniteMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistNetherrackMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistNetherrackMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistEndStoneMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistEndStoneMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistSandMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistSandMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistGravelMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistGravelMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistSandstoneMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistSandstoneMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistRedSandstoneMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistRedSandstoneMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistRedSandMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistRedSandMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistBlueIceMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistBlueIceMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistPackedIceMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistPackedIceMithrilOre, please check the entries!"); } }
        for (String temp : Mithril.temperatureBlacklistBedrockMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistBedrockMithrilOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Mithril.temperatureBlacklistQuarkBasaltMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistQuarkBasaltMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistQuarkLimestoneMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistQuarkLimestoneMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistQuarkJasperMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistQuarkJasperMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistQuarkMarbleMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistQuarkMarbleMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistQuarkSlateMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistQuarkSlateMithrilOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Mithril.temperatureBlacklistEmbellishcraftBasaltMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistEmbellishcraftBasaltMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistEmbellishcraftGneissMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistEmbellishcraftGneissMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistEmbellishcraftJadeMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistEmbellishcraftJadeMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistEmbellishcraftLarvikiteMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistEmbellishcraftLarvikiteMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistEmbellishcraftMarbleMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistEmbellishcraftMarbleMithrilOre, please check the entries!"); } }
        for (String name : Mithril.temperatureBlacklistEmbellishcraftSlateMithrilOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/mithril.toml in temperatureBlacklistEmbellishcraftSlateMithrilOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Mithril.temperatureBlacklistSandMithrilOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/mithril.toml in temperatureBlacklistSandMithrilOre, please check the entries!"); } }
    }

    private static void checkRunite(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Runite.biomeBlacklistStoneRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistStoneRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistAndesiteRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistAndesiteRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistDioriteRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistDioriteRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistGraniteRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistGraniteRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistNetherrackRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistNetherrackRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistEndStoneRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistEndStoneRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistSandRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistSandRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistGravelRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistGravelRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistSandstoneRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistSandstoneRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistRedSandstoneRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistRedSandstoneRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistRedSandRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistRedSandRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistBlueIceRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistBlueIceRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistPackedIceRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistPackedIceRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistBedrockRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistBedrockRuniteOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Runite.biomeBlacklistQuarkBasaltRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistQuarkBasaltRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistQuarkLimestoneRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistQuarkLimestoneRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistQuarkJasperRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistQuarkJasperRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistQuarkMarbleRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistQuarkMarbleRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistQuarkSlateRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistQuarkSlateRuniteOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Runite.biomeBlacklistEmbellishcraftBasaltRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistEmbellishcraftBasaltRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistEmbellishcraftGneissRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistEmbellishcraftGneissRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistEmbellishcraftJadeRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistEmbellishcraftJadeRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistEmbellishcraftLarvikiteRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistEmbellishcraftLarvikiteRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistEmbellishcraftMarbleRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistEmbellishcraftMarbleRuniteOre, please check the entries!"); } }
        for (String name : Runite.biomeBlacklistEmbellishcraftSlateRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistEmbellishcraftSlateRuniteOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Runite.biomeBlacklistHardenedStoneRuniteOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/runite.toml in biomeBlacklistHardenedStoneRuniteOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Runite.temperatureBlacklistStoneRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistStoneRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistAndesiteRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistAndesiteRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistDioriteRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistDioriteRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistGraniteRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistGraniteRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistNetherrackRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistNetherrackRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistEndStoneRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistEndStoneRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistSandRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistSandRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistGravelRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistGravelRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistSandstoneRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistSandstoneRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistRedSandstoneRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistRedSandstoneRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistRedSandRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistRedSandRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistBlueIceRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistBlueIceRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistPackedIceRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistPackedIceRuniteOre, please check the entries!"); } }
        for (String temp : Runite.temperatureBlacklistBedrockRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistBedrockRuniteOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Runite.temperatureBlacklistQuarkBasaltRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistQuarkBasaltRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistQuarkLimestoneRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistQuarkLimestoneRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistQuarkJasperRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistQuarkJasperRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistQuarkMarbleRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistQuarkMarbleRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistQuarkSlateRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistQuarkSlateRuniteOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Runite.temperatureBlacklistEmbellishcraftBasaltRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistEmbellishcraftBasaltRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistEmbellishcraftGneissRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistEmbellishcraftGneissRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistEmbellishcraftJadeRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistEmbellishcraftJadeRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistEmbellishcraftLarvikiteRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistEmbellishcraftLarvikiteRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistEmbellishcraftMarbleRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistEmbellishcraftMarbleRuniteOre, please check the entries!"); } }
        for (String name : Runite.temperatureBlacklistEmbellishcraftSlateRuniteOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/runite.toml in temperatureBlacklistEmbellishcraftSlateRuniteOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Runite.temperatureBlacklistSandRuniteOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/runite.toml in temperatureBlacklistSandRuniteOre, please check the entries!"); } }
    }

    private static void checkWhiteOpal(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : WhiteOpal.biomeBlacklistStoneWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistStoneWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistAndesiteWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistAndesiteWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistDioriteWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistDioriteWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistGraniteWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistGraniteWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistNetherrackWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistNetherrackWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistEndStoneWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistEndStoneWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistSandWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistSandWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistGravelWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistGravelWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistSandstoneWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistSandstoneWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistRedSandstoneWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistRedSandstoneWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistRedSandWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistRedSandWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistBlueIceWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistBlueIceWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistPackedIceWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistPackedIceWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistBedrockWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistBedrockWhiteOpalOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : WhiteOpal.biomeBlacklistQuarkBasaltWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistQuarkBasaltWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistQuarkLimestoneWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistQuarkLimestoneWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistQuarkJasperWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistQuarkJasperWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistQuarkMarbleWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistQuarkMarbleWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistQuarkSlateWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistQuarkSlateWhiteOpalOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : WhiteOpal.biomeBlacklistEmbellishcraftBasaltWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistEmbellishcraftBasaltWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistEmbellishcraftGneissWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistEmbellishcraftGneissWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistEmbellishcraftJadeWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistEmbellishcraftJadeWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistEmbellishcraftLarvikiteWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistEmbellishcraftLarvikiteWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistEmbellishcraftMarbleWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistEmbellishcraftMarbleWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.biomeBlacklistEmbellishcraftSlateWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistEmbellishcraftSlateWhiteOpalOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : WhiteOpal.biomeBlacklistHardenedStoneWhiteOpalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/white_opal.toml in biomeBlacklistHardenedStoneWhiteOpalOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : WhiteOpal.temperatureBlacklistStoneWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistStoneWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistAndesiteWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistAndesiteWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistDioriteWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistDioriteWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistGraniteWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistGraniteWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistNetherrackWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistNetherrackWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistEndStoneWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistEndStoneWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistSandWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistSandWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistGravelWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistGravelWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistSandstoneWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistSandstoneWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistRedSandstoneWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistRedSandstoneWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistRedSandWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistRedSandWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistBlueIceWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistBlueIceWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistPackedIceWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistPackedIceWhiteOpalOre, please check the entries!"); } }
        for (String temp : WhiteOpal.temperatureBlacklistBedrockWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistBedrockWhiteOpalOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : WhiteOpal.temperatureBlacklistQuarkBasaltWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistQuarkBasaltWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistQuarkLimestoneWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistQuarkLimestoneWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistQuarkJasperWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistQuarkJasperWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistQuarkMarbleWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistQuarkMarbleWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistQuarkSlateWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistQuarkSlateWhiteOpalOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : WhiteOpal.temperatureBlacklistEmbellishcraftBasaltWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistEmbellishcraftBasaltWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistEmbellishcraftGneissWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistEmbellishcraftGneissWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistEmbellishcraftJadeWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistEmbellishcraftJadeWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistEmbellishcraftLarvikiteWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistEmbellishcraftLarvikiteWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistEmbellishcraftMarbleWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistEmbellishcraftMarbleWhiteOpalOre, please check the entries!"); } }
        for (String name : WhiteOpal.temperatureBlacklistEmbellishcraftSlateWhiteOpalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistEmbellishcraftSlateWhiteOpalOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : WhiteOpal.temperatureBlacklistSandWhiteOpalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/white_opal.toml in temperatureBlacklistSandWhiteOpalOre, please check the entries!"); } }
    }

    private static void checkZinc(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Zinc.biomeBlacklistStoneZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistStoneZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistAndesiteZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistAndesiteZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistDioriteZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistDioriteZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistGraniteZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistGraniteZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistNetherrackZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistNetherrackZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistEndStoneZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistEndStoneZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistSandZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistSandZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistGravelZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistGravelZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistSandstoneZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistSandstoneZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistRedSandstoneZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistRedSandstoneZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistRedSandZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistRedSandZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistBlueIceZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistBlueIceZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistPackedIceZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistPackedIceZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistBedrockZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistBedrockZincOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Zinc.biomeBlacklistQuarkBasaltZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistQuarkBasaltZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistQuarkLimestoneZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistQuarkLimestoneZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistQuarkJasperZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistQuarkJasperZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistQuarkMarbleZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistQuarkMarbleZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistQuarkSlateZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistQuarkSlateZincOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Zinc.biomeBlacklistEmbellishcraftBasaltZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistEmbellishcraftBasaltZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistEmbellishcraftGneissZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistEmbellishcraftGneissZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistEmbellishcraftJadeZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistEmbellishcraftJadeZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistEmbellishcraftLarvikiteZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistEmbellishcraftLarvikiteZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistEmbellishcraftMarbleZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistEmbellishcraftMarbleZincOre, please check the entries!"); } }
        for (String name : Zinc.biomeBlacklistEmbellishcraftSlateZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistEmbellishcraftSlateZincOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Zinc.biomeBlacklistHardenedStoneZincOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/zinc.toml in biomeBlacklistHardenedStoneZincOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Zinc.temperatureBlacklistStoneZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistStoneZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistAndesiteZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistAndesiteZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistDioriteZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistDioriteZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistGraniteZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistGraniteZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistNetherrackZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistNetherrackZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistEndStoneZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistEndStoneZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistSandZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistSandZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistGravelZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistGravelZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistSandstoneZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistSandstoneZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistRedSandstoneZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistRedSandstoneZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistRedSandZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistRedSandZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistBlueIceZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistBlueIceZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistPackedIceZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistPackedIceZincOre, please check the entries!"); } }
        for (String temp : Zinc.temperatureBlacklistBedrockZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistBedrockZincOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Zinc.temperatureBlacklistQuarkBasaltZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistQuarkBasaltZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistQuarkLimestoneZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistQuarkLimestoneZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistQuarkJasperZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistQuarkJasperZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistQuarkMarbleZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistQuarkMarbleZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistQuarkSlateZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistQuarkSlateZincOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Zinc.temperatureBlacklistEmbellishcraftBasaltZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistEmbellishcraftBasaltZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistEmbellishcraftGneissZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistEmbellishcraftGneissZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistEmbellishcraftJadeZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistEmbellishcraftJadeZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistEmbellishcraftLarvikiteZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistEmbellishcraftLarvikiteZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistEmbellishcraftMarbleZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistEmbellishcraftMarbleZincOre, please check the entries!"); } }
        for (String name : Zinc.temperatureBlacklistEmbellishcraftSlateZincOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/zinc.toml in temperatureBlacklistEmbellishcraftSlateZincOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Zinc.temperatureBlacklistSandZincOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/zinc.toml in temperatureBlacklistSandZincOre, please check the entries!"); } }
    }

    private static void checkNickel(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Nickel.biomeBlacklistStoneNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistStoneNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistAndesiteNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistAndesiteNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistDioriteNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistDioriteNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistGraniteNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistGraniteNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistNetherrackNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistNetherrackNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistEndStoneNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistEndStoneNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistSandNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistSandNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistGravelNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistGravelNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistSandstoneNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistSandstoneNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistRedSandstoneNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistRedSandstoneNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistRedSandNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistRedSandNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistBlueIceNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistBlueIceNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistPackedIceNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistPackedIceNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistBedrockNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistBedrockNickelOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Nickel.biomeBlacklistQuarkBasaltNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistQuarkBasaltNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistQuarkLimestoneNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistQuarkLimestoneNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistQuarkJasperNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistQuarkJasperNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistQuarkMarbleNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistQuarkMarbleNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistQuarkSlateNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistQuarkSlateNickelOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Nickel.biomeBlacklistEmbellishcraftBasaltNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistEmbellishcraftBasaltNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistEmbellishcraftGneissNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistEmbellishcraftGneissNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistEmbellishcraftJadeNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistEmbellishcraftJadeNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistEmbellishcraftLarvikiteNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistEmbellishcraftLarvikiteNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistEmbellishcraftMarbleNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistEmbellishcraftMarbleNickelOre, please check the entries!"); } }
        for (String name : Nickel.biomeBlacklistEmbellishcraftSlateNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistEmbellishcraftSlateNickelOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Nickel.biomeBlacklistHardenedStoneNickelOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/nickel.toml in biomeBlacklistHardenedStoneNickelOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Nickel.temperatureBlacklistStoneNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistStoneNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistAndesiteNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistAndesiteNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistDioriteNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistDioriteNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistGraniteNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistGraniteNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistNetherrackNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistNetherrackNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistEndStoneNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistEndStoneNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistSandNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistSandNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistGravelNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistGravelNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistSandstoneNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistSandstoneNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistRedSandstoneNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistRedSandstoneNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistRedSandNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistRedSandNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistBlueIceNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistBlueIceNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistPackedIceNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistPackedIceNickelOre, please check the entries!"); } }
        for (String temp : Nickel.temperatureBlacklistBedrockNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistBedrockNickelOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Nickel.temperatureBlacklistQuarkBasaltNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistQuarkBasaltNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistQuarkLimestoneNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistQuarkLimestoneNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistQuarkJasperNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistQuarkJasperNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistQuarkMarbleNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistQuarkMarbleNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistQuarkSlateNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistQuarkSlateNickelOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Nickel.temperatureBlacklistEmbellishcraftBasaltNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistEmbellishcraftBasaltNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistEmbellishcraftGneissNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistEmbellishcraftGneissNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistEmbellishcraftJadeNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistEmbellishcraftJadeNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistEmbellishcraftLarvikiteNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistEmbellishcraftLarvikiteNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistEmbellishcraftMarbleNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistEmbellishcraftMarbleNickelOre, please check the entries!"); } }
        for (String name : Nickel.temperatureBlacklistEmbellishcraftSlateNickelOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/nickel.toml in temperatureBlacklistEmbellishcraftSlateNickelOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Nickel.temperatureBlacklistSandNickelOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/nickel.toml in temperatureBlacklistSandNickelOre, please check the entries!"); } }
    }

    private static void checkOsmium(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Osmium.biomeBlacklistStoneOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistStoneOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistAndesiteOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistAndesiteOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistDioriteOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistDioriteOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistGraniteOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistGraniteOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistNetherrackOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistNetherrackOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistEndStoneOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistEndStoneOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistSandOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistSandOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistGravelOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistGravelOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistSandstoneOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistSandstoneOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistRedSandstoneOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistRedSandstoneOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistRedSandOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistRedSandOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistBlueIceOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistBlueIceOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistPackedIceOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistPackedIceOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistBedrockOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistBedrockOsmiumOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Osmium.biomeBlacklistQuarkBasaltOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistQuarkBasaltOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistQuarkLimestoneOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistQuarkLimestoneOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistQuarkJasperOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistQuarkJasperOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistQuarkMarbleOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistQuarkMarbleOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistQuarkSlateOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistQuarkSlateOsmiumOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Osmium.biomeBlacklistEmbellishcraftBasaltOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistEmbellishcraftBasaltOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistEmbellishcraftGneissOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistEmbellishcraftGneissOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistEmbellishcraftJadeOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistEmbellishcraftJadeOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistEmbellishcraftLarvikiteOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistEmbellishcraftLarvikiteOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistEmbellishcraftMarbleOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistEmbellishcraftMarbleOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.biomeBlacklistEmbellishcraftSlateOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistEmbellishcraftSlateOsmiumOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Osmium.biomeBlacklistHardenedStoneOsmiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/osmium.toml in biomeBlacklistHardenedStoneOsmiumOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Osmium.temperatureBlacklistStoneOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistStoneOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistAndesiteOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistAndesiteOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistDioriteOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistDioriteOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistGraniteOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistGraniteOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistNetherrackOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistNetherrackOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistEndStoneOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistEndStoneOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistSandOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistSandOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistGravelOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistGravelOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistSandstoneOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistSandstoneOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistRedSandstoneOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistRedSandstoneOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistRedSandOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistRedSandOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistBlueIceOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistBlueIceOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistPackedIceOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistPackedIceOsmiumOre, please check the entries!"); } }
        for (String temp : Osmium.temperatureBlacklistBedrockOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistBedrockOsmiumOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Osmium.temperatureBlacklistQuarkBasaltOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistQuarkBasaltOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistQuarkLimestoneOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistQuarkLimestoneOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistQuarkJasperOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistQuarkJasperOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistQuarkMarbleOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistQuarkMarbleOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistQuarkSlateOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistQuarkSlateOsmiumOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Osmium.temperatureBlacklistEmbellishcraftBasaltOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistEmbellishcraftBasaltOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistEmbellishcraftGneissOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistEmbellishcraftGneissOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistEmbellishcraftJadeOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistEmbellishcraftJadeOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistEmbellishcraftLarvikiteOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistEmbellishcraftLarvikiteOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistEmbellishcraftMarbleOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistEmbellishcraftMarbleOsmiumOre, please check the entries!"); } }
        for (String name : Osmium.temperatureBlacklistEmbellishcraftSlateOsmiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/osmium.toml in temperatureBlacklistEmbellishcraftSlateOsmiumOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Osmium.temperatureBlacklistSandOsmiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/osmium.toml in temperatureBlacklistSandOsmiumOre, please check the entries!"); } }
    }

    private static void checkAluminum(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Aluminum.biomeBlacklistStoneAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistStoneAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistAndesiteAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistAndesiteAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistDioriteAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistDioriteAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistGraniteAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistGraniteAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistNetherrackAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistNetherrackAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistEndStoneAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistEndStoneAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistSandAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistSandAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistGravelAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistGravelAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistSandstoneAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistSandstoneAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistRedSandstoneAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistRedSandstoneAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistRedSandAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistRedSandAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistBlueIceAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistBlueIceAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistPackedIceAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistPackedIceAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistBedrockAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistBedrockAluminumOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Aluminum.biomeBlacklistQuarkBasaltAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistQuarkBasaltAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistQuarkLimestoneAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistQuarkLimestoneAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistQuarkJasperAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistQuarkJasperAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistQuarkMarbleAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistQuarkMarbleAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistQuarkSlateAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistQuarkSlateAluminumOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Aluminum.biomeBlacklistEmbellishcraftBasaltAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistEmbellishcraftBasaltAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistEmbellishcraftGneissAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistEmbellishcraftGneissAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistEmbellishcraftJadeAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistEmbellishcraftJadeAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistEmbellishcraftLarvikiteAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistEmbellishcraftLarvikiteAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistEmbellishcraftMarbleAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistEmbellishcraftMarbleAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.biomeBlacklistEmbellishcraftSlateAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistEmbellishcraftSlateAluminumOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Aluminum.biomeBlacklistHardenedStoneAluminumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/aluminum.toml in biomeBlacklistHardenedStoneAluminumOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Aluminum.temperatureBlacklistStoneAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistStoneAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistAndesiteAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistAndesiteAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistDioriteAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistDioriteAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistGraniteAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistGraniteAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistNetherrackAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistNetherrackAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistEndStoneAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistEndStoneAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistSandAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistSandAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistGravelAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistGravelAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistSandstoneAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistSandstoneAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistRedSandstoneAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistRedSandstoneAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistRedSandAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistRedSandAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistBlueIceAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistBlueIceAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistPackedIceAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistPackedIceAluminumOre, please check the entries!"); } }
        for (String temp : Aluminum.temperatureBlacklistBedrockAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistBedrockAluminumOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Aluminum.temperatureBlacklistQuarkBasaltAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistQuarkBasaltAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistQuarkLimestoneAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistQuarkLimestoneAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistQuarkJasperAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistQuarkJasperAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistQuarkMarbleAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistQuarkMarbleAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistQuarkSlateAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistQuarkSlateAluminumOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Aluminum.temperatureBlacklistEmbellishcraftBasaltAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistEmbellishcraftBasaltAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistEmbellishcraftGneissAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistEmbellishcraftGneissAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistEmbellishcraftJadeAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistEmbellishcraftJadeAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistEmbellishcraftLarvikiteAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistEmbellishcraftLarvikiteAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistEmbellishcraftMarbleAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistEmbellishcraftMarbleAluminumOre, please check the entries!"); } }
        for (String name : Aluminum.temperatureBlacklistEmbellishcraftSlateAluminumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistEmbellishcraftSlateAluminumOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Aluminum.temperatureBlacklistSandAluminumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/aluminum.toml in temperatureBlacklistSandAluminumOre, please check the entries!"); } }
    }

    private static void checkIridium(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Iridium.biomeBlacklistStoneIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistStoneIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistAndesiteIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistAndesiteIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistDioriteIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistDioriteIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistGraniteIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistGraniteIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistNetherrackIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistNetherrackIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistEndStoneIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistEndStoneIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistSandIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistSandIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistGravelIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistGravelIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistSandstoneIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistSandstoneIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistRedSandstoneIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistRedSandstoneIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistRedSandIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistRedSandIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistBlueIceIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistBlueIceIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistPackedIceIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistPackedIceIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistBedrockIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistBedrockIridiumOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Iridium.biomeBlacklistQuarkBasaltIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistQuarkBasaltIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistQuarkLimestoneIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistQuarkLimestoneIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistQuarkJasperIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistQuarkJasperIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistQuarkMarbleIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistQuarkMarbleIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistQuarkSlateIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistQuarkSlateIridiumOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Iridium.biomeBlacklistEmbellishcraftBasaltIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistEmbellishcraftBasaltIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistEmbellishcraftGneissIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistEmbellishcraftGneissIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistEmbellishcraftJadeIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistEmbellishcraftJadeIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistEmbellishcraftLarvikiteIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistEmbellishcraftLarvikiteIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistEmbellishcraftMarbleIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistEmbellishcraftMarbleIridiumOre, please check the entries!"); } }
        for (String name : Iridium.biomeBlacklistEmbellishcraftSlateIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistEmbellishcraftSlateIridiumOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Iridium.biomeBlacklistHardenedStoneIridiumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iridium.toml in biomeBlacklistHardenedStoneIridiumOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Iridium.temperatureBlacklistStoneIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistStoneIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistAndesiteIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistAndesiteIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistDioriteIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistDioriteIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistGraniteIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistGraniteIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistNetherrackIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistNetherrackIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistEndStoneIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistEndStoneIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistSandIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistSandIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistGravelIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistGravelIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistSandstoneIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistSandstoneIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistRedSandstoneIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistRedSandstoneIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistRedSandIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistRedSandIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistBlueIceIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistBlueIceIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistPackedIceIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistPackedIceIridiumOre, please check the entries!"); } }
        for (String temp : Iridium.temperatureBlacklistBedrockIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistBedrockIridiumOre, please check the entries!"); } }
        // Quark Temperature Blacklist
        for (String name : Iridium.temperatureBlacklistQuarkBasaltIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistQuarkBasaltIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistQuarkLimestoneIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistQuarkLimestoneIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistQuarkJasperIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistQuarkJasperIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistQuarkMarbleIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistQuarkMarbleIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistQuarkSlateIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistQuarkSlateIridiumOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Iridium.temperatureBlacklistEmbellishcraftBasaltIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistEmbellishcraftBasaltIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistEmbellishcraftGneissIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistEmbellishcraftGneissIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistEmbellishcraftJadeIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistEmbellishcraftJadeIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistEmbellishcraftLarvikiteIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistEmbellishcraftLarvikiteIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistEmbellishcraftMarbleIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistEmbellishcraftMarbleIridiumOre, please check the entries!"); } }
        for (String name : Iridium.temperatureBlacklistEmbellishcraftSlateIridiumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iridium.toml in temperatureBlacklistEmbellishcraftSlateIridiumOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Iridium.temperatureBlacklistSandIridiumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iridium.toml in temperatureBlacklistSandIridiumOre, please check the entries!"); } }
    }

    private static void checkLead(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Lead.biomeBlacklistStoneLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistStoneLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistAndesiteLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistAndesiteLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistDioriteLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistDioriteLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistGraniteLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistGraniteLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistNetherrackLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistNetherrackLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistEndStoneLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistEndStoneLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistSandLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistSandLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistGravelLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistGravelLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistSandstoneLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistSandstoneLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistRedSandstoneLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistRedSandstoneLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistRedSandLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistRedSandLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistBlueIceLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistBlueIceLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistPackedIceLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistPackedIceLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistBedrockLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistBedrockLeadOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Lead.biomeBlacklistQuarkBasaltLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistQuarkBasaltLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistQuarkLimestoneLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistQuarkLimestoneLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistQuarkJasperLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistQuarkJasperLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistQuarkMarbleLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistQuarkMarbleLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistQuarkSlateLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistQuarkSlateLeadOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Lead.biomeBlacklistEmbellishcraftBasaltLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistEmbellishcraftBasaltLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistEmbellishcraftGneissLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistEmbellishcraftGneissLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistEmbellishcraftJadeLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistEmbellishcraftJadeLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistEmbellishcraftLarvikiteLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistEmbellishcraftLarvikiteLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistEmbellishcraftMarbleLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistEmbellishcraftMarbleLeadOre, please check the entries!"); } }
        for (String name : Lead.biomeBlacklistEmbellishcraftSlateLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistEmbellishcraftSlateLeadOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Lead.biomeBlacklistHardenedStoneLeadOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lead.toml in biomeBlacklistHardenedStoneLeadOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Lead.temperatureBlacklistStoneLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistStoneLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistAndesiteLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistAndesiteLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistDioriteLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistDioriteLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistGraniteLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistGraniteLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistNetherrackLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistNetherrackLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistEndStoneLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistEndStoneLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistSandLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistSandLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistGravelLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistGravelLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistSandstoneLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistSandstoneLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistRedSandstoneLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistRedSandstoneLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistRedSandLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistRedSandLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistBlueIceLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistBlueIceLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistPackedIceLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistPackedIceLeadOre, please check the entries!"); } }
        for (String temp : Lead.temperatureBlacklistBedrockLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistBedrockLeadOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Lead.temperatureBlacklistQuarkBasaltLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistQuarkBasaltLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistQuarkLimestoneLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistQuarkLimestoneLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistQuarkJasperLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistQuarkJasperLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistQuarkMarbleLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistQuarkMarbleLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistQuarkSlateLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistQuarkSlateLeadOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Lead.temperatureBlacklistEmbellishcraftBasaltLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistEmbellishcraftBasaltLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistEmbellishcraftGneissLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistEmbellishcraftGneissLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistEmbellishcraftJadeLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistEmbellishcraftJadeLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistEmbellishcraftLarvikiteLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistEmbellishcraftLarvikiteLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistEmbellishcraftMarbleLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistEmbellishcraftMarbleLeadOre, please check the entries!"); } }
        for (String name : Lead.temperatureBlacklistEmbellishcraftSlateLeadOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lead.toml in temperatureBlacklistEmbellishcraftSlateLeadOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Lead.temperatureBlacklistSandLeadOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lead.toml in temperatureBlacklistSandLeadOre, please check the entries!"); } }
    }

    private static void checkPlatinum(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Platinum.biomeBlacklistStonePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistStonePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistAndesitePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistAndesitePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistDioritePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistDioritePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistGranitePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistGranitePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistNetherrackPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistNetherrackPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistEndStonePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistEndStonePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistSandPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistSandPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistGravelPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistGravelPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistSandstonePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistSandstonePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistRedSandstonePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistRedSandstonePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistRedSandPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistRedSandPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistBlueIcePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistBlueIcePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistPackedIcePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistPackedIcePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistBedrockPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistBedrockPlatinumOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Platinum.biomeBlacklistQuarkBasaltPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistQuarkBasaltPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistQuarkLimestonePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistQuarkLimestonePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistQuarkJasperPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistQuarkJasperPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistQuarkMarblePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistQuarkMarblePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistQuarkSlatePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistQuarkSlatePlatinumOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Platinum.biomeBlacklistEmbellishcraftBasaltPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistEmbellishcraftBasaltPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistEmbellishcraftGneissPlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistEmbellishcraftGneissPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistEmbellishcraftJadePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistEmbellishcraftJadePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistEmbellishcraftLarvikitePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistEmbellishcraftLarvikitePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistEmbellishcraftMarblePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistEmbellishcraftMarblePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.biomeBlacklistEmbellishcraftSlatePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistEmbellishcraftSlatePlatinumOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Platinum.biomeBlacklistHardenedStonePlatinumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/platinum.toml in biomeBlacklistHardenedStonePlatinumOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Platinum.temperatureBlacklistStonePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistStonePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistAndesitePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistAndesitePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistDioritePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistDioritePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistGranitePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistGranitePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistNetherrackPlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistNetherrackPlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistEndStonePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistEndStonePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistSandPlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistSandPlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistGravelPlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistGravelPlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistSandstonePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistSandstonePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistRedSandstonePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistRedSandstonePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistRedSandPlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistRedSandPlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistBlueIcePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistBlueIcePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistPackedIcePlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistPackedIcePlatinumOre, please check the entries!"); } }
        for (String temp : Platinum.temperatureBlacklistBedrockPlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistBedrockPlatinumOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Platinum.temperatureBlacklistQuarkBasaltPlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistQuarkBasaltPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistQuarkLimestonePlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistQuarkLimestonePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistQuarkJasperPlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistQuarkJasperPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistQuarkMarblePlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistQuarkMarblePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistQuarkSlatePlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistQuarkSlatePlatinumOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Platinum.temperatureBlacklistEmbellishcraftBasaltPlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistEmbellishcraftBasaltPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistEmbellishcraftGneissPlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistEmbellishcraftGneissPlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistEmbellishcraftJadePlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistEmbellishcraftJadePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistEmbellishcraftLarvikitePlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistEmbellishcraftLarvikitePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistEmbellishcraftMarblePlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistEmbellishcraftMarblePlatinumOre, please check the entries!"); } }
        for (String name : Platinum.temperatureBlacklistEmbellishcraftSlatePlatinumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/platinum.toml in temperatureBlacklistEmbellishcraftSlatePlatinumOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Platinum.temperatureBlacklistSandPlatinumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/platinum.toml in temperatureBlacklistSandPlatinumOre, please check the entries!"); } }
    }

    private static void checkSilver(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Silver.biomeBlacklistStoneSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistStoneSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistAndesiteSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistAndesiteSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistDioriteSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistDioriteSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistGraniteSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistGraniteSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistNetherrackSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistNetherrackSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistEndStoneSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistEndStoneSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistSandSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistSandSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistGravelSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistGravelSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistSandstoneSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistSandstoneSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistRedSandstoneSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistRedSandstoneSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistRedSandSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistRedSandSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistBlueIceSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistBlueIceSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistPackedIceSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistPackedIceSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistBedrockSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistBedrockSilverOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Silver.biomeBlacklistQuarkBasaltSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistQuarkBasaltSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistQuarkLimestoneSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistQuarkLimestoneSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistQuarkJasperSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistQuarkJasperSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistQuarkMarbleSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistQuarkMarbleSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistQuarkSlateSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistQuarkSlateSilverOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Silver.biomeBlacklistEmbellishcraftBasaltSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistEmbellishcraftBasaltSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistEmbellishcraftGneissSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistEmbellishcraftGneissSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistEmbellishcraftJadeSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistEmbellishcraftJadeSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistEmbellishcraftLarvikiteSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistEmbellishcraftLarvikiteSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistEmbellishcraftMarbleSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistEmbellishcraftMarbleSilverOre, please check the entries!"); } }
        for (String name : Silver.biomeBlacklistEmbellishcraftSlateSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistEmbellishcraftSlateSilverOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Silver.biomeBlacklistHardenedStoneSilverOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/silver.toml in biomeBlacklistHardenedStoneSilverOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Silver.temperatureBlacklistStoneSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistStoneSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistAndesiteSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistAndesiteSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistDioriteSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistDioriteSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistGraniteSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistGraniteSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistNetherrackSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistNetherrackSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistEndStoneSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistEndStoneSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistSandSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistSandSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistGravelSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistGravelSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistSandstoneSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistSandstoneSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistRedSandstoneSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistRedSandstoneSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistRedSandSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistRedSandSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistBlueIceSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistBlueIceSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistPackedIceSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistPackedIceSilverOre, please check the entries!"); } }
        for (String temp : Silver.temperatureBlacklistBedrockSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistBedrockSilverOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Silver.temperatureBlacklistQuarkBasaltSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistQuarkBasaltSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistQuarkLimestoneSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistQuarkLimestoneSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistQuarkJasperSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistQuarkJasperSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistQuarkMarbleSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistQuarkMarbleSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistQuarkSlateSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistQuarkSlateSilverOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Silver.temperatureBlacklistEmbellishcraftBasaltSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistEmbellishcraftBasaltSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistEmbellishcraftGneissSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistEmbellishcraftGneissSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistEmbellishcraftJadeSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistEmbellishcraftJadeSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistEmbellishcraftLarvikiteSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistEmbellishcraftLarvikiteSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistEmbellishcraftMarbleSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistEmbellishcraftMarbleSilverOre, please check the entries!"); } }
        for (String name : Silver.temperatureBlacklistEmbellishcraftSlateSilverOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/silver.toml in temperatureBlacklistEmbellishcraftSlateSilverOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Silver.temperatureBlacklistSandSilverOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/silver.toml in temperatureBlacklistSandSilverOre, please check the entries!"); } }
    }

    private static void checkTin(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Tin.biomeBlacklistStoneTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistStoneTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistAndesiteTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistAndesiteTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistDioriteTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistDioriteTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistGraniteTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistGraniteTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistNetherrackTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistNetherrackTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistEndStoneTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistEndStoneTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistSandTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistSandTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistGravelTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistGravelTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistSandstoneTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistSandstoneTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistRedSandstoneTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistRedSandstoneTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistRedSandTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistRedSandTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistBlueIceTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistBlueIceTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistPackedIceTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistPackedIceTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistBedrockTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistBedrockTinOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Tin.biomeBlacklistQuarkBasaltTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistQuarkBasaltTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistQuarkLimestoneTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistQuarkLimestoneTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistQuarkJasperTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistQuarkJasperTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistQuarkMarbleTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistQuarkMarbleTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistQuarkSlateTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistQuarkSlateTinOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Tin.biomeBlacklistEmbellishcraftBasaltTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistEmbellishcraftBasaltTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistEmbellishcraftGneissTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistEmbellishcraftGneissTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistEmbellishcraftJadeTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistEmbellishcraftJadeTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistEmbellishcraftLarvikiteTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistEmbellishcraftLarvikiteTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistEmbellishcraftMarbleTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistEmbellishcraftMarbleTinOre, please check the entries!"); } }
        for (String name : Tin.biomeBlacklistEmbellishcraftSlateTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistEmbellishcraftSlateTinOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Tin.biomeBlacklistHardenedStoneTinOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/tin.toml in biomeBlacklistHardenedStoneTinOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Tin.temperatureBlacklistStoneTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistStoneTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistAndesiteTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistAndesiteTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistDioriteTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistDioriteTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistGraniteTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistGraniteTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistNetherrackTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistNetherrackTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistEndStoneTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistEndStoneTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistSandTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistSandTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistGravelTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistGravelTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistSandstoneTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistSandstoneTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistRedSandstoneTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistRedSandstoneTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistRedSandTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistRedSandTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistBlueIceTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistBlueIceTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistPackedIceTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistPackedIceTinOre, please check the entries!"); } }
        for (String temp : Tin.temperatureBlacklistBedrockTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistBedrockTinOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Tin.temperatureBlacklistQuarkBasaltTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistQuarkBasaltTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistQuarkLimestoneTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistQuarkLimestoneTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistQuarkJasperTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistQuarkJasperTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistQuarkMarbleTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistQuarkMarbleTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistQuarkSlateTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistQuarkSlateTinOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Tin.temperatureBlacklistEmbellishcraftBasaltTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistEmbellishcraftBasaltTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistEmbellishcraftGneissTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistEmbellishcraftGneissTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistEmbellishcraftJadeTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistEmbellishcraftJadeTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistEmbellishcraftLarvikiteTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistEmbellishcraftLarvikiteTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistEmbellishcraftMarbleTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistEmbellishcraftMarbleTinOre, please check the entries!"); } }
        for (String name : Tin.temperatureBlacklistEmbellishcraftSlateTinOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/tin.toml in temperatureBlacklistEmbellishcraftSlateTinOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Tin.temperatureBlacklistSandTinOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/tin.toml in temperatureBlacklistSandTinOre, please check the entries!"); } }
    }

    private static void checkUranium(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Uranium.biomeBlacklistStoneUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistStoneUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistAndesiteUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistAndesiteUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistDioriteUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistDioriteUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistGraniteUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistGraniteUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistNetherrackUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistNetherrackUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistEndStoneUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistEndStoneUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistSandUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistSandUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistGravelUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistGravelUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistSandstoneUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistSandstoneUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistRedSandstoneUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistRedSandstoneUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistRedSandUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistRedSandUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistBlueIceUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistBlueIceUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistPackedIceUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistPackedIceUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistBedrockUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistBedrockUraniumOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Uranium.biomeBlacklistQuarkBasaltUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistQuarkBasaltUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistQuarkLimestoneUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistQuarkLimestoneUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistQuarkJasperUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistQuarkJasperUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistQuarkMarbleUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistQuarkMarbleUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistQuarkSlateUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistQuarkSlateUraniumOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Uranium.biomeBlacklistEmbellishcraftBasaltUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistEmbellishcraftBasaltUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistEmbellishcraftGneissUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistEmbellishcraftGneissUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistEmbellishcraftJadeUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistEmbellishcraftJadeUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistEmbellishcraftLarvikiteUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistEmbellishcraftLarvikiteUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistEmbellishcraftMarbleUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistEmbellishcraftMarbleUraniumOre, please check the entries!"); } }
        for (String name : Uranium.biomeBlacklistEmbellishcraftSlateUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistEmbellishcraftSlateUraniumOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Uranium.biomeBlacklistHardenedStoneUraniumOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/uranium.toml in biomeBlacklistHardenedStoneUraniumOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Uranium.temperatureBlacklistStoneUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistStoneUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistAndesiteUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistAndesiteUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistDioriteUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistDioriteUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistGraniteUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistGraniteUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistNetherrackUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistNetherrackUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistEndStoneUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistEndStoneUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistSandUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistSandUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistGravelUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistGravelUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistSandstoneUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistSandstoneUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistRedSandstoneUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistRedSandstoneUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistRedSandUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistRedSandUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistBlueIceUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistBlueIceUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistPackedIceUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistPackedIceUraniumOre, please check the entries!"); } }
        for (String temp : Uranium.temperatureBlacklistBedrockUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistBedrockUraniumOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Uranium.temperatureBlacklistQuarkBasaltUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistQuarkBasaltUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistQuarkLimestoneUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistQuarkLimestoneUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistQuarkJasperUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistQuarkJasperUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistQuarkMarbleUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistQuarkMarbleUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistQuarkSlateUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistQuarkSlateUraniumOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Uranium.temperatureBlacklistEmbellishcraftBasaltUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistEmbellishcraftBasaltUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistEmbellishcraftGneissUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistEmbellishcraftGneissUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistEmbellishcraftJadeUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistEmbellishcraftJadeUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistEmbellishcraftLarvikiteUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistEmbellishcraftLarvikiteUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistEmbellishcraftMarbleUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistEmbellishcraftMarbleUraniumOre, please check the entries!"); } }
        for (String name : Uranium.temperatureBlacklistEmbellishcraftSlateUraniumOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/uranium.toml in temperatureBlacklistEmbellishcraftSlateUraniumOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Uranium.temperatureBlacklistSandUraniumOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/uranium.toml in temperatureBlacklistSandUraniumOre, please check the entries!"); } }
    }

    private static void checkIron(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Iron.biomeBlacklistVanillaIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistStoneIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistAndesiteIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistAndesiteIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistDioriteIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistDioriteIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistGraniteIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistGraniteIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistNetherrackIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistNetherrackIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistEndStoneIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistEndStoneIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistSandIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistSandIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistGravelIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistGravelIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistSandstoneIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistSandstoneIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistRedSandstoneIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistRedSandstoneIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistRedSandIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistRedSandIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistBlueIceIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistBlueIceIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistPackedIceIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistPackedIceIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistBedrockIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistBedrockIronOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Iron.biomeBlacklistQuarkBasaltIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistQuarkBasaltIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistQuarkLimestoneIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistQuarkLimestoneIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistQuarkJasperIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistQuarkJasperIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistQuarkMarbleIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistQuarkMarbleIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistQuarkSlateIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistQuarkSlateIronOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Iron.biomeBlacklistEmbellishcraftBasaltIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistEmbellishcraftBasaltIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistEmbellishcraftGneissIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistEmbellishcraftGneissIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistEmbellishcraftJadeIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistEmbellishcraftJadeIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistEmbellishcraftLarvikiteIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistEmbellishcraftLarvikiteIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistEmbellishcraftMarbleIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistEmbellishcraftMarbleIronOre, please check the entries!"); } }
        for (String name : Iron.biomeBlacklistEmbellishcraftSlateIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistEmbellishcraftSlateIronOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Iron.biomeBlacklistHardenedStoneIronOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/iron.toml in biomeBlacklistHardenedStoneIronOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Iron.temperatureBlacklistVanillaIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistStoneIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistAndesiteIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistAndesiteIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistDioriteIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistDioriteIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistGraniteIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistGraniteIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistNetherrackIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistNetherrackIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistEndStoneIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistEndStoneIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistSandIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistSandIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistGravelIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistGravelIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistSandstoneIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistSandstoneIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistRedSandstoneIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistRedSandstoneIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistRedSandIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistRedSandIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistBlueIceIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistBlueIceIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistPackedIceIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistPackedIceIronOre, please check the entries!"); } }
        for (String temp : Iron.temperatureBlacklistBedrockIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistBedrockIronOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Iron.temperatureBlacklistQuarkBasaltIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistQuarkBasaltIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistQuarkLimestoneIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistQuarkLimestoneIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistQuarkJasperIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistQuarkJasperIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistQuarkMarbleIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistQuarkMarbleIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistQuarkSlateIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistQuarkSlateIronOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Iron.temperatureBlacklistEmbellishcraftBasaltIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistEmbellishcraftBasaltIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistEmbellishcraftGneissIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistEmbellishcraftGneissIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistEmbellishcraftJadeIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistEmbellishcraftJadeIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistEmbellishcraftLarvikiteIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistEmbellishcraftLarvikiteIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistEmbellishcraftMarbleIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistEmbellishcraftMarbleIronOre, please check the entries!"); } }
        for (String name : Iron.temperatureBlacklistEmbellishcraftSlateIronOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/iron.toml in temperatureBlacklistEmbellishcraftSlateIronOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Iron.temperatureBlacklistSandIronOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/iron.toml in temperatureBlacklistSandIronOre, please check the entries!"); } }
    }

    private static void checkDiamond(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Diamond.biomeBlacklistVanillaDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistStoneDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistAndesiteDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistAndesiteDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistDioriteDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistDioriteDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistGraniteDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistGraniteDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistNetherrackDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistNetherrackDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistEndStoneDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistEndStoneDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistSandDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistSandDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistGravelDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistGravelDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistSandstoneDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistSandstoneDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistRedSandstoneDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistRedSandstoneDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistRedSandDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistRedSandDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistBlueIceDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistBlueIceDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistPackedIceDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistPackedIceDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistBedrockDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistBedrockDiamondOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Diamond.biomeBlacklistQuarkBasaltDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistQuarkBasaltDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistQuarkLimestoneDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistQuarkLimestoneDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistQuarkJasperDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistQuarkJasperDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistQuarkMarbleDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistQuarkMarbleDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistQuarkSlateDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistQuarkSlateDiamondOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Diamond.biomeBlacklistEmbellishcraftBasaltDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistEmbellishcraftBasaltDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistEmbellishcraftGneissDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistEmbellishcraftGneissDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistEmbellishcraftJadeDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistEmbellishcraftJadeDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistEmbellishcraftLarvikiteDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistEmbellishcraftLarvikiteDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistEmbellishcraftMarbleDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistEmbellishcraftMarbleDiamondOre, please check the entries!"); } }
        for (String name : Diamond.biomeBlacklistEmbellishcraftSlateDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistEmbellishcraftSlateDiamondOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Diamond.biomeBlacklistHardenedStoneDiamondOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/diamond.toml in biomeBlacklistHardenedStoneDiamondOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Diamond.temperatureBlacklistVanillaDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistStoneDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistAndesiteDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistAndesiteDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistDioriteDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistDioriteDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistGraniteDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistGraniteDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistNetherrackDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistNetherrackDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistEndStoneDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistEndStoneDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistSandDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistSandDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistGravelDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistGravelDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistSandstoneDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistSandstoneDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistRedSandstoneDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistRedSandstoneDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistRedSandDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistRedSandDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistBlueIceDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistBlueIceDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistPackedIceDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistPackedIceDiamondOre, please check the entries!"); } }
        for (String temp : Diamond.temperatureBlacklistBedrockDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistBedrockDiamondOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Diamond.temperatureBlacklistQuarkBasaltDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistQuarkBasaltDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistQuarkLimestoneDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistQuarkLimestoneDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistQuarkJasperDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistQuarkJasperDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistQuarkMarbleDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistQuarkMarbleDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistQuarkSlateDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistQuarkSlateDiamondOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Diamond.temperatureBlacklistEmbellishcraftBasaltDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistEmbellishcraftBasaltDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistEmbellishcraftGneissDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistEmbellishcraftGneissDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistEmbellishcraftJadeDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistEmbellishcraftJadeDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistEmbellishcraftLarvikiteDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistEmbellishcraftLarvikiteDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistEmbellishcraftMarbleDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistEmbellishcraftMarbleDiamondOre, please check the entries!"); } }
        for (String name : Diamond.temperatureBlacklistEmbellishcraftSlateDiamondOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/diamond.toml in temperatureBlacklistEmbellishcraftSlateDiamondOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Diamond.temperatureBlacklistSandDiamondOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/diamond.toml in temperatureBlacklistSandDiamondOre, please check the entries!"); } }
    }

    private static void checkCoal(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Coal.biomeBlacklistVanillaCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistStoneCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistAndesiteCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistAndesiteCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistDioriteCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistDioriteCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistGraniteCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistGraniteCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistNetherrackCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistNetherrackCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistEndStoneCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistEndStoneCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistSandCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistSandCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistGravelCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistGravelCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistSandstoneCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistSandstoneCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistRedSandstoneCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistRedSandstoneCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistRedSandCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistRedSandCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistBlueIceCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistBlueIceCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistPackedIceCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistPackedIceCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistBedrockCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistBedrockCoalOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Coal.biomeBlacklistQuarkBasaltCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistQuarkBasaltCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistQuarkLimestoneCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistQuarkLimestoneCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistQuarkJasperCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistQuarkJasperCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistQuarkMarbleCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistQuarkMarbleCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistQuarkSlateCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistQuarkSlateCoalOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Coal.biomeBlacklistEmbellishcraftBasaltCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistEmbellishcraftBasaltCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistEmbellishcraftGneissCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistEmbellishcraftGneissCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistEmbellishcraftJadeCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistEmbellishcraftJadeCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistEmbellishcraftLarvikiteCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistEmbellishcraftLarvikiteCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistEmbellishcraftMarbleCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistEmbellishcraftMarbleCoalOre, please check the entries!"); } }
        for (String name : Coal.biomeBlacklistEmbellishcraftSlateCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistEmbellishcraftSlateCoalOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Coal.biomeBlacklistHardenedStoneCoalOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/coal.toml in biomeBlacklistHardenedStoneCoalOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Coal.temperatureBlacklistVanillaCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistStoneCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistAndesiteCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistAndesiteCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistDioriteCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistDioriteCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistGraniteCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistGraniteCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistNetherrackCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistNetherrackCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistEndStoneCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistEndStoneCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistSandCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistSandCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistGravelCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistGravelCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistSandstoneCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistSandstoneCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistRedSandstoneCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistRedSandstoneCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistRedSandCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistRedSandCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistBlueIceCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistBlueIceCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistPackedIceCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistPackedIceCoalOre, please check the entries!"); } }
        for (String temp : Coal.temperatureBlacklistBedrockCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistBedrockCoalOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Coal.temperatureBlacklistQuarkBasaltCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistQuarkBasaltCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistQuarkLimestoneCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistQuarkLimestoneCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistQuarkJasperCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistQuarkJasperCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistQuarkMarbleCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistQuarkMarbleCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistQuarkSlateCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistQuarkSlateCoalOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Coal.temperatureBlacklistEmbellishcraftBasaltCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistEmbellishcraftBasaltCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistEmbellishcraftGneissCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistEmbellishcraftGneissCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistEmbellishcraftJadeCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistEmbellishcraftJadeCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistEmbellishcraftLarvikiteCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistEmbellishcraftLarvikiteCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistEmbellishcraftMarbleCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistEmbellishcraftMarbleCoalOre, please check the entries!"); } }
        for (String name : Coal.temperatureBlacklistEmbellishcraftSlateCoalOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/coal.toml in temperatureBlacklistEmbellishcraftSlateCoalOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Coal.temperatureBlacklistSandCoalOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/coal.toml in temperatureBlacklistSandCoalOre, please check the entries!"); } }
    }

    private static void checkEmerald(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Emerald.biomeBlacklistVanillaEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistStoneEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistAndesiteEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistAndesiteEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistDioriteEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistDioriteEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistGraniteEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistGraniteEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistNetherrackEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistNetherrackEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistEndStoneEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistEndStoneEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistSandEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistSandEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistGravelEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistGravelEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistSandstoneEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistSandstoneEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistRedSandstoneEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistRedSandstoneEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistRedSandEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistRedSandEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistBlueIceEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistBlueIceEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistPackedIceEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistPackedIceEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistBedrockEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistBedrockEmeraldOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Emerald.biomeBlacklistQuarkBasaltEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistQuarkBasaltEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistQuarkLimestoneEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistQuarkLimestoneEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistQuarkJasperEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistQuarkJasperEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistQuarkMarbleEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistQuarkMarbleEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistQuarkSlateEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistQuarkSlateEmeraldOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Emerald.biomeBlacklistEmbellishcraftBasaltEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistEmbellishcraftBasaltEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistEmbellishcraftGneissEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistEmbellishcraftGneissEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistEmbellishcraftJadeEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistEmbellishcraftJadeEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistEmbellishcraftLarvikiteEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistEmbellishcraftLarvikiteEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistEmbellishcraftMarbleEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistEmbellishcraftMarbleEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.biomeBlacklistEmbellishcraftSlateEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistEmbellishcraftSlateEmeraldOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Emerald.biomeBlacklistHardenedStoneEmeraldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/emerald.toml in biomeBlacklistHardenedStoneEmeraldOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Emerald.temperatureBlacklistVanillaEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistStoneEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistAndesiteEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistAndesiteEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistDioriteEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistDioriteEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistGraniteEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistGraniteEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistNetherrackEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistNetherrackEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistEndStoneEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistEndStoneEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistSandEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistSandEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistGravelEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistGravelEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistSandstoneEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistSandstoneEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistRedSandstoneEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistRedSandstoneEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistRedSandEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistRedSandEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistBlueIceEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistBlueIceEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistPackedIceEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistPackedIceEmeraldOre, please check the entries!"); } }
        for (String temp : Emerald.temperatureBlacklistBedrockEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistBedrockEmeraldOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Emerald.temperatureBlacklistQuarkBasaltEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistQuarkBasaltEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistQuarkLimestoneEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistQuarkLimestoneEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistQuarkJasperEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistQuarkJasperEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistQuarkMarbleEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistQuarkMarbleEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistQuarkSlateEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistQuarkSlateEmeraldOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Emerald.temperatureBlacklistEmbellishcraftBasaltEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistEmbellishcraftBasaltEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistEmbellishcraftGneissEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistEmbellishcraftGneissEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistEmbellishcraftJadeEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistEmbellishcraftJadeEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistEmbellishcraftLarvikiteEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistEmbellishcraftLarvikiteEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistEmbellishcraftMarbleEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistEmbellishcraftMarbleEmeraldOre, please check the entries!"); } }
        for (String name : Emerald.temperatureBlacklistEmbellishcraftSlateEmeraldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/emerald.toml in temperatureBlacklistEmbellishcraftSlateEmeraldOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Emerald.temperatureBlacklistSandEmeraldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/emerald.toml in temperatureBlacklistSandEmeraldOre, please check the entries!"); } }
    }

    private static void checkGold(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Gold.biomeBlacklistVanillaGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistStoneGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistAndesiteGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistAndesiteGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistDioriteGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistDioriteGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistGraniteGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistGraniteGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistNetherrackGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistNetherrackGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistEndStoneGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistEndStoneGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistSandGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistSandGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistGravelGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistGravelGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistSandstoneGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistSandstoneGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistRedSandstoneGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistRedSandstoneGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistRedSandGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistRedSandGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistBlueIceGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistBlueIceGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistPackedIceGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistPackedIceGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistBedrockGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistBedrockGoldOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Gold.biomeBlacklistQuarkBasaltGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistQuarkBasaltGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistQuarkLimestoneGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistQuarkLimestoneGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistQuarkJasperGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistQuarkJasperGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistQuarkMarbleGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistQuarkMarbleGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistQuarkSlateGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistQuarkSlateGoldOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Gold.biomeBlacklistEmbellishcraftBasaltGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistEmbellishcraftBasaltGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistEmbellishcraftGneissGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistEmbellishcraftGneissGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistEmbellishcraftJadeGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistEmbellishcraftJadeGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistEmbellishcraftLarvikiteGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistEmbellishcraftLarvikiteGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistEmbellishcraftMarbleGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistEmbellishcraftMarbleGoldOre, please check the entries!"); } }
        for (String name : Gold.biomeBlacklistEmbellishcraftSlateGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistEmbellishcraftSlateGoldOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Gold.biomeBlacklistHardenedStoneGoldOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/gold.toml in biomeBlacklistHardenedStoneGoldOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Gold.temperatureBlacklistVanillaGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistStoneGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistAndesiteGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistAndesiteGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistDioriteGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistDioriteGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistGraniteGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistGraniteGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistNetherrackGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistNetherrackGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistEndStoneGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistEndStoneGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistSandGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistSandGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistGravelGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistGravelGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistSandstoneGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistSandstoneGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistRedSandstoneGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistRedSandstoneGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistRedSandGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistRedSandGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistBlueIceGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistBlueIceGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistPackedIceGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistPackedIceGoldOre, please check the entries!"); } }
        for (String temp : Gold.temperatureBlacklistBedrockGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistBedrockGoldOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Gold.temperatureBlacklistQuarkBasaltGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistQuarkBasaltGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistQuarkLimestoneGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistQuarkLimestoneGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistQuarkJasperGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistQuarkJasperGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistQuarkMarbleGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistQuarkMarbleGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistQuarkSlateGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistQuarkSlateGoldOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Gold.temperatureBlacklistEmbellishcraftBasaltGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistEmbellishcraftBasaltGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistEmbellishcraftGneissGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistEmbellishcraftGneissGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistEmbellishcraftJadeGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistEmbellishcraftJadeGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistEmbellishcraftLarvikiteGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistEmbellishcraftLarvikiteGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistEmbellishcraftMarbleGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistEmbellishcraftMarbleGoldOre, please check the entries!"); } }
        for (String name : Gold.temperatureBlacklistEmbellishcraftSlateGoldOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/gold.toml in temperatureBlacklistEmbellishcraftSlateGoldOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Gold.temperatureBlacklistSandGoldOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/gold.toml in temperatureBlacklistSandGoldOre, please check the entries!"); } }
    }

    private static void checkLapis(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Lapis.biomeBlacklistVanillaLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistStoneLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistAndesiteLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistAndesiteLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistDioriteLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistDioriteLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistGraniteLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistGraniteLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistNetherrackLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistNetherrackLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistEndStoneLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistEndStoneLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistSandLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistSandLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistGravelLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistGravelLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistSandstoneLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistSandstoneLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistRedSandstoneLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistRedSandstoneLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistRedSandLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistRedSandLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistBlueIceLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistBlueIceLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistPackedIceLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistPackedIceLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistBedrockLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistBedrockLapisOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Lapis.biomeBlacklistQuarkBasaltLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistQuarkBasaltLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistQuarkLimestoneLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistQuarkLimestoneLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistQuarkJasperLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistQuarkJasperLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistQuarkMarbleLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistQuarkMarbleLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistQuarkSlateLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistQuarkSlateLapisOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Lapis.biomeBlacklistEmbellishcraftBasaltLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistEmbellishcraftBasaltLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistEmbellishcraftGneissLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistEmbellishcraftGneissLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistEmbellishcraftJadeLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistEmbellishcraftJadeLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistEmbellishcraftLarvikiteLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistEmbellishcraftLarvikiteLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistEmbellishcraftMarbleLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistEmbellishcraftMarbleLapisOre, please check the entries!"); } }
        for (String name : Lapis.biomeBlacklistEmbellishcraftSlateLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistEmbellishcraftSlateLapisOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Lapis.biomeBlacklistHardenedStoneLapisOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/lapis.toml in biomeBlacklistHardenedStoneLapisOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Lapis.temperatureBlacklistVanillaLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistStoneLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistAndesiteLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistAndesiteLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistDioriteLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistDioriteLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistGraniteLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistGraniteLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistNetherrackLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistNetherrackLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistEndStoneLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistEndStoneLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistSandLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistSandLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistGravelLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistGravelLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistSandstoneLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistSandstoneLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistRedSandstoneLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistRedSandstoneLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistRedSandLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistRedSandLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistBlueIceLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistBlueIceLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistPackedIceLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistPackedIceLapisOre, please check the entries!"); } }
        for (String temp : Lapis.temperatureBlacklistBedrockLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistBedrockLapisOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Lapis.temperatureBlacklistQuarkBasaltLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistQuarkBasaltLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistQuarkLimestoneLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistQuarkLimestoneLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistQuarkJasperLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistQuarkJasperLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistQuarkMarbleLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistQuarkMarbleLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistQuarkSlateLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistQuarkSlateLapisOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Lapis.temperatureBlacklistEmbellishcraftBasaltLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistEmbellishcraftBasaltLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistEmbellishcraftGneissLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistEmbellishcraftGneissLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistEmbellishcraftJadeLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistEmbellishcraftJadeLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistEmbellishcraftLarvikiteLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistEmbellishcraftLarvikiteLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistEmbellishcraftMarbleLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistEmbellishcraftMarbleLapisOre, please check the entries!"); } }
        for (String name : Lapis.temperatureBlacklistEmbellishcraftSlateLapisOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/lapis.toml in temperatureBlacklistEmbellishcraftSlateLapisOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Lapis.temperatureBlacklistSandLapisOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/lapis.toml in temperatureBlacklistSandLapisOre, please check the entries!"); } }
    }

    private static void checkQuartz(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Quartz.biomeBlacklistStoneQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistStoneQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistAndesiteQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistAndesiteQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistDioriteQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistDioriteQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistGraniteQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistGraniteQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistVanillaNetherQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistNetherrackQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistEndStoneQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistEndStoneQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistSandQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistSandQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistGravelQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistGravelQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistSandstoneQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistSandstoneQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistRedSandstoneQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistRedSandstoneQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistRedSandQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistRedSandQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistBlueIceQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistBlueIceQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistPackedIceQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistPackedIceQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistBedrockQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistBedrockQuartzOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Quartz.biomeBlacklistQuarkBasaltQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistQuarkBasaltQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistQuarkLimestoneQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistQuarkLimestoneQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistQuarkJasperQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistQuarkJasperQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistQuarkMarbleQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistQuarkMarbleQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistQuarkSlateQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistQuarkSlateQuartzOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Quartz.biomeBlacklistEmbellishcraftBasaltQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistEmbellishcraftBasaltQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistEmbellishcraftGneissQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistEmbellishcraftGneissQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistEmbellishcraftJadeQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistEmbellishcraftJadeQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistEmbellishcraftLarvikiteQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistEmbellishcraftLarvikiteQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistEmbellishcraftMarbleQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistEmbellishcraftMarbleQuartzOre, please check the entries!"); } }
        for (String name : Quartz.biomeBlacklistEmbellishcraftSlateQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistEmbellishcraftSlateQuartzOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Quartz.biomeBlacklistHardenedStoneQuartzOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/quartz.toml in biomeBlacklistHardenedStoneQuartzOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Quartz.temperatureBlacklistStoneQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistStoneQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistAndesiteQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistAndesiteQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistDioriteQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistDioriteQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistGraniteQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistGraniteQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistVanillaNetherQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistNetherrackQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistEndStoneQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistEndStoneQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistSandQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistSandQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistGravelQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistGravelQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistSandstoneQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistSandstoneQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistRedSandstoneQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistRedSandstoneQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistRedSandQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistRedSandQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistBlueIceQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistBlueIceQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistPackedIceQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistPackedIceQuartzOre, please check the entries!"); } }
        for (String temp : Quartz.temperatureBlacklistBedrockQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistBedrockQuartzOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Quartz.temperatureBlacklistQuarkBasaltQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistQuarkBasaltQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistQuarkLimestoneQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistQuarkLimestoneQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistQuarkJasperQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistQuarkJasperQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistQuarkMarbleQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistQuarkMarbleQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistQuarkSlateQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistQuarkSlateQuartzOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Quartz.temperatureBlacklistEmbellishcraftBasaltQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistEmbellishcraftBasaltQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistEmbellishcraftGneissQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistEmbellishcraftGneissQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistEmbellishcraftJadeQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistEmbellishcraftJadeQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistEmbellishcraftLarvikiteQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistEmbellishcraftLarvikiteQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistEmbellishcraftMarbleQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistEmbellishcraftMarbleQuartzOre, please check the entries!"); } }
        for (String name : Quartz.temperatureBlacklistEmbellishcraftSlateQuartzOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/quartz.toml in temperatureBlacklistEmbellishcraftSlateQuartzOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Quartz.temperatureBlacklistSandQuartzOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/quartz.toml in temperatureBlacklistSandQuartzOre, please check the entries!"); } }
    }

    private static void checkRedstone(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Redstone.biomeBlacklistVanillaRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistStoneRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistAndesiteRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistAndesiteRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistDioriteRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistDioriteRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistGraniteRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistGraniteRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistNetherrackRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistNetherrackRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistEndStoneRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistEndStoneRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistSandRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistSandRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistGravelRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistGravelRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistSandstoneRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistSandstoneRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistRedSandstoneRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistRedSandstoneRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistRedSandRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistRedSandRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistBlueIceRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistBlueIceRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistPackedIceRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistPackedIceRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistBedrockRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistBedrockRedstoneOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Redstone.biomeBlacklistQuarkBasaltRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistQuarkBasaltRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistQuarkLimestoneRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistQuarkLimestoneRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistQuarkJasperRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistQuarkJasperRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistQuarkMarbleRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistQuarkMarbleRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistQuarkSlateRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistQuarkSlateRedstoneOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Redstone.biomeBlacklistEmbellishcraftBasaltRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistEmbellishcraftBasaltRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistEmbellishcraftGneissRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistEmbellishcraftGneissRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistEmbellishcraftJadeRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistEmbellishcraftJadeRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistEmbellishcraftLarvikiteRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistEmbellishcraftLarvikiteRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistEmbellishcraftMarbleRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistEmbellishcraftMarbleRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.biomeBlacklistEmbellishcraftSlateRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistEmbellishcraftSlateRedstoneOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Redstone.biomeBlacklistHardenedStoneRedstoneOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/redstone.toml in biomeBlacklistHardenedStoneRedstoneOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Redstone.temperatureBlacklistVanillaRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistStoneRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistAndesiteRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistAndesiteRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistDioriteRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistDioriteRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistGraniteRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistGraniteRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistNetherrackRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistNetherrackRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistEndStoneRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistEndStoneRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistSandRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistSandRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistGravelRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistGravelRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistSandstoneRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistSandstoneRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistRedSandstoneRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistRedSandstoneRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistRedSandRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistRedSandRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistBlueIceRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistBlueIceRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistPackedIceRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistPackedIceRedstoneOre, please check the entries!"); } }
        for (String temp : Redstone.temperatureBlacklistBedrockRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistBedrockRedstoneOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Redstone.temperatureBlacklistQuarkBasaltRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistQuarkBasaltRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistQuarkLimestoneRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistQuarkLimestoneRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistQuarkJasperRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistQuarkJasperRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistQuarkMarbleRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistQuarkMarbleRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistQuarkSlateRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistQuarkSlateRedstoneOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Redstone.temperatureBlacklistEmbellishcraftBasaltRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistEmbellishcraftBasaltRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistEmbellishcraftGneissRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistEmbellishcraftGneissRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistEmbellishcraftJadeRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistEmbellishcraftJadeRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistEmbellishcraftLarvikiteRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistEmbellishcraftLarvikiteRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistEmbellishcraftMarbleRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistEmbellishcraftMarbleRedstoneOre, please check the entries!"); } }
        for (String name : Redstone.temperatureBlacklistEmbellishcraftSlateRedstoneOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/redstone.toml in temperatureBlacklistEmbellishcraftSlateRedstoneOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Redstone.temperatureBlacklistSandRedstoneOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/redstone.toml in temperatureBlacklistSandRedstoneOre, please check the entries!"); } }
    }

    private static void checkCopper(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Copper.biomeBlacklistStoneCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistStoneCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistAndesiteCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistAndesiteCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistDioriteCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistDioriteCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistGraniteCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistGraniteCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistNetherrackCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistNetherrackCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistEndStoneCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistEndStoneCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistSandCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistSandCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistGravelCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistGravelCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistSandstoneCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistSandstoneCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistRedSandstoneCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistRedSandstoneCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistRedSandCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistRedSandCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistBlueIceCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistBlueIceCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistPackedIceCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistPackedIceCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistBedrockCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistBedrockCopperOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Copper.biomeBlacklistQuarkBasaltCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistQuarkBasaltCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistQuarkLimestoneCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistQuarkLimestoneCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistQuarkJasperCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistQuarkJasperCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistQuarkMarbleCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistQuarkMarbleCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistQuarkSlateCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistQuarkSlateCopperOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Copper.biomeBlacklistEmbellishcraftBasaltCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistEmbellishcraftBasaltCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistEmbellishcraftGneissCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistEmbellishcraftGneissCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistEmbellishcraftJadeCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistEmbellishcraftJadeCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistEmbellishcraftLarvikiteCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistEmbellishcraftLarvikiteCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistEmbellishcraftMarbleCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistEmbellishcraftMarbleCopperOre, please check the entries!"); } }
        for (String name : Copper.biomeBlacklistEmbellishcraftSlateCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistEmbellishcraftSlateCopperOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Copper.biomeBlacklistHardenedStoneCopperOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/copper.toml in biomeBlacklistHardenedStoneCopperOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Copper.temperatureBlacklistStoneCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistStoneCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistAndesiteCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistAndesiteCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistDioriteCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistDioriteCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistGraniteCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistGraniteCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistNetherrackCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistNetherrackCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistEndStoneCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistEndStoneCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistSandCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistSandCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistGravelCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistGravelCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistSandstoneCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistSandstoneCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistRedSandstoneCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistRedSandstoneCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistRedSandCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistRedSandCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistBlueIceCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistBlueIceCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistPackedIceCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistPackedIceCopperOre, please check the entries!"); } }
        for (String temp : Copper.temperatureBlacklistBedrockCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistBedrockCopperOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Copper.temperatureBlacklistQuarkBasaltCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistQuarkBasaltCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistQuarkLimestoneCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistQuarkLimestoneCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistQuarkJasperCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistQuarkJasperCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistQuarkMarbleCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistQuarkMarbleCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistQuarkSlateCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistQuarkSlateCopperOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Copper.temperatureBlacklistEmbellishcraftBasaltCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistEmbellishcraftBasaltCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistEmbellishcraftGneissCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistEmbellishcraftGneissCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistEmbellishcraftJadeCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistEmbellishcraftJadeCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistEmbellishcraftLarvikiteCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistEmbellishcraftLarvikiteCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistEmbellishcraftMarbleCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistEmbellishcraftMarbleCopperOre, please check the entries!"); } }
        for (String name : Copper.temperatureBlacklistEmbellishcraftSlateCopperOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/copper.toml in temperatureBlacklistEmbellishcraftSlateCopperOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Copper.temperatureBlacklistSandCopperOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/copper.toml in temperatureBlacklistSandCopperOre, please check the entries!"); } }
    }

    private static void checkXp(ArrayList biomeVerify, ArrayList tempVerify) {
        // Vanilla Biome Blacklist
        for (String name : Xp.biomeBlacklistStoneXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistStoneXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistAndesiteXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistAndesiteXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistDioriteXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistDioriteXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistGraniteXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistGraniteXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistNetherrackXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistNetherrackXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistEndStoneXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistEndStoneXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistSandXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistSandXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistGravelXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistGravelXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistSandstoneXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistSandstoneXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistRedSandstoneXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistRedSandstoneXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistRedSandXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistRedSandXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistBlueIceXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistBlueIceXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistPackedIceXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistPackedIceXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistBedrockXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistBedrockXpOre, please check the entries!"); } }

        // Quark Biome Blacklist
        for (String name : Xp.biomeBlacklistQuarkBasaltXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistQuarkBasaltXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistQuarkLimestoneXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistQuarkLimestoneXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistQuarkJasperXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistQuarkJasperXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistQuarkMarbleXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistQuarkMarbleXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistQuarkSlateXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistQuarkSlateXpOre, please check the entries!"); } }

        // Embellishcraft Biome Blacklist
        for (String name : Xp.biomeBlacklistEmbellishcraftBasaltXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistEmbellishcraftBasaltXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistEmbellishcraftGneissXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistEmbellishcraftGneissXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistEmbellishcraftJadeXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistEmbellishcraftJadeXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistEmbellishcraftLarvikiteXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistEmbellishcraftLarvikiteXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistEmbellishcraftMarbleXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistEmbellishcraftMarbleXpOre, please check the entries!"); } }
        for (String name : Xp.biomeBlacklistEmbellishcraftSlateXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistEmbellishcraftSlateXpOre, please check the entries!"); } }

        // Danny's Ores Biome Blacklist
        for (String name : Xp.biomeBlacklistHardenedStoneXpOre.get()) { if (!biomeVerify.contains(name)) { Main.LOGGER.warn("Invalid biome '" + name + "' in config/dannys_ores/xp.toml in biomeBlacklistHardenedStoneXpOre, please check the entries!"); } }

        // Vanilla Temperature Blacklist
        for (String temp : Xp.temperatureBlacklistStoneXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistStoneXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistAndesiteXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistAndesiteXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistDioriteXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistDioriteXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistGraniteXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistGraniteXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistNetherrackXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistNetherrackXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistEndStoneXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistEndStoneXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistSandXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistSandXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistGravelXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistGravelXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistSandstoneXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistSandstoneXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistRedSandstoneXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistRedSandstoneXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistRedSandXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistRedSandXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistBlueIceXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistBlueIceXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistPackedIceXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistPackedIceXpOre, please check the entries!"); } }
        for (String temp : Xp.temperatureBlacklistBedrockXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistBedrockXpOre, please check the entries!"); } }

        // Quark Temperature Blacklist
        for (String name : Xp.temperatureBlacklistQuarkBasaltXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistQuarkBasaltXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistQuarkLimestoneXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistQuarkLimestoneXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistQuarkJasperXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistQuarkJasperXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistQuarkMarbleXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistQuarkMarbleXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistQuarkSlateXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistQuarkSlateXpOre, please check the entries!"); } }

        // Embellishcraft Temperature Blacklist
        for (String name : Xp.temperatureBlacklistEmbellishcraftBasaltXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistEmbellishcraftBasaltXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistEmbellishcraftGneissXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistEmbellishcraftGneissXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistEmbellishcraftJadeXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistEmbellishcraftJadeXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistEmbellishcraftLarvikiteXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistEmbellishcraftLarvikiteXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistEmbellishcraftMarbleXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistEmbellishcraftMarbleXpOre, please check the entries!"); } }
        for (String name : Xp.temperatureBlacklistEmbellishcraftSlateXpOre.get()) { if (!tempVerify.contains(name)) { Main.LOGGER.warn("Invalid temperature '" + name + "' in config/dannys_ores/xp.toml in temperatureBlacklistEmbellishcraftSlateXpOre, please check the entries!"); } }

        // Danny's Ores Temperature Blacklist
        for (String temp : Xp.temperatureBlacklistSandXpOre.get()) { if (!tempVerify.contains(temp)) { Main.LOGGER.warn("Invalid temperature '" + temp + "' in config/dannys_ores/xp.toml in temperatureBlacklistSandXpOre, please check the entries!"); } }
    }
}
