package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class Copper {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableCopperOres;

    public static ForgeConfigSpec.BooleanValue enableStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelStoneCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelStoneCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelStoneCopperOre;
    public static ForgeConfigSpec.IntValue lightValueStoneCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropStoneCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceStoneCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandStoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelAndesiteCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelAndesiteCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue lightValueAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceAndesiteCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectAndesiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandAndesiteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelDioriteCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelDioriteCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelDioriteCopperOre;
    public static ForgeConfigSpec.IntValue lightValueDioriteCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropDioriteCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropDioriteCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceDioriteCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectDioriteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandDioriteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelGraniteCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelGraniteCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelGraniteCopperOre;
    public static ForgeConfigSpec.IntValue lightValueGraniteCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropGraniteCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropGraniteCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceGraniteCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectGraniteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandGraniteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelNetherrackCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelNetherrackCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue lightValueNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceNetherrackCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectNetherrackCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandNetherrackCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelEndStoneCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelEndStoneCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue lightValueEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceEndStoneCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectEndStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandEndStoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableSandCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeSandCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandCopperOre;
    public static ForgeConfigSpec.IntValue minHeightSandCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelSandCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelSandCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelSandCopperOre;
    public static ForgeConfigSpec.IntValue lightValueSandCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropSandCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropSandCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceSandCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeSandCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionSandCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsSandCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandSandCopperOre;

    public static ForgeConfigSpec.BooleanValue enableGravelCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelCopperOre;
    public static ForgeConfigSpec.IntValue minHeightGravelCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelGravelCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelGravelCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelGravelCopperOre;
    public static ForgeConfigSpec.IntValue lightValueGravelCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropGravelCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropGravelCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceGravelCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectGravelCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandGravelCopperOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelSandstoneCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelSandstoneCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue lightValueSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceSandstoneCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandSandstoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue harvestLevelRedSandstoneCopperOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelRedSandstoneCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue lightValueRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minXpDropRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxXpDropRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue explosionChanceRedSandstoneCopperOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectRedSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandRedSandstoneCopperOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Copper Ores").push("copper_ores");
            enableCopperOres = BUILDER.comment("Enable or disable all Copper Ore variants.").define("enableCopperOres", true);
            BUILDER.comment("Stone Copper Ore").push("stone_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableStoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneCopperOre", true);
                    veinSizeStoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneCopperOre", 8, 0, 65536);
                    veinsPerChunkStoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneCopperOre", 8, 0, 65536);
                    minHeightStoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneCopperOre", 0, 0, 256);
                    maxHeightStoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneCopperOre", 60, 0, 256);
                    isTempWhitelistStoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneCopperOre", false);
                    temperatureBlacklistStoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistStoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneCopperOre", false);
                    biomeBlacklistStoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelStoneCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelStoneCopperOre", 1, 0, 2000000000);
                    hardnessLevelStoneCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelStoneCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelStoneCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelStoneCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueStoneCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueStoneCopperOre", 0, 0, 15);
                    minXpDropStoneCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropStoneCopperOre", 0, 0, 100000);
                    maxXpDropStoneCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropStoneCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceStoneCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceStoneCopperOre", 0, 0, 1000);
                    explosionRangeStoneCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeStoneCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionStoneCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionStoneCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectStoneCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectStoneCopperOre", false);
                    statusEffectsStoneCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsStoneCopperOre", new ArrayList<String>());
                    onlyInHandStoneCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandStoneCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Andesite Copper Ore").push("andesite_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableAndesiteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteCopperOre", true);
                    veinSizeAndesiteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteCopperOre", 8, 0, 65536);
                    veinsPerChunkAndesiteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteCopperOre", 8, 0, 65536);
                    minHeightAndesiteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteCopperOre", 0, 0, 256);
                    maxHeightAndesiteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteCopperOre", 60, 0, 256);
                    isTempWhitelistAndesiteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteCopperOre", false);
                    temperatureBlacklistAndesiteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteCopperOre", new ArrayList<String>());
                    isBiomeWhitelistAndesiteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteCopperOre", false);
                    biomeBlacklistAndesiteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelAndesiteCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelAndesiteCopperOre", 1, 0, 2000000000);
                    hardnessLevelAndesiteCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelAndesiteCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelAndesiteCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelAndesiteCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueAndesiteCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueAndesiteCopperOre", 0, 0, 15);
                    minXpDropAndesiteCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropAndesiteCopperOre", 0, 0, 100000);
                    maxXpDropAndesiteCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropAndesiteCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceAndesiteCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceAndesiteCopperOre", 0, 0, 1000);
                    explosionRangeAndesiteCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeAndesiteCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionAndesiteCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionAndesiteCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectAndesiteCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectAndesiteCopperOre", false);
                    statusEffectsAndesiteCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsAndesiteCopperOre", new ArrayList<String>());
                    onlyInHandAndesiteCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandAndesiteCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Diorite Copper Ore").push("diorite_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableDioriteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteCopperOre", true);
                    veinSizeDioriteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteCopperOre", 8, 0, 65536);
                    veinsPerChunkDioriteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteCopperOre", 8, 0, 65536);
                    minHeightDioriteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteCopperOre", 0, 0, 256);
                    maxHeightDioriteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteCopperOre", 60, 0, 256);
                    isTempWhitelistDioriteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteCopperOre", false);
                    temperatureBlacklistDioriteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteCopperOre", new ArrayList<String>());
                    isBiomeWhitelistDioriteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteCopperOre", false);
                    biomeBlacklistDioriteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelDioriteCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelDioriteCopperOre", 1, 0, 2000000000);
                    hardnessLevelDioriteCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelDioriteCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelDioriteCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelDioriteCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueDioriteCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueDioriteCopperOre", 0, 0, 15);
                    minXpDropDioriteCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropDioriteCopperOre", 0, 0, 100000);
                    maxXpDropDioriteCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropDioriteCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceDioriteCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceDioriteCopperOre", 0, 0, 1000);
                    explosionRangeDioriteCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeDioriteCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionDioriteCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionDioriteCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectDioriteCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectDioriteCopperOre", false);
                    statusEffectsDioriteCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsDioriteCopperOre", new ArrayList<String>());
                    onlyInHandDioriteCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandDioriteCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Granite Copper Ore").push("granite_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableGraniteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteCopperOre", true);
                    veinSizeGraniteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteCopperOre", 8, 0, 65536);
                    veinsPerChunkGraniteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteCopperOre", 8, 0, 65536);
                    minHeightGraniteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteCopperOre", 0, 0, 256);
                    maxHeightGraniteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteCopperOre", 60, 0, 256);
                    isTempWhitelistGraniteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteCopperOre", false);
                    temperatureBlacklistGraniteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteCopperOre", new ArrayList<String>());
                    isBiomeWhitelistGraniteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteCopperOre", false);
                    biomeBlacklistGraniteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelGraniteCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelGraniteCopperOre", 1, 0, 2000000000);
                    hardnessLevelGraniteCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelGraniteCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelGraniteCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelGraniteCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueGraniteCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueGraniteCopperOre", 0, 0, 15);
                    minXpDropGraniteCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropGraniteCopperOre", 0, 0, 100000);
                    maxXpDropGraniteCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropGraniteCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceGraniteCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceGraniteCopperOre", 0, 0, 1000);
                    explosionRangeGraniteCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeGraniteCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionGraniteCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionGraniteCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectGraniteCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectGraniteCopperOre", false);
                    statusEffectsGraniteCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsGraniteCopperOre", new ArrayList<String>());
                    onlyInHandGraniteCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandGraniteCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Netherrack Copper Ore").push("netherrack_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableNetherrackCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackCopperOre", true);
                    veinSizeNetherrackCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackCopperOre", 8, 0, 65536);
                    veinsPerChunkNetherrackCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackCopperOre", 8, 0, 65536);
                    minHeightNetherrackCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackCopperOre", 0, 0, 256);
                    maxHeightNetherrackCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackCopperOre", 60, 0, 256);
                    isTempWhitelistNetherrackCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackCopperOre", false);
                    temperatureBlacklistNetherrackCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackCopperOre", new ArrayList<String>());
                    isBiomeWhitelistNetherrackCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackCopperOre", false);
                    biomeBlacklistNetherrackCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelNetherrackCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelNetherrackCopperOre", 1, 0, 2000000000);
                    hardnessLevelNetherrackCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelNetherrackCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelNetherrackCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelNetherrackCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueNetherrackCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueNetherrackCopperOre", 0, 0, 15);
                    minXpDropNetherrackCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropNetherrackCopperOre", 0, 0, 100000);
                    maxXpDropNetherrackCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropNetherrackCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceNetherrackCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceNetherrackCopperOre", 0, 0, 1000);
                    explosionRangeNetherrackCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeNetherrackCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionNetherrackCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionNetherrackCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectNetherrackCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectNetherrackCopperOre", false);
                    statusEffectsNetherrackCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsNetherrackCopperOre", new ArrayList<String>());
                    onlyInHandNetherrackCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandNetherrackCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("End Stone Copper Ore").push("end_stone_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableEndStoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneCopperOre", true);
                    veinSizeEndStoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneCopperOre", 8, 0, 65536);
                    veinsPerChunkEndStoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneCopperOre", 8, 0, 65536);
                    minHeightEndStoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneCopperOre", 0, 0, 256);
                    maxHeightEndStoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneCopperOre", 60, 0, 256);
                    isTempWhitelistEndStoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneCopperOre", false);
                    temperatureBlacklistEndStoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistEndStoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneCopperOre", false);
                    biomeBlacklistEndStoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelEndStoneCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelEndStoneCopperOre", 1, 0, 2000000000);
                    hardnessLevelEndStoneCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelEndStoneCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelEndStoneCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelEndStoneCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueEndStoneCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueEndStoneCopperOre", 0, 0, 15);
                    minXpDropEndStoneCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropEndStoneCopperOre", 0, 0, 100000);
                    maxXpDropEndStoneCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropEndStoneCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceEndStoneCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceEndStoneCopperOre", 0, 0, 1000);
                    explosionRangeEndStoneCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeEndStoneCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionEndStoneCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionEndStoneCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectEndStoneCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectEndStoneCopperOre", false);
                    statusEffectsEndStoneCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsEndStoneCopperOre", new ArrayList<String>());
                    onlyInHandEndStoneCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandEndStoneCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sand Copper Ore").push("sand_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableSandCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandCopperOre", true);
                    veinSizeSandCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandCopperOre", 8, 0, 65536);
                    veinsPerChunkSandCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandCopperOre", 8, 0, 65536);
                    minHeightSandCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandCopperOre", 0, 0, 256);
                    maxHeightSandCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandCopperOre", 60, 0, 256);
                    isTempWhitelistSandCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandCopperOre", false);
                    temperatureBlacklistSandCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandCopperOre", new ArrayList<String>());
                    isBiomeWhitelistSandCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandCopperOre", false);
                    biomeBlacklistSandCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelSandCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelSandCopperOre", 1, 0, 2000000000);
                    hardnessLevelSandCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelSandCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelSandCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelSandCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueSandCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueSandCopperOre", 0, 0, 15);
                    minXpDropSandCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropSandCopperOre", 0, 0, 100000);
                    maxXpDropSandCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropSandCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceSandCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceSandCopperOre", 0, 0, 1000);
                    explosionRangeSandCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeSandCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionSandCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionSandCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectSandCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectSandCopperOre", false);
                    statusEffectsSandCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsSandCopperOre", new ArrayList<String>());
                    onlyInHandSandCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandSandCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Gravel Copper Ore").push("gravel_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableGravelCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelCopperOre", true);
                    veinSizeGravelCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelCopperOre", 8, 0, 65536);
                    veinsPerChunkGravelCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelCopperOre", 8, 0, 65536);
                    minHeightGravelCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelCopperOre", 0, 0, 256);
                    maxHeightGravelCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelCopperOre", 60, 0, 256);
                    isTempWhitelistGravelCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelCopperOre", false);
                    temperatureBlacklistGravelCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelCopperOre", new ArrayList<String>());
                    isBiomeWhitelistGravelCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelCopperOre", false);
                    biomeBlacklistGravelCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelGravelCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelGravelCopperOre", 1, 0, 2000000000);
                    hardnessLevelGravelCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelGravelCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelGravelCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelGravelCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueGravelCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueGravelCopperOre", 0, 0, 15);
                    minXpDropGravelCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropGravelCopperOre", 0, 0, 100000);
                    maxXpDropGravelCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropGravelCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceGravelCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceGravelCopperOre", 0, 0, 1000);
                    explosionRangeGravelCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeGravelCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionGravelCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionGravelCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectGravelCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectGravelCopperOre", false);
                    statusEffectsGravelCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsGravelCopperOre", new ArrayList<String>());
                    onlyInHandGravelCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandGravelCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sandstone Copper Ore").push("sandstone_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableSandstoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneCopperOre", true);
                    veinSizeSandstoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneCopperOre", 8, 0, 65536);
                    veinsPerChunkSandstoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneCopperOre", 8, 0, 65536);
                    minHeightSandstoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneCopperOre", 0, 0, 256);
                    maxHeightSandstoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneCopperOre", 60, 0, 256);
                    isTempWhitelistSandstoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneCopperOre", false);
                    temperatureBlacklistSandstoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistSandstoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneCopperOre", false);
                    biomeBlacklistSandstoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelSandstoneCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelSandstoneCopperOre", 1, 0, 2000000000);
                    hardnessLevelSandstoneCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelSandstoneCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelSandstoneCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelSandstoneCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueSandstoneCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueSandstoneCopperOre", 0, 0, 15);
                    minXpDropSandstoneCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropSandstoneCopperOre", 0, 0, 100000);
                    maxXpDropSandstoneCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropSandstoneCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceSandstoneCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceSandstoneCopperOre", 0, 0, 1000);
                    explosionRangeSandstoneCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeSandstoneCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionSandstoneCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionSandstoneCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectSandstoneCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectSandstoneCopperOre", false);
                    statusEffectsSandstoneCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsSandstoneCopperOre", new ArrayList<String>());
                    onlyInHandSandstoneCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandSandstoneCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Red Sandstone Copper Ore").push("red_sandstone_copper_ore");
                BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
                    enableRedSandstoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneCopperOre", true);
                    veinSizeRedSandstoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneCopperOre", 8, 0, 65536);
                    veinsPerChunkRedSandstoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneCopperOre", 8, 0, 65536);
                    minHeightRedSandstoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneCopperOre", 0, 0, 256);
                    maxHeightRedSandstoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneCopperOre", 60, 0, 256);
                    isTempWhitelistRedSandstoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneCopperOre", false);
                    temperatureBlacklistRedSandstoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistRedSandstoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneCopperOre", false);
                    biomeBlacklistRedSandstoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
                BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
                    harvestLevelRedSandstoneCopperOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelRedSandstoneCopperOre", 1, 0, 2000000000);
                    hardnessLevelRedSandstoneCopperOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelRedSandstoneCopperOre", 3.0, -1.0, 3600000.0);
                    resistanceLevelRedSandstoneCopperOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelRedSandstoneCopperOre", 3.0, 0.0, 3600000.0);
                    lightValueRedSandstoneCopperOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueRedSandstoneCopperOre", 0, 0, 15);
                    minXpDropRedSandstoneCopperOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropRedSandstoneCopperOre", 0, 0, 100000);
                    maxXpDropRedSandstoneCopperOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropRedSandstoneCopperOre", 0, 0,100000);
                BUILDER.pop();
                BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
                    explosionChanceRedSandstoneCopperOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceRedSandstoneCopperOre", 0, 0, 1000);
                    explosionRangeRedSandstoneCopperOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeRedSandstoneCopperOre", 3.0, 0.0, 100.0);
                    enableExplosionDestructionRedSandstoneCopperOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionRedSandstoneCopperOre", false);
                BUILDER.pop();
                BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
                    hasGlowEffectRedSandstoneCopperOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectRedSandstoneCopperOre", false);
                    statusEffectsRedSandstoneCopperOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsRedSandstoneCopperOre", new ArrayList<String>());
                    onlyInHandRedSandstoneCopperOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandRedSandstoneCopperOre", false);
                BUILDER.pop();
            BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Copper.spec, Main.MOD_ID + "/copper.toml");
        final CommentedFileConfig configData = CommentedFileConfig.builder(FMLPaths.CONFIGDIR.get().resolve(Main.MOD_ID + "/copper.toml"))
                .sync()
                .autosave()
                .writingMode(WritingMode.REPLACE)
                .build();
        configData.load();
        spec.setConfig(configData);
    }
}
