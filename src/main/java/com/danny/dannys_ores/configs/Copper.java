package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class Copper {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableCopperOres;

    public static ForgeConfigSpec.BooleanValue enableStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableSandCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeSandCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandCopperOre;
    public static ForgeConfigSpec.IntValue minHeightSandCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandCopperOre;

    public static ForgeConfigSpec.BooleanValue enableGravelCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelCopperOre;
    public static ForgeConfigSpec.IntValue minHeightGravelCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelCopperOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneCopperOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Copper Ores").push("copper_ores");
            enableCopperOres = BUILDER.comment("Enable or disable all Copper Ore variants.").define("enableCopperOres", true);
            BUILDER.comment("Stone Copper Ore").push("stone_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableStoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneCopperOre", true);
                    veinSizeStoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneCopperOre", 9, 0, 65536);
                    veinsPerChunkStoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneCopperOre", 20, 0, 65536);
                    minHeightStoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneCopperOre", 40, 0, 256);
                    maxHeightStoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneCopperOre", 128, 0, 256);
                    isTempWhitelistStoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneCopperOre", false);
                    temperatureBlacklistStoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistStoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneCopperOre", false);
                    biomeBlacklistStoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Andesite Copper Ore").push("andesite_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableAndesiteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteCopperOre", true);
                    veinSizeAndesiteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteCopperOre", 9, 0, 65536);
                    veinsPerChunkAndesiteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteCopperOre", 20, 0, 65536);
                    minHeightAndesiteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteCopperOre", 40, 0, 256);
                    maxHeightAndesiteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteCopperOre", 128, 0, 256);
                    isTempWhitelistAndesiteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteCopperOre", false);
                    temperatureBlacklistAndesiteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteCopperOre", new ArrayList<String>());
                    isBiomeWhitelistAndesiteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteCopperOre", false);
                    biomeBlacklistAndesiteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Diorite Copper Ore").push("diorite_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableDioriteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteCopperOre", true);
                    veinSizeDioriteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteCopperOre", 9, 0, 65536);
                    veinsPerChunkDioriteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteCopperOre", 20, 0, 65536);
                    minHeightDioriteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteCopperOre", 40, 0, 256);
                    maxHeightDioriteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteCopperOre", 128, 0, 256);
                    isTempWhitelistDioriteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteCopperOre", false);
                    temperatureBlacklistDioriteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteCopperOre", new ArrayList<String>());
                    isBiomeWhitelistDioriteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteCopperOre", false);
                    biomeBlacklistDioriteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Granite Copper Ore").push("granite_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableGraniteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteCopperOre", true);
                    veinSizeGraniteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteCopperOre", 9, 0, 65536);
                    veinsPerChunkGraniteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteCopperOre", 20, 0, 65536);
                    minHeightGraniteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteCopperOre", 40, 0, 256);
                    maxHeightGraniteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteCopperOre", 128, 0, 256);
                    isTempWhitelistGraniteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteCopperOre", false);
                    temperatureBlacklistGraniteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteCopperOre", new ArrayList<String>());
                    isBiomeWhitelistGraniteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteCopperOre", false);
                    biomeBlacklistGraniteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Netherrack Copper Ore").push("netherrack_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableNetherrackCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackCopperOre", true);
                    veinSizeNetherrackCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackCopperOre", 4, 0, 65536);
                    veinsPerChunkNetherrackCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackCopperOre", 10, 0, 65536);
                    minHeightNetherrackCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackCopperOre", 10, 0, 256);
                    maxHeightNetherrackCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackCopperOre", 96, 0, 256);
                    isTempWhitelistNetherrackCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackCopperOre", false);
                    temperatureBlacklistNetherrackCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackCopperOre", new ArrayList<String>());
                    isBiomeWhitelistNetherrackCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackCopperOre", false);
                    biomeBlacklistNetherrackCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("End Stone Copper Ore").push("end_stone_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableEndStoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneCopperOre", true);
                    veinSizeEndStoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneCopperOre", 4, 0, 65536);
                    veinsPerChunkEndStoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneCopperOre", 10, 0, 65536);
                    minHeightEndStoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneCopperOre", 60, 0, 256);
                    maxHeightEndStoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneCopperOre", 128, 0, 256);
                    isTempWhitelistEndStoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneCopperOre", false);
                    temperatureBlacklistEndStoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistEndStoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneCopperOre", false);
                    biomeBlacklistEndStoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sand Copper Ore").push("sand_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableSandCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandCopperOre", true);
                    veinSizeSandCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandCopperOre", 9, 0, 65536);
                    veinsPerChunkSandCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandCopperOre", 20, 0, 65536);
                    minHeightSandCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandCopperOre", 40, 0, 256);
                    maxHeightSandCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandCopperOre", 128, 0, 256);
                    isTempWhitelistSandCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandCopperOre", false);
                    temperatureBlacklistSandCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandCopperOre", new ArrayList<String>());
                    isBiomeWhitelistSandCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandCopperOre", false);
                    biomeBlacklistSandCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Gravel Copper Ore").push("gravel_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableGravelCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelCopperOre", true);
                    veinSizeGravelCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelCopperOre", 9, 0, 65536);
                    veinsPerChunkGravelCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelCopperOre", 20, 0, 65536);
                    minHeightGravelCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelCopperOre", 40, 0, 256);
                    maxHeightGravelCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelCopperOre", 128, 0, 256);
                    isTempWhitelistGravelCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelCopperOre", false);
                    temperatureBlacklistGravelCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelCopperOre", new ArrayList<String>());
                    isBiomeWhitelistGravelCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelCopperOre", false);
                    biomeBlacklistGravelCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sandstone Copper Ore").push("sandstone_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableSandstoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneCopperOre", true);
                    veinSizeSandstoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneCopperOre", 9, 0, 65536);
                    veinsPerChunkSandstoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneCopperOre", 20, 0, 65536);
                    minHeightSandstoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneCopperOre", 40, 0, 256);
                    maxHeightSandstoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneCopperOre", 128, 0, 256);
                    isTempWhitelistSandstoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneCopperOre", false);
                    temperatureBlacklistSandstoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistSandstoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneCopperOre", false);
                    biomeBlacklistSandstoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Red Sandstone Copper Ore").push("red_sandstone_copper_ore");
                BUILDER.comment("Generation settings for this ore.").push("generation");
                    enableRedSandstoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneCopperOre", true);
                    veinSizeRedSandstoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneCopperOre", 9, 0, 65536);
                    veinsPerChunkRedSandstoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneCopperOre", 20, 0, 65536);
                    minHeightRedSandstoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneCopperOre", 40, 0, 256);
                    maxHeightRedSandstoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneCopperOre", 128, 0, 256);
                    isTempWhitelistRedSandstoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneCopperOre", false);
                    temperatureBlacklistRedSandstoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneCopperOre", new ArrayList<String>());
                    isBiomeWhitelistRedSandstoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneCopperOre", false);
                    biomeBlacklistRedSandstoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneCopperOre", new ArrayList<String>());
                BUILDER.pop();
            BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Copper.spec, Main.MOD_ID + "/copper.toml");
    }
}
