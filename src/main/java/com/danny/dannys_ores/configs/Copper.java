package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class Copper {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableCopperOres;

    public static ForgeConfigSpec.BooleanValue enableStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableSandCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeSandCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandCopperOre;
    public static ForgeConfigSpec.IntValue minHeightSandCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandCopperOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandCopperOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandCopperOre;

    public static ForgeConfigSpec.BooleanValue enableGravelCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelCopperOre;
    public static ForgeConfigSpec.IntValue minHeightGravelCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelCopperOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceCopperOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceCopperOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceCopperOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceCopperOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceCopperOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceCopperOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockCopperOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockCopperOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockCopperOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltCopperOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltCopperOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneCopperOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperCopperOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperCopperOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleCopperOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleCopperOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateCopperOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateCopperOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteCopperOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateCopperOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneCopperOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneCopperOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneCopperOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneCopperOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneCopperOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneCopperOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Copper Ores").push("copper_ores");
        enableCopperOres = BUILDER.comment("Enable or disable all Copper Ore variants.").define("enableCopperOres", true);
        BUILDER.comment("Stone Copper Ore").push("stone_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneCopperOre", true);
        veinSizeStoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneCopperOre", 9, 0, 65536);
        veinsPerChunkStoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneCopperOre", 20, 0, 65536);
        minHeightStoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneCopperOre", 40, 0, 256);
        maxHeightStoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneCopperOre", 128, 0, 256);
        isTempWhitelistStoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneCopperOre", false);
        temperatureBlacklistStoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneCopperOre", new ArrayList<String>());
        isBiomeWhitelistStoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneCopperOre", false);
        biomeBlacklistStoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Copper Ore").push("andesite_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteCopperOre", true);
        veinSizeAndesiteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteCopperOre", 9, 0, 65536);
        veinsPerChunkAndesiteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteCopperOre", 20, 0, 65536);
        minHeightAndesiteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteCopperOre", 40, 0, 256);
        maxHeightAndesiteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteCopperOre", 128, 0, 256);
        isTempWhitelistAndesiteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteCopperOre", false);
        temperatureBlacklistAndesiteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteCopperOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteCopperOre", false);
        biomeBlacklistAndesiteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Copper Ore").push("diorite_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteCopperOre", true);
        veinSizeDioriteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteCopperOre", 9, 0, 65536);
        veinsPerChunkDioriteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteCopperOre", 20, 0, 65536);
        minHeightDioriteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteCopperOre", 40, 0, 256);
        maxHeightDioriteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteCopperOre", 128, 0, 256);
        isTempWhitelistDioriteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteCopperOre", false);
        temperatureBlacklistDioriteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteCopperOre", new ArrayList<String>());
        isBiomeWhitelistDioriteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteCopperOre", false);
        biomeBlacklistDioriteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Copper Ore").push("granite_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteCopperOre", true);
        veinSizeGraniteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteCopperOre", 9, 0, 65536);
        veinsPerChunkGraniteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteCopperOre", 20, 0, 65536);
        minHeightGraniteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteCopperOre", 40, 0, 256);
        maxHeightGraniteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteCopperOre", 128, 0, 256);
        isTempWhitelistGraniteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteCopperOre", false);
        temperatureBlacklistGraniteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteCopperOre", new ArrayList<String>());
        isBiomeWhitelistGraniteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteCopperOre", false);
        biomeBlacklistGraniteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Copper Ore").push("netherrack_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackCopperOre", true);
        veinSizeNetherrackCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackCopperOre", 5, 0, 65536);
        veinsPerChunkNetherrackCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackCopperOre", 10, 0, 65536);
        minHeightNetherrackCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackCopperOre", 10, 0, 256);
        maxHeightNetherrackCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackCopperOre", 96, 0, 256);
        isTempWhitelistNetherrackCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackCopperOre", false);
        temperatureBlacklistNetherrackCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackCopperOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackCopperOre", false);
        biomeBlacklistNetherrackCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Copper Ore").push("end_stone_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneCopperOre", true);
        veinSizeEndStoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneCopperOre", 5, 0, 65536);
        veinsPerChunkEndStoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneCopperOre", 10, 0, 65536);
        minHeightEndStoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneCopperOre", 60, 0, 256);
        maxHeightEndStoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneCopperOre", 128, 0, 256);
        isTempWhitelistEndStoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneCopperOre", false);
        temperatureBlacklistEndStoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneCopperOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneCopperOre", false);
        biomeBlacklistEndStoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Copper Ore").push("sand_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandCopperOre", true);
        veinSizeSandCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandCopperOre", 5, 0, 65536);
        veinsPerChunkSandCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandCopperOre", 10, 0, 65536);
        minHeightSandCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandCopperOre", 40, 0, 256);
        maxHeightSandCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandCopperOre", 128, 0, 256);
        isTempWhitelistSandCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandCopperOre", false);
        temperatureBlacklistSandCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandCopperOre", new ArrayList<String>());
        isBiomeWhitelistSandCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandCopperOre", false);
        biomeBlacklistSandCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Copper Ore").push("red_sand_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandCopperOre", true);
        veinSizeRedSandCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandCopperOre", 5, 0, 65536);
        veinsPerChunkRedSandCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandCopperOre", 10, 0, 65536);
        minHeightRedSandCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandCopperOre", 40, 0, 256);
        maxHeightRedSandCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandCopperOre", 128, 0, 256);
        isTempWhitelistRedSandCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandCopperOre", false);
        temperatureBlacklistRedSandCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandCopperOre", new ArrayList<String>());
        isBiomeWhitelistRedSandCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandCopperOre", false);
        biomeBlacklistRedSandCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Copper Ore").push("gravel_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelCopperOre", true);
        veinSizeGravelCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelCopperOre", 5, 0, 65536);
        veinsPerChunkGravelCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelCopperOre", 10, 0, 65536);
        minHeightGravelCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelCopperOre", 40, 0, 256);
        maxHeightGravelCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelCopperOre", 128, 0, 256);
        isTempWhitelistGravelCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelCopperOre", false);
        temperatureBlacklistGravelCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelCopperOre", new ArrayList<String>());
        isBiomeWhitelistGravelCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelCopperOre", false);
        biomeBlacklistGravelCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Copper Ore").push("sandstone_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneCopperOre", true);
        veinSizeSandstoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneCopperOre", 5, 0, 65536);
        veinsPerChunkSandstoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneCopperOre", 10, 0, 65536);
        minHeightSandstoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneCopperOre", 40, 0, 256);
        maxHeightSandstoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneCopperOre", 128, 0, 256);
        isTempWhitelistSandstoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneCopperOre", false);
        temperatureBlacklistSandstoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneCopperOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneCopperOre", false);
        biomeBlacklistSandstoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Copper Ore").push("red_sandstone_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneCopperOre", true);
        veinSizeRedSandstoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneCopperOre", 5, 0, 65536);
        veinsPerChunkRedSandstoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneCopperOre", 10, 0, 65536);
        minHeightRedSandstoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneCopperOre", 40, 0, 256);
        maxHeightRedSandstoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneCopperOre", 128, 0, 256);
        isTempWhitelistRedSandstoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneCopperOre", false);
        temperatureBlacklistRedSandstoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneCopperOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneCopperOre", false);
        biomeBlacklistRedSandstoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Copper Ore").push("blue_ice_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceCopperOre", true);
        veinSizeBlueIceCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceCopperOre", 5, 0, 65536);
        veinsPerChunkBlueIceCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceCopperOre", 10, 0, 65536);
        minHeightBlueIceCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceCopperOre", 0, 0, 256);
        maxHeightBlueIceCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceCopperOre", 128, 0, 256);
        isTempWhitelistBlueIceCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceCopperOre", false);
        temperatureBlacklistBlueIceCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceCopperOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceCopperOre", false);
        biomeBlacklistBlueIceCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBlueIceCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Copper Ore").push("packed_ice_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceCopperOre", true);
        veinSizePackedIceCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceCopperOre", 5, 0, 65536);
        veinsPerChunkPackedIceCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceCopperOre", 10, 0, 65536);
        minHeightPackedIceCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceCopperOre", 0, 0, 256);
        maxHeightPackedIceCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceCopperOre", 128, 0, 256);
        isTempWhitelistPackedIceCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceCopperOre", false);
        temperatureBlacklistPackedIceCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceCopperOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceCopperOre", false);
        biomeBlacklistPackedIceCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistPackedIceCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Copper Ore").push("bedrock_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockCopperOre", true);
        veinSizeBedrockCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockCopperOre", 1, 0, 65536);
        veinsPerChunkBedrockCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockCopperOre", 1, 0, 65536);
        minHeightBedrockCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockCopperOre", 0, 0, 256);
        maxHeightBedrockCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockCopperOre", 256, 0, 256);
        isTempWhitelistBedrockCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockCopperOre", false);
        temperatureBlacklistBedrockCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockCopperOre", new ArrayList<String>());
        isBiomeWhitelistBedrockCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockCopperOre", false);
        biomeBlacklistBedrockCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBedrockCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockCopperOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockCopperOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Copper Ore (Quark)").push("quark_basalt_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltCopperOre", true);
        veinSizeQuarkBasaltCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltCopperOre", 5, 0, 65536);
        veinsPerChunkQuarkBasaltCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltCopperOre", 10, 0, 65536);
        minHeightQuarkBasaltCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltCopperOre", 10, 0, 256);
        maxHeightQuarkBasaltCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltCopperOre", 96, 0, 256);
        isTempWhitelistQuarkBasaltCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltCopperOre", false);
        temperatureBlacklistQuarkBasaltCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltCopperOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltCopperOre", false);
        biomeBlacklistQuarkBasaltCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Copper Ore (Quark)").push("quark_limestone_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneCopperOre", true);
        veinSizeQuarkLimestoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneCopperOre", 9, 0, 65536);
        veinsPerChunkQuarkLimestoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneCopperOre", 20, 0, 65536);
        minHeightQuarkLimestoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneCopperOre", 40, 0, 256);
        maxHeightQuarkLimestoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneCopperOre", 128, 0, 256);
        isTempWhitelistQuarkLimestoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneCopperOre", false);
        temperatureBlacklistQuarkLimestoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneCopperOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneCopperOre", false);
        biomeBlacklistQuarkLimestoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Copper Ore (Quark)").push("quark_jasper_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperCopperOre", true);
        veinSizeQuarkJasperCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperCopperOre", 9, 0, 65536);
        veinsPerChunkQuarkJasperCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperCopperOre", 20, 0, 65536);
        minHeightQuarkJasperCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperCopperOre", 40, 0, 256);
        maxHeightQuarkJasperCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperCopperOre", 128, 0, 256);
        isTempWhitelistQuarkJasperCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperCopperOre", false);
        temperatureBlacklistQuarkJasperCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperCopperOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperCopperOre", false);
        biomeBlacklistQuarkJasperCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Copper Ore (Quark)").push("quark_marble_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleCopperOre", true);
        veinSizeQuarkMarbleCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleCopperOre", 9, 0, 65536);
        veinsPerChunkQuarkMarbleCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleCopperOre", 20, 0, 65536);
        minHeightQuarkMarbleCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleCopperOre", 40, 0, 256);
        maxHeightQuarkMarbleCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleCopperOre", 128, 0, 256);
        isTempWhitelistQuarkMarbleCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleCopperOre", false);
        temperatureBlacklistQuarkMarbleCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleCopperOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleCopperOre", false);
        biomeBlacklistQuarkMarbleCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Copper Ore (Quark)").push("quark_slate_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateCopperOre", true);
        veinSizeQuarkSlateCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateCopperOre", 9, 0, 65536);
        veinsPerChunkQuarkSlateCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateCopperOre", 20, 0, 65536);
        minHeightQuarkSlateCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateCopperOre", 40, 0, 256);
        maxHeightQuarkSlateCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateCopperOre", 128, 0, 256);
        isTempWhitelistQuarkSlateCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateCopperOre", false);
        temperatureBlacklistQuarkSlateCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateCopperOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateCopperOre", false);
        biomeBlacklistQuarkSlateCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Copper Ore (Embellishcraft)").push("embellishcraft_basalt_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltCopperOre", true);
        veinSizeEmbellishcraftBasaltCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltCopperOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltCopperOre", 20, 0, 65536);
        minHeightEmbellishcraftBasaltCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltCopperOre", 40, 0, 256);
        maxHeightEmbellishcraftBasaltCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltCopperOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltCopperOre", false);
        temperatureBlacklistEmbellishcraftBasaltCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltCopperOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltCopperOre", false);
        biomeBlacklistEmbellishcraftBasaltCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Copper Ore (Embellishcraft)").push("embellishcraft_gneiss_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissCopperOre", true);
        veinSizeEmbellishcraftGneissCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissCopperOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissCopperOre", 20, 0, 65536);
        minHeightEmbellishcraftGneissCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissCopperOre", 40, 0, 256);
        maxHeightEmbellishcraftGneissCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissCopperOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissCopperOre", false);
        temperatureBlacklistEmbellishcraftGneissCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissCopperOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissCopperOre", false);
        biomeBlacklistEmbellishcraftGneissCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Copper Ore (Embellishcraft)").push("embellishcraft_jade_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeCopperOre", true);
        veinSizeEmbellishcraftJadeCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeCopperOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeCopperOre", 20, 0, 65536);
        minHeightEmbellishcraftJadeCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeCopperOre", 40, 0, 256);
        maxHeightEmbellishcraftJadeCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeCopperOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeCopperOre", false);
        temperatureBlacklistEmbellishcraftJadeCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeCopperOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeCopperOre", false);
        biomeBlacklistEmbellishcraftJadeCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Copper Ore (Embellishcraft)").push("embellishcraft_larvikite_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteCopperOre", true);
        veinSizeEmbellishcraftLarvikiteCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteCopperOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteCopperOre", 20, 0, 65536);
        minHeightEmbellishcraftLarvikiteCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteCopperOre", 40, 0, 256);
        maxHeightEmbellishcraftLarvikiteCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteCopperOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteCopperOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteCopperOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteCopperOre", false);
        biomeBlacklistEmbellishcraftLarvikiteCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Copper Ore (Embellishcraft)").push("embellishcraft_marble_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleCopperOre", true);
        veinSizeEmbellishcraftMarbleCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleCopperOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleCopperOre", 20, 0, 65536);
        minHeightEmbellishcraftMarbleCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleCopperOre", 40, 0, 256);
        maxHeightEmbellishcraftMarbleCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleCopperOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleCopperOre", false);
        temperatureBlacklistEmbellishcraftMarbleCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleCopperOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleCopperOre", false);
        biomeBlacklistEmbellishcraftMarbleCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Copper Ore (Embellishcraft)").push("embellishcraft_slate_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateCopperOre", true);
        veinSizeEmbellishcraftSlateCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateCopperOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateCopperOre", 20, 0, 65536);
        minHeightEmbellishcraftSlateCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateCopperOre", 40, 0, 256);
        maxHeightEmbellishcraftSlateCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateCopperOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateCopperOre", false);
        temperatureBlacklistEmbellishcraftSlateCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateCopperOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateCopperOre", false);
        biomeBlacklistEmbellishcraftSlateCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Copper Ore").push("hardened_stone_copper_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneCopperOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneCopperOre", true);
        veinSizeHardenedStoneCopperOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneCopperOre", 9, 0, 65536);
        veinsPerChunkHardenedStoneCopperOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneCopperOre", 20, 0, 65536);
        minHeightHardenedStoneCopperOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneCopperOre", 40, 0, 256);
        maxHeightHardenedStoneCopperOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneCopperOre", 128, 0, 256);
        isTempWhitelistHardenedStoneCopperOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneCopperOre", false);
        temperatureBlacklistHardenedStoneCopperOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneCopperOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneCopperOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneCopperOre", false);
        biomeBlacklistHardenedStoneCopperOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistHardenedStoneCopperOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Copper.spec, Main.MOD_ID + "/copper.toml");
    }
}
