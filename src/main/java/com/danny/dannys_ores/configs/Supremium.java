package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Supremium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableSupremiumOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockSupremiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockSupremiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateSupremiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteSupremiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateSupremiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneSupremiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneSupremiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Supremium Ores").push("general");
        disableSupremiumOres = BUILDER.comment("If false, all supremium ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Supremium Ore").push("stone_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkStoneSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightStoneSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistStoneSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Supremium Ore").push("andesite_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkAndesiteSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightAndesiteSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistAndesiteSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Supremium Ore").push("diorite_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkDioriteSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightDioriteSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistDioriteSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Supremium Ore").push("granite_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGraniteSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightGraniteSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistGraniteSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Supremium Ore").push("netherrack_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkNetherrackSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightNetherrackSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightNetherrackSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Supremium Ore").push("end_stone_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEndStoneSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEndStoneSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Supremium Ore").push("sand_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Supremium Ore").push("red_sand_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Supremium Ore").push("gravel_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGravelSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightGravelSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Supremium Ore").push("sandstone_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandstoneSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandstoneSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Supremium Ore").push("red_sandstone_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandstoneSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandstoneSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Supremium Ore").push("blue_ice_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBlueIceSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBlueIceSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Supremium Ore").push("packed_ice_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkPackedIceSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightPackedIceSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Supremium Ore").push("bedrock_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockSupremiumOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockSupremiumOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Supremium Ore (Quark)").push("quark_basalt_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkBasaltSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkBasaltSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightQuarkBasaltSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Supremium Ore (Quark)").push("quark_limestone_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkLimestoneSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkLimestoneSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkLimestoneSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Supremium Ore (Quark)").push("quark_jasper_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkJasperSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkJasperSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkJasperSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Supremium Ore (Quark)").push("quark_marble_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkMarbleSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkMarbleSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkMarbleSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Supremium Ore (Quark)").push("quark_slate_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkSlateSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkSlateSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkSlateSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Supremium Ore (Embellishcraft)").push("embellishcraft_basalt_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftBasaltSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Supremium Ore (Embellishcraft)").push("embellishcraft_gneiss_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftGneissSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Supremium Ore (Embellishcraft)").push("embellishcraft_jade_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftJadeSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Supremium Ore (Embellishcraft)").push("embellishcraft_larvikite_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Supremium Ore (Embellishcraft)").push("embellishcraft_marble_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftMarbleSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Supremium Ore (Embellishcraft)").push("embellishcraft_slate_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftSlateSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Supremium Ore").push("hardened_stone_supremium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneSupremiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneSupremiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkHardenedStoneSupremiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightHardenedStoneSupremiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneSupremiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistHardenedStoneSupremiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneSupremiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneSupremiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneSupremiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Supremium.spec, Main.MOD_ID + "/supremium.toml");
    }
}
