package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.util.ArrayList;
import java.util.List;

public class Iron {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableIronOres;

    public static ForgeConfigSpec.BooleanValue enableStoneIronOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneIronOre;
    public static ForgeConfigSpec.IntValue minHeightStoneIronOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelStoneIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelStoneIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelStoneIronOre;
    public static ForgeConfigSpec.IntValue lightValueStoneIronOre;
    public static ForgeConfigSpec.IntValue minXpDropStoneIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropStoneIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceStoneIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeStoneIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionStoneIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsStoneIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandStoneIronOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteIronOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteIronOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteIronOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelAndesiteIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelAndesiteIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelAndesiteIronOre;
    public static ForgeConfigSpec.IntValue lightValueAndesiteIronOre;
    public static ForgeConfigSpec.IntValue minXpDropAndesiteIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropAndesiteIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceAndesiteIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeAndesiteIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionAndesiteIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectAndesiteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsAndesiteIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandAndesiteIronOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteIronOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteIronOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteIronOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelDioriteIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelDioriteIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelDioriteIronOre;
    public static ForgeConfigSpec.IntValue lightValueDioriteIronOre;
    public static ForgeConfigSpec.IntValue minXpDropDioriteIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropDioriteIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceDioriteIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeDioriteIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionDioriteIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectDioriteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsDioriteIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandDioriteIronOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteIronOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteIronOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteIronOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelGraniteIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelGraniteIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelGraniteIronOre;
    public static ForgeConfigSpec.IntValue lightValueGraniteIronOre;
    public static ForgeConfigSpec.IntValue minXpDropGraniteIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropGraniteIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceGraniteIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeGraniteIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionGraniteIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectGraniteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsGraniteIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandGraniteIronOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackIronOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackIronOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackIronOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelNetherrackIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelNetherrackIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelNetherrackIronOre;
    public static ForgeConfigSpec.IntValue lightValueNetherrackIronOre;
    public static ForgeConfigSpec.IntValue minXpDropNetherrackIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropNetherrackIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceNetherrackIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeNetherrackIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionNetherrackIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectNetherrackIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsNetherrackIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandNetherrackIronOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneIronOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneIronOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneIronOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelEndStoneIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelEndStoneIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelEndStoneIronOre;
    public static ForgeConfigSpec.IntValue lightValueEndStoneIronOre;
    public static ForgeConfigSpec.IntValue minXpDropEndStoneIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropEndStoneIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceEndStoneIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeEndStoneIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionEndStoneIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectEndStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsEndStoneIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandEndStoneIronOre;

    public static ForgeConfigSpec.BooleanValue enableSandIronOre;
    public static ForgeConfigSpec.IntValue veinSizeSandIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandIronOre;
    public static ForgeConfigSpec.IntValue minHeightSandIronOre;
    public static ForgeConfigSpec.IntValue maxHeightSandIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelSandIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelSandIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelSandIronOre;
    public static ForgeConfigSpec.IntValue lightValueSandIronOre;
    public static ForgeConfigSpec.IntValue minXpDropSandIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropSandIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceSandIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeSandIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionSandIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectSandIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsSandIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandSandIronOre;

    public static ForgeConfigSpec.BooleanValue enableGravelIronOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelIronOre;
    public static ForgeConfigSpec.IntValue minHeightGravelIronOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelGravelIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelGravelIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelGravelIronOre;
    public static ForgeConfigSpec.IntValue lightValueGravelIronOre;
    public static ForgeConfigSpec.IntValue minXpDropGravelIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropGravelIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceGravelIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeGravelIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionGravelIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectGravelIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsGravelIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandGravelIronOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneIronOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneIronOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelSandstoneIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelSandstoneIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelSandstoneIronOre;
    public static ForgeConfigSpec.IntValue lightValueSandstoneIronOre;
    public static ForgeConfigSpec.IntValue minXpDropSandstoneIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropSandstoneIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceSandstoneIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandSandstoneIronOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue harvestLevelRedSandstoneIronOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelRedSandstoneIronOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue lightValueRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue minXpDropRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue maxXpDropRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue explosionChanceRedSandstoneIronOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeRedSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionRedSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectRedSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsRedSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandRedSandstoneIronOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Iron Ores").push("iron_ores");
        enableIronOres = BUILDER.comment("Enable or disable all Iron Ore variants.").define("enableIronOres", true);
            BUILDER.comment("Stone Iron Ore").push("stone_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableStoneIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneIronOre", true);
            veinSizeStoneIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneIronOre", 8, 0, 65536);
            veinsPerChunkStoneIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneIronOre", 8, 0, 65536);
            minHeightStoneIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneIronOre", 0, 0, 256);
            maxHeightStoneIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneIronOre", 60, 0, 256);
            isTempWhitelistStoneIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneIronOre", false);
            temperatureBlacklistStoneIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneIronOre", new ArrayList<String>());
            isBiomeWhitelistStoneIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneIronOre", false);
            biomeBlacklistStoneIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelStoneIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelStoneIronOre", 1, 0, 2000000000);
            hardnessLevelStoneIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelStoneIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelStoneIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelStoneIronOre", 3.0, 0.0, 3600000.0);
            lightValueStoneIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueStoneIronOre", 0, 0, 15);
            minXpDropStoneIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropStoneIronOre", 0, 0, 100000);
            maxXpDropStoneIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropStoneIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceStoneIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceStoneIronOre", 0, 0, 1000);
            explosionRangeStoneIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeStoneIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionStoneIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionStoneIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectStoneIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectStoneIronOre", false);
            statusEffectsStoneIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsStoneIronOre", new ArrayList<String>());
            onlyInHandStoneIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandStoneIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Andesite Iron Ore").push("andesite_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableAndesiteIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteIronOre", true);
            veinSizeAndesiteIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteIronOre", 8, 0, 65536);
            veinsPerChunkAndesiteIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteIronOre", 8, 0, 65536);
            minHeightAndesiteIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteIronOre", 0, 0, 256);
            maxHeightAndesiteIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteIronOre", 60, 0, 256);
            isTempWhitelistAndesiteIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteIronOre", false);
            temperatureBlacklistAndesiteIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteIronOre", new ArrayList<String>());
            isBiomeWhitelistAndesiteIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteIronOre", false);
            biomeBlacklistAndesiteIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelAndesiteIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelAndesiteIronOre", 1, 0, 2000000000);
            hardnessLevelAndesiteIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelAndesiteIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelAndesiteIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelAndesiteIronOre", 3.0, 0.0, 3600000.0);
            lightValueAndesiteIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueAndesiteIronOre", 0, 0, 15);
            minXpDropAndesiteIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropAndesiteIronOre", 0, 0, 100000);
            maxXpDropAndesiteIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropAndesiteIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceAndesiteIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceAndesiteIronOre", 0, 0, 1000);
            explosionRangeAndesiteIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeAndesiteIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionAndesiteIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionAndesiteIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectAndesiteIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectAndesiteIronOre", false);
            statusEffectsAndesiteIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsAndesiteIronOre", new ArrayList<String>());
            onlyInHandAndesiteIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandAndesiteIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Diorite Iron Ore").push("diorite_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableDioriteIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteIronOre", true);
            veinSizeDioriteIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteIronOre", 8, 0, 65536);
            veinsPerChunkDioriteIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteIronOre", 8, 0, 65536);
            minHeightDioriteIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteIronOre", 0, 0, 256);
            maxHeightDioriteIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteIronOre", 60, 0, 256);
            isTempWhitelistDioriteIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteIronOre", false);
            temperatureBlacklistDioriteIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteIronOre", new ArrayList<String>());
            isBiomeWhitelistDioriteIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteIronOre", false);
            biomeBlacklistDioriteIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelDioriteIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelDioriteIronOre", 1, 0, 2000000000);
            hardnessLevelDioriteIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelDioriteIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelDioriteIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelDioriteIronOre", 3.0, 0.0, 3600000.0);
            lightValueDioriteIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueDioriteIronOre", 0, 0, 15);
            minXpDropDioriteIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropDioriteIronOre", 0, 0, 100000);
            maxXpDropDioriteIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropDioriteIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceDioriteIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceDioriteIronOre", 0, 0, 1000);
            explosionRangeDioriteIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeDioriteIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionDioriteIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionDioriteIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectDioriteIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectDioriteIronOre", false);
            statusEffectsDioriteIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsDioriteIronOre", new ArrayList<String>());
            onlyInHandDioriteIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandDioriteIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Granite Iron Ore").push("granite_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableGraniteIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteIronOre", true);
            veinSizeGraniteIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteIronOre", 8, 0, 65536);
            veinsPerChunkGraniteIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteIronOre", 8, 0, 65536);
            minHeightGraniteIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteIronOre", 0, 0, 256);
            maxHeightGraniteIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteIronOre", 60, 0, 256);
            isTempWhitelistGraniteIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteIronOre", false);
            temperatureBlacklistGraniteIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteIronOre", new ArrayList<String>());
            isBiomeWhitelistGraniteIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteIronOre", false);
            biomeBlacklistGraniteIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelGraniteIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelGraniteIronOre", 1, 0, 2000000000);
            hardnessLevelGraniteIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelGraniteIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelGraniteIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelGraniteIronOre", 3.0, 0.0, 3600000.0);
            lightValueGraniteIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueGraniteIronOre", 0, 0, 15);
            minXpDropGraniteIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropGraniteIronOre", 0, 0, 100000);
            maxXpDropGraniteIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropGraniteIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceGraniteIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceGraniteIronOre", 0, 0, 1000);
            explosionRangeGraniteIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeGraniteIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionGraniteIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionGraniteIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectGraniteIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectGraniteIronOre", false);
            statusEffectsGraniteIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsGraniteIronOre", new ArrayList<String>());
            onlyInHandGraniteIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandGraniteIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Netherrack Iron Ore").push("netherrack_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableNetherrackIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackIronOre", true);
            veinSizeNetherrackIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackIronOre", 8, 0, 65536);
            veinsPerChunkNetherrackIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackIronOre", 8, 0, 65536);
            minHeightNetherrackIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackIronOre", 0, 0, 256);
            maxHeightNetherrackIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackIronOre", 60, 0, 256);
            isTempWhitelistNetherrackIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackIronOre", false);
            temperatureBlacklistNetherrackIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackIronOre", new ArrayList<String>());
            isBiomeWhitelistNetherrackIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackIronOre", false);
            biomeBlacklistNetherrackIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelNetherrackIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelNetherrackIronOre", 1, 0, 2000000000);
            hardnessLevelNetherrackIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelNetherrackIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelNetherrackIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelNetherrackIronOre", 3.0, 0.0, 3600000.0);
            lightValueNetherrackIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueNetherrackIronOre", 0, 0, 15);
            minXpDropNetherrackIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropNetherrackIronOre", 0, 0, 100000);
            maxXpDropNetherrackIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropNetherrackIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceNetherrackIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceNetherrackIronOre", 0, 0, 1000);
            explosionRangeNetherrackIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeNetherrackIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionNetherrackIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionNetherrackIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectNetherrackIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectNetherrackIronOre", false);
            statusEffectsNetherrackIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsNetherrackIronOre", new ArrayList<String>());
            onlyInHandNetherrackIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandNetherrackIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("End Stone Iron Ore").push("end_stone_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableEndStoneIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneIronOre", true);
            veinSizeEndStoneIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneIronOre", 8, 0, 65536);
            veinsPerChunkEndStoneIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneIronOre", 8, 0, 65536);
            minHeightEndStoneIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneIronOre", 0, 0, 256);
            maxHeightEndStoneIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneIronOre", 60, 0, 256);
            isTempWhitelistEndStoneIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneIronOre", false);
            temperatureBlacklistEndStoneIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneIronOre", new ArrayList<String>());
            isBiomeWhitelistEndStoneIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneIronOre", false);
            biomeBlacklistEndStoneIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelEndStoneIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelEndStoneIronOre", 1, 0, 2000000000);
            hardnessLevelEndStoneIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelEndStoneIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelEndStoneIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelEndStoneIronOre", 3.0, 0.0, 3600000.0);
            lightValueEndStoneIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueEndStoneIronOre", 0, 0, 15);
            minXpDropEndStoneIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropEndStoneIronOre", 0, 0, 100000);
            maxXpDropEndStoneIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropEndStoneIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceEndStoneIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceEndStoneIronOre", 0, 0, 1000);
            explosionRangeEndStoneIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeEndStoneIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionEndStoneIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionEndStoneIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectEndStoneIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectEndStoneIronOre", false);
            statusEffectsEndStoneIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsEndStoneIronOre", new ArrayList<String>());
            onlyInHandEndStoneIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandEndStoneIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sand Iron Ore").push("sand_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableSandIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandIronOre", true);
            veinSizeSandIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandIronOre", 8, 0, 65536);
            veinsPerChunkSandIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandIronOre", 8, 0, 65536);
            minHeightSandIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandIronOre", 0, 0, 256);
            maxHeightSandIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandIronOre", 60, 0, 256);
            isTempWhitelistSandIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandIronOre", false);
            temperatureBlacklistSandIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandIronOre", new ArrayList<String>());
            isBiomeWhitelistSandIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandIronOre", false);
            biomeBlacklistSandIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelSandIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelSandIronOre", 1, 0, 2000000000);
            hardnessLevelSandIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelSandIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelSandIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelSandIronOre", 3.0, 0.0, 3600000.0);
            lightValueSandIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueSandIronOre", 0, 0, 15);
            minXpDropSandIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropSandIronOre", 0, 0, 100000);
            maxXpDropSandIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropSandIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceSandIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceSandIronOre", 0, 0, 1000);
            explosionRangeSandIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeSandIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionSandIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionSandIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectSandIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectSandIronOre", false);
            statusEffectsSandIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsSandIronOre", new ArrayList<String>());
            onlyInHandSandIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandSandIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Gravel Iron Ore").push("gravel_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableGravelIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelIronOre", true);
            veinSizeGravelIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelIronOre", 8, 0, 65536);
            veinsPerChunkGravelIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelIronOre", 8, 0, 65536);
            minHeightGravelIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelIronOre", 0, 0, 256);
            maxHeightGravelIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelIronOre", 60, 0, 256);
            isTempWhitelistGravelIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelIronOre", false);
            temperatureBlacklistGravelIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelIronOre", new ArrayList<String>());
            isBiomeWhitelistGravelIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelIronOre", false);
            biomeBlacklistGravelIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelGravelIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelGravelIronOre", 1, 0, 2000000000);
            hardnessLevelGravelIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelGravelIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelGravelIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelGravelIronOre", 3.0, 0.0, 3600000.0);
            lightValueGravelIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueGravelIronOre", 0, 0, 15);
            minXpDropGravelIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropGravelIronOre", 0, 0, 100000);
            maxXpDropGravelIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropGravelIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceGravelIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceGravelIronOre", 0, 0, 1000);
            explosionRangeGravelIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeGravelIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionGravelIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionGravelIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectGravelIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectGravelIronOre", false);
            statusEffectsGravelIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsGravelIronOre", new ArrayList<String>());
            onlyInHandGravelIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandGravelIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sandstone Iron Ore").push("sandstone_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableSandstoneIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneIronOre", true);
            veinSizeSandstoneIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneIronOre", 8, 0, 65536);
            veinsPerChunkSandstoneIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneIronOre", 8, 0, 65536);
            minHeightSandstoneIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneIronOre", 0, 0, 256);
            maxHeightSandstoneIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneIronOre", 60, 0, 256);
            isTempWhitelistSandstoneIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneIronOre", false);
            temperatureBlacklistSandstoneIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneIronOre", new ArrayList<String>());
            isBiomeWhitelistSandstoneIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneIronOre", false);
            biomeBlacklistSandstoneIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelSandstoneIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelSandstoneIronOre", 1, 0, 2000000000);
            hardnessLevelSandstoneIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelSandstoneIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelSandstoneIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelSandstoneIronOre", 3.0, 0.0, 3600000.0);
            lightValueSandstoneIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueSandstoneIronOre", 0, 0, 15);
            minXpDropSandstoneIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropSandstoneIronOre", 0, 0, 100000);
            maxXpDropSandstoneIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropSandstoneIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceSandstoneIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceSandstoneIronOre", 0, 0, 1000);
            explosionRangeSandstoneIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeSandstoneIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionSandstoneIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionSandstoneIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectSandstoneIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectSandstoneIronOre", false);
            statusEffectsSandstoneIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsSandstoneIronOre", new ArrayList<String>());
            onlyInHandSandstoneIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandSandstoneIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Red Sandstone Iron Ore").push("red_sandstone_iron_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableRedSandstoneIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneIronOre", true);
            veinSizeRedSandstoneIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneIronOre", 8, 0, 65536);
            veinsPerChunkRedSandstoneIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneIronOre", 8, 0, 65536);
            minHeightRedSandstoneIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneIronOre", 0, 0, 256);
            maxHeightRedSandstoneIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneIronOre", 60, 0, 256);
            isTempWhitelistRedSandstoneIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneIronOre", false);
            temperatureBlacklistRedSandstoneIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneIronOre", new ArrayList<String>());
            isBiomeWhitelistRedSandstoneIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneIronOre", false);
            biomeBlacklistRedSandstoneIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneIronOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelRedSandstoneIronOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelRedSandstoneIronOre", 1, 0, 2000000000);
            hardnessLevelRedSandstoneIronOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelRedSandstoneIronOre", 3.0, -1.0, 3600000.0);
            resistanceLevelRedSandstoneIronOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelRedSandstoneIronOre", 3.0, 0.0, 3600000.0);
            lightValueRedSandstoneIronOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueRedSandstoneIronOre", 0, 0, 15);
            minXpDropRedSandstoneIronOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropRedSandstoneIronOre", 0, 0, 100000);
            maxXpDropRedSandstoneIronOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropRedSandstoneIronOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceRedSandstoneIronOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceRedSandstoneIronOre", 0, 0, 1000);
            explosionRangeRedSandstoneIronOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeRedSandstoneIronOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionRedSandstoneIronOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionRedSandstoneIronOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectRedSandstoneIronOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectRedSandstoneIronOre", false);
            statusEffectsRedSandstoneIronOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsRedSandstoneIronOre", new ArrayList<String>());
            onlyInHandRedSandstoneIronOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandRedSandstoneIronOre", false);
            BUILDER.pop();
            BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Iron.spec, Main.MOD_ID + "/iron.toml");
        final CommentedFileConfig configData = CommentedFileConfig.builder(FMLPaths.CONFIGDIR.get().resolve(Main.MOD_ID + "/iron.toml"))
                .sync()
                .autosave()
                .writingMode(WritingMode.REPLACE)
                .build();
        configData.load();
        spec.setConfig(configData);
    }
}
