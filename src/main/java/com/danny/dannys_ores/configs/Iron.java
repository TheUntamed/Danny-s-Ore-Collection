package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.util.ArrayList;
import java.util.List;

public class Iron {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableIronOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaIronOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaIronOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaIronOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaIronOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteIronOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteIronOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteIronOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteIronOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteIronOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteIronOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteIronOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteIronOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteIronOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteIronOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteIronOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteIronOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackIronOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackIronOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackIronOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackIronOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneIronOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneIronOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneIronOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneIronOre;

    public static ForgeConfigSpec.BooleanValue enableSandIronOre;
    public static ForgeConfigSpec.IntValue veinSizeSandIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandIronOre;
    public static ForgeConfigSpec.IntValue minHeightSandIronOre;
    public static ForgeConfigSpec.IntValue maxHeightSandIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandIronOre;

    public static ForgeConfigSpec.BooleanValue enableGravelIronOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelIronOre;
    public static ForgeConfigSpec.IntValue minHeightGravelIronOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelIronOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneIronOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneIronOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneIronOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneIronOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneIronOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneIronOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneIronOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Iron Ores").push("iron_ores");
        enableIronOres = BUILDER.comment("Enable or disable all Iron Ore variants.").define("enableIronOres", true);
        BUILDER.comment("Vanilla (Stone) Iron Ore").push("vanilla_stone_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaIronOre", true);
        veinSizeVanillaIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaIronOre", 9, 0, 65536);
        veinsPerChunkVanillaIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaIronOre", 20, 0, 65536);
        minHeightVanillaIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaIronOre", 0, 0, 256);
        maxHeightVanillaIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaIronOre", 64, 0, 256);
        isTempWhitelistVanillaIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaIronOre", false);
        temperatureBlacklistVanillaIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaIronOre", new ArrayList<String>());
        isBiomeWhitelistVanillaIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaIronOre", false);
        biomeBlacklistVanillaIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Iron Ore").push("andesite_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteIronOre", true);
        veinSizeAndesiteIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteIronOre", 9, 0, 65536);
        veinsPerChunkAndesiteIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteIronOre", 20, 0, 65536);
        minHeightAndesiteIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteIronOre", 0, 0, 256);
        maxHeightAndesiteIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteIronOre", 64, 0, 256);
        isTempWhitelistAndesiteIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteIronOre", false);
        temperatureBlacklistAndesiteIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteIronOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteIronOre", false);
        biomeBlacklistAndesiteIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Iron Ore").push("diorite_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteIronOre", true);
        veinSizeDioriteIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteIronOre", 9, 0, 65536);
        veinsPerChunkDioriteIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteIronOre", 20, 0, 65536);
        minHeightDioriteIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteIronOre", 0, 0, 256);
        maxHeightDioriteIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteIronOre", 64, 0, 256);
        isTempWhitelistDioriteIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteIronOre", false);
        temperatureBlacklistDioriteIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteIronOre", new ArrayList<String>());
        isBiomeWhitelistDioriteIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteIronOre", false);
        biomeBlacklistDioriteIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Iron Ore").push("granite_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteIronOre", true);
        veinSizeGraniteIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteIronOre", 9, 0, 65536);
        veinsPerChunkGraniteIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteIronOre", 20, 0, 65536);
        minHeightGraniteIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteIronOre", 0, 0, 256);
        maxHeightGraniteIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteIronOre", 64, 0, 256);
        isTempWhitelistGraniteIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteIronOre", false);
        temperatureBlacklistGraniteIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteIronOre", new ArrayList<String>());
        isBiomeWhitelistGraniteIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteIronOre", false);
        biomeBlacklistGraniteIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Iron Ore").push("netherrack_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackIronOre", true);
        veinSizeNetherrackIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackIronOre", 4, 0, 65536);
        veinsPerChunkNetherrackIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackIronOre", 10, 0, 65536);
        minHeightNetherrackIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackIronOre", 10, 0, 256);
        maxHeightNetherrackIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackIronOre", 128, 0, 256);
        isTempWhitelistNetherrackIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackIronOre", false);
        temperatureBlacklistNetherrackIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackIronOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackIronOre", false);
        biomeBlacklistNetherrackIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Iron Ore").push("end_stone_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneIronOre", true);
        veinSizeEndStoneIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneIronOre", 4, 0, 65536);
        veinsPerChunkEndStoneIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneIronOre", 10, 0, 65536);
        minHeightEndStoneIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneIronOre", 0, 0, 256);
        maxHeightEndStoneIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneIronOre", 128, 0, 256);
        isTempWhitelistEndStoneIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneIronOre", false);
        temperatureBlacklistEndStoneIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneIronOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneIronOre", false);
        biomeBlacklistEndStoneIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Iron Ore").push("sand_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandIronOre", true);
        veinSizeSandIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandIronOre", 9, 0, 65536);
        veinsPerChunkSandIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandIronOre", 10, 0, 65536);
        minHeightSandIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandIronOre", 0, 0, 256);
        maxHeightSandIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandIronOre", 64, 0, 256);
        isTempWhitelistSandIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandIronOre", false);
        temperatureBlacklistSandIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandIronOre", new ArrayList<String>());
        isBiomeWhitelistSandIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandIronOre", false);
        biomeBlacklistSandIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Iron Ore").push("gravel_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelIronOre", true);
        veinSizeGravelIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelIronOre", 9, 0, 65536);
        veinsPerChunkGravelIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelIronOre", 10, 0, 65536);
        minHeightGravelIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelIronOre", 0, 0, 256);
        maxHeightGravelIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelIronOre", 64, 0, 256);
        isTempWhitelistGravelIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelIronOre", false);
        temperatureBlacklistGravelIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelIronOre", new ArrayList<String>());
        isBiomeWhitelistGravelIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelIronOre", false);
        biomeBlacklistGravelIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Iron Ore").push("sandstone_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneIronOre", true);
        veinSizeSandstoneIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneIronOre", 9, 0, 65536);
        veinsPerChunkSandstoneIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneIronOre", 10, 0, 65536);
        minHeightSandstoneIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneIronOre", 0, 0, 256);
        maxHeightSandstoneIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneIronOre", 64, 0, 256);
        isTempWhitelistSandstoneIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneIronOre", false);
        temperatureBlacklistSandstoneIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneIronOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneIronOre", false);
        biomeBlacklistSandstoneIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Iron Ore").push("red_sandstone_iron_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneIronOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneIronOre", true);
        veinSizeRedSandstoneIronOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneIronOre", 9, 0, 65536);
        veinsPerChunkRedSandstoneIronOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneIronOre", 10, 0, 65536);
        minHeightRedSandstoneIronOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneIronOre", 0, 0, 256);
        maxHeightRedSandstoneIronOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneIronOre", 64, 0, 256);
        isTempWhitelistRedSandstoneIronOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneIronOre", false);
        temperatureBlacklistRedSandstoneIronOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneIronOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneIronOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneIronOre", false);
        biomeBlacklistRedSandstoneIronOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneIronOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Iron.spec, Main.MOD_ID + "/iron.toml");
    }
}
