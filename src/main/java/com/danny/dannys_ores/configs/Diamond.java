package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Diamond {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableDiamondOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableSandDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightSandDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDiamondOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDiamondOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDiamondOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDiamondOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDiamondOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDiamondOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Diamond Ores").push("diamond_ores");
        enableDiamondOres = BUILDER.comment("Enable or disable all Diamond Ore variants.").define("enableDiamondOres", true);
        BUILDER.comment("Vanilla (Stone) Diamond Ore").push("vanilla_stone_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaDiamondOre", true);
        veinSizeVanillaDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaDiamondOre", 8, 0, 65536);
        veinsPerChunkVanillaDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaDiamondOre", 1, 0, 65536);
        minHeightVanillaDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaDiamondOre", 0, 0, 256);
        maxHeightVanillaDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaDiamondOre", 16, 0, 256);
        isTempWhitelistVanillaDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaDiamondOre", false);
        temperatureBlacklistVanillaDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaDiamondOre", new ArrayList<String>());
        isBiomeWhitelistVanillaDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaDiamondOre", false);
        biomeBlacklistVanillaDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Diamond Ore").push("andesite_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteDiamondOre", true);
        veinSizeAndesiteDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteDiamondOre", 8, 0, 65536);
        veinsPerChunkAndesiteDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteDiamondOre", 1, 0, 65536);
        minHeightAndesiteDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteDiamondOre", 0, 0, 256);
        maxHeightAndesiteDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteDiamondOre", 16, 0, 256);
        isTempWhitelistAndesiteDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteDiamondOre", false);
        temperatureBlacklistAndesiteDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteDiamondOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteDiamondOre", false);
        biomeBlacklistAndesiteDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Diamond Ore").push("diorite_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteDiamondOre", true);
        veinSizeDioriteDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteDiamondOre", 8, 0, 65536);
        veinsPerChunkDioriteDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteDiamondOre", 1, 0, 65536);
        minHeightDioriteDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteDiamondOre", 0, 0, 256);
        maxHeightDioriteDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteDiamondOre", 16, 0, 256);
        isTempWhitelistDioriteDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteDiamondOre", false);
        temperatureBlacklistDioriteDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteDiamondOre", new ArrayList<String>());
        isBiomeWhitelistDioriteDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteDiamondOre", false);
        biomeBlacklistDioriteDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Diamond Ore").push("granite_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteDiamondOre", true);
        veinSizeGraniteDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteDiamondOre", 8, 0, 65536);
        veinsPerChunkGraniteDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteDiamondOre", 1, 0, 65536);
        minHeightGraniteDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteDiamondOre", 0, 0, 256);
        maxHeightGraniteDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteDiamondOre", 16, 0, 256);
        isTempWhitelistGraniteDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteDiamondOre", false);
        temperatureBlacklistGraniteDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteDiamondOre", new ArrayList<String>());
        isBiomeWhitelistGraniteDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteDiamondOre", false);
        biomeBlacklistGraniteDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Diamond Ore").push("netherrack_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackDiamondOre", true);
        veinSizeNetherrackDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackDiamondOre", 8, 0, 65536);
        veinsPerChunkNetherrackDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackDiamondOre", 1, 0, 65536);
        minHeightNetherrackDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackDiamondOre", 96, 0, 256);
        maxHeightNetherrackDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackDiamondOre", 128, 0, 256);
        isTempWhitelistNetherrackDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackDiamondOre", false);
        temperatureBlacklistNetherrackDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackDiamondOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackDiamondOre", false);
        biomeBlacklistNetherrackDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Diamond Ore").push("end_stone_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneDiamondOre", true);
        veinSizeEndStoneDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneDiamondOre", 8, 0, 65536);
        veinsPerChunkEndStoneDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneDiamondOre", 1, 0, 65536);
        minHeightEndStoneDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneDiamondOre", 0, 0, 256);
        maxHeightEndStoneDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneDiamondOre", 32, 0, 256);
        isTempWhitelistEndStoneDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneDiamondOre", false);
        temperatureBlacklistEndStoneDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneDiamondOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneDiamondOre", false);
        biomeBlacklistEndStoneDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Diamond Ore").push("sand_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandDiamondOre", true);
        veinSizeSandDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandDiamondOre", 8, 0, 65536);
        veinsPerChunkSandDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandDiamondOre", 1, 0, 65536);
        minHeightSandDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandDiamondOre", 0, 0, 256);
        maxHeightSandDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandDiamondOre", 128, 0, 256);
        isTempWhitelistSandDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandDiamondOre", false);
        temperatureBlacklistSandDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandDiamondOre", new ArrayList<String>());
        isBiomeWhitelistSandDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandDiamondOre", false);
        biomeBlacklistSandDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Diamond Ore").push("gravel_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelDiamondOre", true);
        veinSizeGravelDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelDiamondOre", 8, 0, 65536);
        veinsPerChunkGravelDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelDiamondOre", 1, 0, 65536);
        minHeightGravelDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelDiamondOre", 0, 0, 256);
        maxHeightGravelDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelDiamondOre", 128, 0, 256);
        isTempWhitelistGravelDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelDiamondOre", false);
        temperatureBlacklistGravelDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelDiamondOre", new ArrayList<String>());
        isBiomeWhitelistGravelDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelDiamondOre", false);
        biomeBlacklistGravelDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Diamond Ore").push("sandstone_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneDiamondOre", true);
        veinSizeSandstoneDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneDiamondOre", 8, 0, 65536);
        veinsPerChunkSandstoneDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneDiamondOre", 1, 0, 65536);
        minHeightSandstoneDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneDiamondOre", 0, 0, 256);
        maxHeightSandstoneDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneDiamondOre", 128, 0, 256);
        isTempWhitelistSandstoneDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneDiamondOre", false);
        temperatureBlacklistSandstoneDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneDiamondOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneDiamondOre", false);
        biomeBlacklistSandstoneDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Diamond Ore").push("red_sandstone_diamond_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneDiamondOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneDiamondOre", true);
        veinSizeRedSandstoneDiamondOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneDiamondOre", 8, 0, 65536);
        veinsPerChunkRedSandstoneDiamondOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneDiamondOre", 1, 0, 65536);
        minHeightRedSandstoneDiamondOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneDiamondOre", 0, 0, 256);
        maxHeightRedSandstoneDiamondOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneDiamondOre", 128, 0, 256);
        isTempWhitelistRedSandstoneDiamondOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneDiamondOre", false);
        temperatureBlacklistRedSandstoneDiamondOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneDiamondOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDiamondOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneDiamondOre", false);
        biomeBlacklistRedSandstoneDiamondOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneDiamondOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Diamond.spec, Main.MOD_ID + "/diamond.toml");
    }
}
