package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class BlackQuartz {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableBlackQuartzOres;

    public static ForgeConfigSpec.BooleanValue enableStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGravelBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGravelBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceBlackQuartzOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockBlackQuartzOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockBlackQuartzOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateBlackQuartzOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteBlackQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateBlackQuartzOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneBlackQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneBlackQuartzOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Black Quartz Ores").push("black_quartz_ores");
        enableBlackQuartzOres = BUILDER.comment("Enable or disable all Black Quartz Ore variants.").define("enableBlackQuartzOres", true);
        BUILDER.comment("Stone Black Quartz Ore").push("stone_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneBlackQuartzOre", true);
        veinSizeStoneBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkStoneBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneBlackQuartzOre", 2, 0, 65536);
        minHeightStoneBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneBlackQuartzOre", 0, 0, 256);
        maxHeightStoneBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneBlackQuartzOre", 32, 0, 256);
        isTempWhitelistStoneBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneBlackQuartzOre", false);
        temperatureBlacklistStoneBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistStoneBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneBlackQuartzOre", false);
        biomeBlacklistStoneBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Black Quartz Ore").push("andesite_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteBlackQuartzOre", true);
        veinSizeAndesiteBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkAndesiteBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteBlackQuartzOre", 2, 0, 65536);
        minHeightAndesiteBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteBlackQuartzOre", 0, 0, 256);
        maxHeightAndesiteBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteBlackQuartzOre", 32, 0, 256);
        isTempWhitelistAndesiteBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteBlackQuartzOre", false);
        temperatureBlacklistAndesiteBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteBlackQuartzOre", false);
        biomeBlacklistAndesiteBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Black Quartz Ore").push("diorite_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteBlackQuartzOre", true);
        veinSizeDioriteBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkDioriteBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteBlackQuartzOre", 2, 0, 65536);
        minHeightDioriteBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteBlackQuartzOre", 0, 0, 256);
        maxHeightDioriteBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteBlackQuartzOre", 32, 0, 256);
        isTempWhitelistDioriteBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteBlackQuartzOre", false);
        temperatureBlacklistDioriteBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistDioriteBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteBlackQuartzOre", false);
        biomeBlacklistDioriteBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Black Quartz Ore").push("granite_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteBlackQuartzOre", true);
        veinSizeGraniteBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkGraniteBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteBlackQuartzOre", 2, 0, 65536);
        minHeightGraniteBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteBlackQuartzOre", 0, 0, 256);
        maxHeightGraniteBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteBlackQuartzOre", 32, 0, 256);
        isTempWhitelistGraniteBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteBlackQuartzOre", false);
        temperatureBlacklistGraniteBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistGraniteBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteBlackQuartzOre", false);
        biomeBlacklistGraniteBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Black Quartz Ore").push("netherrack_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackBlackQuartzOre", true);
        veinSizeNetherrackBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackBlackQuartzOre", 7, 0, 65536);
        veinsPerChunkNetherrackBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackBlackQuartzOre", 8, 0, 65536);
        minHeightNetherrackBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackBlackQuartzOre", 10, 0, 256);
        maxHeightNetherrackBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackBlackQuartzOre", 128, 0, 256);
        isTempWhitelistNetherrackBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackBlackQuartzOre", false);
        temperatureBlacklistNetherrackBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackBlackQuartzOre", false);
        biomeBlacklistNetherrackBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Black Quartz Ore").push("end_stone_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneBlackQuartzOre", true);
        veinSizeEndStoneBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkEndStoneBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneBlackQuartzOre", 2, 0, 65536);
        minHeightEndStoneBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneBlackQuartzOre", 0, 0, 256);
        maxHeightEndStoneBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneBlackQuartzOre", 64, 0, 256);
        isTempWhitelistEndStoneBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneBlackQuartzOre", false);
        temperatureBlacklistEndStoneBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneBlackQuartzOre", false);
        biomeBlacklistEndStoneBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Black Quartz Ore").push("sand_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandBlackQuartzOre", true);
        veinSizeSandBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandBlackQuartzOre", 3, 0, 65536);
        veinsPerChunkSandBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandBlackQuartzOre", 2, 0, 65536);
        minHeightSandBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandBlackQuartzOre", 0, 0, 256);
        maxHeightSandBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandBlackQuartzOre", 128, 0, 256);
        isTempWhitelistSandBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandBlackQuartzOre", false);
        temperatureBlacklistSandBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistSandBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandBlackQuartzOre", false);
        biomeBlacklistSandBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Black Quartz Ore").push("red_sand_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandBlackQuartzOre", true);
        veinSizeRedSandBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandBlackQuartzOre", 3, 0, 65536);
        veinsPerChunkRedSandBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandBlackQuartzOre", 2, 0, 65536);
        minHeightRedSandBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandBlackQuartzOre", 0, 0, 256);
        maxHeightRedSandBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandBlackQuartzOre", 128, 0, 256);
        isTempWhitelistRedSandBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandBlackQuartzOre", false);
        temperatureBlacklistRedSandBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistRedSandBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandBlackQuartzOre", false);
        biomeBlacklistRedSandBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Black Quartz Ore").push("gravel_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelBlackQuartzOre", true);
        veinSizeGravelBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelBlackQuartzOre", 3, 0, 65536);
        veinsPerChunkGravelBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelBlackQuartzOre", 2, 0, 65536);
        minHeightGravelBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelBlackQuartzOre", 0, 0, 256);
        maxHeightGravelBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelBlackQuartzOre", 128, 0, 256);
        isTempWhitelistGravelBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelBlackQuartzOre", false);
        temperatureBlacklistGravelBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistGravelBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelBlackQuartzOre", false);
        biomeBlacklistGravelBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Black Quartz Ore").push("sandstone_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneBlackQuartzOre", true);
        veinSizeSandstoneBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneBlackQuartzOre", 3, 0, 65536);
        veinsPerChunkSandstoneBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneBlackQuartzOre", 2, 0, 65536);
        minHeightSandstoneBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneBlackQuartzOre", 0, 0, 256);
        maxHeightSandstoneBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneBlackQuartzOre", 128, 0, 256);
        isTempWhitelistSandstoneBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneBlackQuartzOre", false);
        temperatureBlacklistSandstoneBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneBlackQuartzOre", false);
        biomeBlacklistSandstoneBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Black Quartz Ore").push("red_sandstone_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneBlackQuartzOre", true);
        veinSizeRedSandstoneBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneBlackQuartzOre", 3, 0, 65536);
        veinsPerChunkRedSandstoneBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneBlackQuartzOre", 2, 0, 65536);
        minHeightRedSandstoneBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneBlackQuartzOre", 0, 0, 256);
        maxHeightRedSandstoneBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneBlackQuartzOre", 128, 0, 256);
        isTempWhitelistRedSandstoneBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneBlackQuartzOre", false);
        temperatureBlacklistRedSandstoneBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneBlackQuartzOre", false);
        biomeBlacklistRedSandstoneBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Black Quartz Ore").push("blue_ice_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceBlackQuartzOre", true);
        veinSizeBlueIceBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceBlackQuartzOre", 3, 0, 65536);
        veinsPerChunkBlueIceBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceBlackQuartzOre", 2, 0, 65536);
        minHeightBlueIceBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceBlackQuartzOre", 0, 0, 256);
        maxHeightBlueIceBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceBlackQuartzOre", 128, 0, 256);
        isTempWhitelistBlueIceBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceBlackQuartzOre", false);
        temperatureBlacklistBlueIceBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceBlackQuartzOre", false);
        biomeBlacklistBlueIceBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBlueIceBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Black Quartz Ore").push("packed_ice_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceBlackQuartzOre", true);
        veinSizePackedIceBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceBlackQuartzOre", 3, 0, 65536);
        veinsPerChunkPackedIceBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceBlackQuartzOre", 2, 0, 65536);
        minHeightPackedIceBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceBlackQuartzOre", 0, 0, 256);
        maxHeightPackedIceBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceBlackQuartzOre", 128, 0, 256);
        isTempWhitelistPackedIceBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceBlackQuartzOre", false);
        temperatureBlacklistPackedIceBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceBlackQuartzOre", false);
        biomeBlacklistPackedIceBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistPackedIceBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Black Quartz Ore").push("bedrock_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockBlackQuartzOre", true);
        veinSizeBedrockBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockBlackQuartzOre", 1, 0, 65536);
        veinsPerChunkBedrockBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockBlackQuartzOre", 1, 0, 65536);
        minHeightBedrockBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockBlackQuartzOre", 0, 0, 256);
        maxHeightBedrockBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockBlackQuartzOre", 256, 0, 256);
        isTempWhitelistBedrockBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockBlackQuartzOre", false);
        temperatureBlacklistBedrockBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistBedrockBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockBlackQuartzOre", false);
        biomeBlacklistBedrockBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBedrockBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockBlackQuartzOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockBlackQuartzOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Black Quartz Ore (Quark)").push("quark_basalt_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltBlackQuartzOre", true);
        veinSizeQuarkBasaltBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltBlackQuartzOre", 7, 0, 65536);
        veinsPerChunkQuarkBasaltBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltBlackQuartzOre", 8, 0, 65536);
        minHeightQuarkBasaltBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltBlackQuartzOre", 10, 0, 256);
        maxHeightQuarkBasaltBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltBlackQuartzOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltBlackQuartzOre", false);
        temperatureBlacklistQuarkBasaltBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltBlackQuartzOre", false);
        biomeBlacklistQuarkBasaltBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Black Quartz Ore (Quark)").push("quark_limestone_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneBlackQuartzOre", true);
        veinSizeQuarkLimestoneBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkQuarkLimestoneBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneBlackQuartzOre", 2, 0, 65536);
        minHeightQuarkLimestoneBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneBlackQuartzOre", 0, 0, 256);
        maxHeightQuarkLimestoneBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneBlackQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkLimestoneBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneBlackQuartzOre", false);
        temperatureBlacklistQuarkLimestoneBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneBlackQuartzOre", false);
        biomeBlacklistQuarkLimestoneBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Black Quartz Ore (Quark)").push("quark_jasper_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperBlackQuartzOre", true);
        veinSizeQuarkJasperBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkQuarkJasperBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperBlackQuartzOre", 2, 0, 65536);
        minHeightQuarkJasperBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperBlackQuartzOre", 0, 0, 256);
        maxHeightQuarkJasperBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperBlackQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkJasperBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperBlackQuartzOre", false);
        temperatureBlacklistQuarkJasperBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperBlackQuartzOre", false);
        biomeBlacklistQuarkJasperBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Black Quartz Ore (Quark)").push("quark_marble_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleBlackQuartzOre", true);
        veinSizeQuarkMarbleBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkQuarkMarbleBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleBlackQuartzOre", 2, 0, 65536);
        minHeightQuarkMarbleBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleBlackQuartzOre", 0, 0, 256);
        maxHeightQuarkMarbleBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleBlackQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkMarbleBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleBlackQuartzOre", false);
        temperatureBlacklistQuarkMarbleBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleBlackQuartzOre", false);
        biomeBlacklistQuarkMarbleBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Black Quartz Ore (Quark)").push("quark_slate_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateBlackQuartzOre", true);
        veinSizeQuarkSlateBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkQuarkSlateBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateBlackQuartzOre", 2, 0, 65536);
        minHeightQuarkSlateBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateBlackQuartzOre", 0, 0, 256);
        maxHeightQuarkSlateBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateBlackQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkSlateBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateBlackQuartzOre", false);
        temperatureBlacklistQuarkSlateBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateBlackQuartzOre", false);
        biomeBlacklistQuarkSlateBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Black Quartz Ore (Embellishcraft)").push("embellishcraft_basalt_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltBlackQuartzOre", true);
        veinSizeEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltBlackQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltBlackQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltBlackQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltBlackQuartzOre", false);
        temperatureBlacklistEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltBlackQuartzOre", false);
        biomeBlacklistEmbellishcraftBasaltBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Black Quartz Ore (Embellishcraft)").push("embellishcraft_gneiss_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissBlackQuartzOre", true);
        veinSizeEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissBlackQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissBlackQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissBlackQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissBlackQuartzOre", false);
        temperatureBlacklistEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissBlackQuartzOre", false);
        biomeBlacklistEmbellishcraftGneissBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Black Quartz Ore (Embellishcraft)").push("embellishcraft_jade_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeBlackQuartzOre", true);
        veinSizeEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeBlackQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeBlackQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeBlackQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeBlackQuartzOre", false);
        temperatureBlacklistEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeBlackQuartzOre", false);
        biomeBlacklistEmbellishcraftJadeBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Black Quartz Ore (Embellishcraft)").push("embellishcraft_larvikite_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteBlackQuartzOre", true);
        veinSizeEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteBlackQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteBlackQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteBlackQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteBlackQuartzOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteBlackQuartzOre", false);
        biomeBlacklistEmbellishcraftLarvikiteBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Black Quartz Ore (Embellishcraft)").push("embellishcraft_marble_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleBlackQuartzOre", true);
        veinSizeEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleBlackQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleBlackQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleBlackQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleBlackQuartzOre", false);
        temperatureBlacklistEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleBlackQuartzOre", false);
        biomeBlacklistEmbellishcraftMarbleBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Black Quartz Ore (Embellishcraft)").push("embellishcraft_slate_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateBlackQuartzOre", true);
        veinSizeEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateBlackQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateBlackQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateBlackQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateBlackQuartzOre", false);
        temperatureBlacklistEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateBlackQuartzOre", false);
        biomeBlacklistEmbellishcraftSlateBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Black Quartz Ore").push("hardened_stone_black_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneBlackQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneBlackQuartzOre", true);
        veinSizeHardenedStoneBlackQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneBlackQuartzOre", 5, 0, 65536);
        veinsPerChunkHardenedStoneBlackQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneBlackQuartzOre", 2, 0, 65536);
        minHeightHardenedStoneBlackQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneBlackQuartzOre", 0, 0, 256);
        maxHeightHardenedStoneBlackQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneBlackQuartzOre", 32, 0, 256);
        isTempWhitelistHardenedStoneBlackQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneBlackQuartzOre", false);
        temperatureBlacklistHardenedStoneBlackQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneBlackQuartzOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneBlackQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneBlackQuartzOre", false);
        biomeBlacklistHardenedStoneBlackQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistHardenedStoneBlackQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, BlackQuartz.spec, Main.MOD_ID + "/black_quartz.toml");
    }
}
