package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Niter {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableNiterOres;

    public static ForgeConfigSpec.BooleanValue enableStoneNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneNiterOre;
    public static ForgeConfigSpec.IntValue minHeightStoneNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneNiterOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteNiterOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteNiterOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteNiterOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteNiterOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteNiterOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteNiterOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackNiterOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackNiterOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneNiterOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneNiterOre;

    public static ForgeConfigSpec.BooleanValue enableSandNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeSandNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandNiterOre;
    public static ForgeConfigSpec.IntValue minHeightSandNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightSandNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandNiterOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandNiterOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandNiterOre;

    public static ForgeConfigSpec.BooleanValue enableGravelNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelNiterOre;
    public static ForgeConfigSpec.IntValue minHeightGravelNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelNiterOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneNiterOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneNiterOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceNiterOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceNiterOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceNiterOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceNiterOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceNiterOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceNiterOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceNiterOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockNiterOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockNiterOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockNiterOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltNiterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltNiterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneNiterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperNiterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperNiterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleNiterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleNiterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateNiterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateNiterOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltNiterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissNiterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeNiterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleNiterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteNiterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateNiterOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneNiterOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneNiterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneNiterOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneNiterOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneNiterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneNiterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneNiterOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Niter Ores").push("niter_ores");
        enableNiterOres = BUILDER.comment("Enable or disable all Niter Ore variants.").define("enableNiterOres", true);
        BUILDER.comment("Stone Niter Ore").push("stone_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneNiterOre", true);
        veinSizeStoneNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneNiterOre", 2, 0, 65536);
        veinsPerChunkStoneNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneNiterOre", 8, 0, 65536);
        minHeightStoneNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneNiterOre", 40, 0, 256);
        maxHeightStoneNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneNiterOre", 128, 0, 256);
        isTempWhitelistStoneNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneNiterOre", false);
        temperatureBlacklistStoneNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneNiterOre", new ArrayList<String>());
        isBiomeWhitelistStoneNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneNiterOre", false);
        biomeBlacklistStoneNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Niter Ore").push("andesite_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteNiterOre", true);
        veinSizeAndesiteNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteNiterOre", 2, 0, 65536);
        veinsPerChunkAndesiteNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteNiterOre", 8, 0, 65536);
        minHeightAndesiteNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteNiterOre", 40, 0, 256);
        maxHeightAndesiteNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteNiterOre", 128, 0, 256);
        isTempWhitelistAndesiteNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteNiterOre", false);
        temperatureBlacklistAndesiteNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteNiterOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteNiterOre", false);
        biomeBlacklistAndesiteNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Niter Ore").push("diorite_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteNiterOre", true);
        veinSizeDioriteNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteNiterOre", 2, 0, 65536);
        veinsPerChunkDioriteNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteNiterOre", 8, 0, 65536);
        minHeightDioriteNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteNiterOre", 40, 0, 256);
        maxHeightDioriteNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteNiterOre", 128, 0, 256);
        isTempWhitelistDioriteNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteNiterOre", false);
        temperatureBlacklistDioriteNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteNiterOre", new ArrayList<String>());
        isBiomeWhitelistDioriteNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteNiterOre", false);
        biomeBlacklistDioriteNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Niter Ore").push("granite_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteNiterOre", true);
        veinSizeGraniteNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteNiterOre", 2, 0, 65536);
        veinsPerChunkGraniteNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteNiterOre", 8, 0, 65536);
        minHeightGraniteNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteNiterOre", 40, 0, 256);
        maxHeightGraniteNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteNiterOre", 128, 0, 256);
        isTempWhitelistGraniteNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteNiterOre", false);
        temperatureBlacklistGraniteNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteNiterOre", new ArrayList<String>());
        isBiomeWhitelistGraniteNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteNiterOre", false);
        biomeBlacklistGraniteNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Niter Ore").push("netherrack_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackNiterOre", true);
        veinSizeNetherrackNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackNiterOre", 2, 0, 65536);
        veinsPerChunkNetherrackNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackNiterOre", 4, 0, 65536);
        minHeightNetherrackNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackNiterOre", 10, 0, 256);
        maxHeightNetherrackNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackNiterOre", 96, 0, 256);
        isTempWhitelistNetherrackNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackNiterOre", false);
        temperatureBlacklistNetherrackNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackNiterOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackNiterOre", false);
        biomeBlacklistNetherrackNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Niter Ore").push("end_stone_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneNiterOre", true);
        veinSizeEndStoneNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneNiterOre", 2, 0, 65536);
        veinsPerChunkEndStoneNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneNiterOre", 4, 0, 65536);
        minHeightEndStoneNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneNiterOre", 60, 0, 256);
        maxHeightEndStoneNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneNiterOre", 128, 0, 256);
        isTempWhitelistEndStoneNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneNiterOre", false);
        temperatureBlacklistEndStoneNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneNiterOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneNiterOre", false);
        biomeBlacklistEndStoneNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Niter Ore").push("sand_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandNiterOre", true);
        veinSizeSandNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandNiterOre", 2, 0, 65536);
        veinsPerChunkSandNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandNiterOre", 4, 0, 65536);
        minHeightSandNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandNiterOre", 40, 0, 256);
        maxHeightSandNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandNiterOre", 128, 0, 256);
        isTempWhitelistSandNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandNiterOre", false);
        temperatureBlacklistSandNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandNiterOre", new ArrayList<String>());
        isBiomeWhitelistSandNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandNiterOre", false);
        biomeBlacklistSandNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Niter Ore").push("red_sand_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandNiterOre", true);
        veinSizeRedSandNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandNiterOre", 2, 0, 65536);
        veinsPerChunkRedSandNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandNiterOre", 4, 0, 65536);
        minHeightRedSandNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandNiterOre", 40, 0, 256);
        maxHeightRedSandNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandNiterOre", 128, 0, 256);
        isTempWhitelistRedSandNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandNiterOre", false);
        temperatureBlacklistRedSandNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandNiterOre", new ArrayList<String>());
        isBiomeWhitelistRedSandNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandNiterOre", false);
        biomeBlacklistRedSandNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Niter Ore").push("gravel_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelNiterOre", true);
        veinSizeGravelNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelNiterOre", 2, 0, 65536);
        veinsPerChunkGravelNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelNiterOre", 4, 0, 65536);
        minHeightGravelNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelNiterOre", 40, 0, 256);
        maxHeightGravelNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelNiterOre", 128, 0, 256);
        isTempWhitelistGravelNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelNiterOre", false);
        temperatureBlacklistGravelNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelNiterOre", new ArrayList<String>());
        isBiomeWhitelistGravelNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelNiterOre", false);
        biomeBlacklistGravelNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Niter Ore").push("sandstone_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneNiterOre", true);
        veinSizeSandstoneNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneNiterOre", 2, 0, 65536);
        veinsPerChunkSandstoneNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneNiterOre", 4, 0, 65536);
        minHeightSandstoneNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneNiterOre", 40, 0, 256);
        maxHeightSandstoneNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneNiterOre", 128, 0, 256);
        isTempWhitelistSandstoneNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneNiterOre", false);
        temperatureBlacklistSandstoneNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneNiterOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneNiterOre", false);
        biomeBlacklistSandstoneNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Niter Ore").push("red_sandstone_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneNiterOre", true);
        veinSizeRedSandstoneNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneNiterOre", 2, 0, 65536);
        veinsPerChunkRedSandstoneNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneNiterOre", 4, 0, 65536);
        minHeightRedSandstoneNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneNiterOre", 40, 0, 256);
        maxHeightRedSandstoneNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneNiterOre", 128, 0, 256);
        isTempWhitelistRedSandstoneNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneNiterOre", false);
        temperatureBlacklistRedSandstoneNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneNiterOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneNiterOre", false);
        biomeBlacklistRedSandstoneNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Niter Ore").push("blue_ice_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceNiterOre", true);
        veinSizeBlueIceNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceNiterOre", 2, 0, 65536);
        veinsPerChunkBlueIceNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceNiterOre", 4, 0, 65536);
        minHeightBlueIceNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceNiterOre", 0, 0, 256);
        maxHeightBlueIceNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceNiterOre", 128, 0, 256);
        isTempWhitelistBlueIceNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceNiterOre", false);
        temperatureBlacklistBlueIceNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceNiterOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceNiterOre", false);
        biomeBlacklistBlueIceNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBlueIceNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Niter Ore").push("packed_ice_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceNiterOre", true);
        veinSizePackedIceNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceNiterOre", 2, 0, 65536);
        veinsPerChunkPackedIceNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceNiterOre", 4, 0, 65536);
        minHeightPackedIceNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceNiterOre", 0, 0, 256);
        maxHeightPackedIceNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceNiterOre", 128, 0, 256);
        isTempWhitelistPackedIceNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceNiterOre", false);
        temperatureBlacklistPackedIceNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceNiterOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceNiterOre", false);
        biomeBlacklistPackedIceNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistPackedIceNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Niter Ore").push("bedrock_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockNiterOre", true);
        veinSizeBedrockNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockNiterOre", 1, 0, 65536);
        veinsPerChunkBedrockNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockNiterOre", 1, 0, 65536);
        minHeightBedrockNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockNiterOre", 0, 0, 256);
        maxHeightBedrockNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockNiterOre", 256, 0, 256);
        isTempWhitelistBedrockNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockNiterOre", false);
        temperatureBlacklistBedrockNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockNiterOre", new ArrayList<String>());
        isBiomeWhitelistBedrockNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockNiterOre", false);
        biomeBlacklistBedrockNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBedrockNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockNiterOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockNiterOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Niter Ore (Quark)").push("quark_basalt_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltNiterOre", true);
        veinSizeQuarkBasaltNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltNiterOre", 2, 0, 65536);
        veinsPerChunkQuarkBasaltNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltNiterOre", 4, 0, 65536);
        minHeightQuarkBasaltNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltNiterOre", 10, 0, 256);
        maxHeightQuarkBasaltNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltNiterOre", 96, 0, 256);
        isTempWhitelistQuarkBasaltNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltNiterOre", false);
        temperatureBlacklistQuarkBasaltNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltNiterOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltNiterOre", false);
        biomeBlacklistQuarkBasaltNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Niter Ore (Quark)").push("quark_limestone_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneNiterOre", true);
        veinSizeQuarkLimestoneNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneNiterOre", 2, 0, 65536);
        veinsPerChunkQuarkLimestoneNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneNiterOre", 8, 0, 65536);
        minHeightQuarkLimestoneNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneNiterOre", 40, 0, 256);
        maxHeightQuarkLimestoneNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneNiterOre", 128, 0, 256);
        isTempWhitelistQuarkLimestoneNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneNiterOre", false);
        temperatureBlacklistQuarkLimestoneNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneNiterOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneNiterOre", false);
        biomeBlacklistQuarkLimestoneNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Niter Ore (Quark)").push("quark_jasper_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperNiterOre", true);
        veinSizeQuarkJasperNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperNiterOre", 2, 0, 65536);
        veinsPerChunkQuarkJasperNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperNiterOre", 8, 0, 65536);
        minHeightQuarkJasperNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperNiterOre", 40, 0, 256);
        maxHeightQuarkJasperNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperNiterOre", 128, 0, 256);
        isTempWhitelistQuarkJasperNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperNiterOre", false);
        temperatureBlacklistQuarkJasperNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperNiterOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperNiterOre", false);
        biomeBlacklistQuarkJasperNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Niter Ore (Quark)").push("quark_marble_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleNiterOre", true);
        veinSizeQuarkMarbleNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleNiterOre", 2, 0, 65536);
        veinsPerChunkQuarkMarbleNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleNiterOre", 8, 0, 65536);
        minHeightQuarkMarbleNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleNiterOre", 40, 0, 256);
        maxHeightQuarkMarbleNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleNiterOre", 128, 0, 256);
        isTempWhitelistQuarkMarbleNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleNiterOre", false);
        temperatureBlacklistQuarkMarbleNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleNiterOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleNiterOre", false);
        biomeBlacklistQuarkMarbleNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Niter Ore (Quark)").push("quark_slate_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateNiterOre", true);
        veinSizeQuarkSlateNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateNiterOre", 2, 0, 65536);
        veinsPerChunkQuarkSlateNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateNiterOre", 8, 0, 65536);
        minHeightQuarkSlateNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateNiterOre", 40, 0, 256);
        maxHeightQuarkSlateNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateNiterOre", 128, 0, 256);
        isTempWhitelistQuarkSlateNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateNiterOre", false);
        temperatureBlacklistQuarkSlateNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateNiterOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateNiterOre", false);
        biomeBlacklistQuarkSlateNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Niter Ore (Embellishcraft)").push("embellishcraft_basalt_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltNiterOre", true);
        veinSizeEmbellishcraftBasaltNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltNiterOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltNiterOre", 8, 0, 65536);
        minHeightEmbellishcraftBasaltNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltNiterOre", 40, 0, 256);
        maxHeightEmbellishcraftBasaltNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltNiterOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltNiterOre", false);
        temperatureBlacklistEmbellishcraftBasaltNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltNiterOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltNiterOre", false);
        biomeBlacklistEmbellishcraftBasaltNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Niter Ore (Embellishcraft)").push("embellishcraft_gneiss_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissNiterOre", true);
        veinSizeEmbellishcraftGneissNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissNiterOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissNiterOre", 8, 0, 65536);
        minHeightEmbellishcraftGneissNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissNiterOre", 40, 0, 256);
        maxHeightEmbellishcraftGneissNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissNiterOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissNiterOre", false);
        temperatureBlacklistEmbellishcraftGneissNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissNiterOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissNiterOre", false);
        biomeBlacklistEmbellishcraftGneissNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Niter Ore (Embellishcraft)").push("embellishcraft_jade_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeNiterOre", true);
        veinSizeEmbellishcraftJadeNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeNiterOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadeNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeNiterOre", 8, 0, 65536);
        minHeightEmbellishcraftJadeNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeNiterOre", 40, 0, 256);
        maxHeightEmbellishcraftJadeNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeNiterOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeNiterOre", false);
        temperatureBlacklistEmbellishcraftJadeNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeNiterOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeNiterOre", false);
        biomeBlacklistEmbellishcraftJadeNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Niter Ore (Embellishcraft)").push("embellishcraft_larvikite_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteNiterOre", true);
        veinSizeEmbellishcraftLarvikiteNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteNiterOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteNiterOre", 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteNiterOre", 40, 0, 256);
        maxHeightEmbellishcraftLarvikiteNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteNiterOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteNiterOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteNiterOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteNiterOre", false);
        biomeBlacklistEmbellishcraftLarvikiteNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Niter Ore (Embellishcraft)").push("embellishcraft_marble_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleNiterOre", true);
        veinSizeEmbellishcraftMarbleNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleNiterOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleNiterOre", 8, 0, 65536);
        minHeightEmbellishcraftMarbleNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleNiterOre", 40, 0, 256);
        maxHeightEmbellishcraftMarbleNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleNiterOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleNiterOre", false);
        temperatureBlacklistEmbellishcraftMarbleNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleNiterOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleNiterOre", false);
        biomeBlacklistEmbellishcraftMarbleNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Niter Ore (Embellishcraft)").push("embellishcraft_slate_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateNiterOre", true);
        veinSizeEmbellishcraftSlateNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateNiterOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlateNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateNiterOre", 8, 0, 65536);
        minHeightEmbellishcraftSlateNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateNiterOre", 40, 0, 256);
        maxHeightEmbellishcraftSlateNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateNiterOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateNiterOre", false);
        temperatureBlacklistEmbellishcraftSlateNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateNiterOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateNiterOre", false);
        biomeBlacklistEmbellishcraftSlateNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Niter Ore").push("hardened_stone_niter_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneNiterOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneNiterOre", true);
        veinSizeHardenedStoneNiterOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneNiterOre", 2, 0, 65536);
        veinsPerChunkHardenedStoneNiterOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneNiterOre", 8, 0, 65536);
        minHeightHardenedStoneNiterOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneNiterOre", 40, 0, 256);
        maxHeightHardenedStoneNiterOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneNiterOre", 128, 0, 256);
        isTempWhitelistHardenedStoneNiterOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneNiterOre", false);
        temperatureBlacklistHardenedStoneNiterOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneNiterOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneNiterOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneNiterOre", false);
        biomeBlacklistHardenedStoneNiterOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistHardenedStoneNiterOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Niter.spec, Main.MOD_ID + "/niter.toml");
    }

}
