package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Silver {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableSilverOres;

    public static ForgeConfigSpec.BooleanValue enableStoneSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneSilverOre;
    public static ForgeConfigSpec.IntValue minHeightStoneSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneSilverOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteSilverOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteSilverOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteSilverOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteSilverOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteSilverOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteSilverOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackSilverOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackSilverOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneSilverOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneSilverOre;

    public static ForgeConfigSpec.BooleanValue enableSandSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeSandSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandSilverOre;
    public static ForgeConfigSpec.IntValue minHeightSandSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightSandSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandSilverOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandSilverOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandSilverOre;

    public static ForgeConfigSpec.BooleanValue enableGravelSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelSilverOre;
    public static ForgeConfigSpec.IntValue minHeightGravelSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelSilverOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneSilverOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneSilverOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceSilverOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceSilverOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceSilverOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceSilverOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceSilverOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceSilverOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceSilverOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockSilverOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockSilverOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockSilverOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltSilverOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltSilverOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneSilverOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperSilverOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperSilverOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleSilverOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleSilverOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateSilverOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateSilverOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltSilverOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissSilverOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeSilverOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleSilverOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteSilverOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateSilverOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneSilverOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneSilverOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneSilverOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneSilverOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneSilverOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneSilverOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneSilverOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Silver Ores").push("silver_ores");
        enableSilverOres = BUILDER.comment("Enable or disable all Silver Ore variants.").define("enableSilverOres", true);
        BUILDER.comment("Stone Silver Ore").push("stone_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneSilverOre", true);
        veinSizeStoneSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneSilverOre", 4, 0, 65536);
        veinsPerChunkStoneSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneSilverOre", 4, 0, 65536);
        minHeightStoneSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneSilverOre", 0, 0, 256);
        maxHeightStoneSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneSilverOre", 40, 0, 256);
        isTempWhitelistStoneSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneSilverOre", false);
        temperatureBlacklistStoneSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneSilverOre", new ArrayList<String>());
        isBiomeWhitelistStoneSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneSilverOre", false);
        biomeBlacklistStoneSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Silver Ore").push("andesite_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteSilverOre", true);
        veinSizeAndesiteSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteSilverOre", 4, 0, 65536);
        veinsPerChunkAndesiteSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteSilverOre", 4, 0, 65536);
        minHeightAndesiteSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteSilverOre", 0, 0, 256);
        maxHeightAndesiteSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteSilverOre", 40, 0, 256);
        isTempWhitelistAndesiteSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteSilverOre", false);
        temperatureBlacklistAndesiteSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteSilverOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteSilverOre", false);
        biomeBlacklistAndesiteSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Silver Ore").push("diorite_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteSilverOre", true);
        veinSizeDioriteSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteSilverOre", 4, 0, 65536);
        veinsPerChunkDioriteSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteSilverOre", 4, 0, 65536);
        minHeightDioriteSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteSilverOre", 0, 0, 256);
        maxHeightDioriteSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteSilverOre", 40, 0, 256);
        isTempWhitelistDioriteSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteSilverOre", false);
        temperatureBlacklistDioriteSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteSilverOre", new ArrayList<String>());
        isBiomeWhitelistDioriteSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteSilverOre", false);
        biomeBlacklistDioriteSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Silver Ore").push("granite_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteSilverOre", true);
        veinSizeGraniteSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteSilverOre", 4, 0, 65536);
        veinsPerChunkGraniteSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteSilverOre", 4, 0, 65536);
        minHeightGraniteSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteSilverOre", 0, 0, 256);
        maxHeightGraniteSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteSilverOre", 40, 0, 256);
        isTempWhitelistGraniteSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteSilverOre", false);
        temperatureBlacklistGraniteSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteSilverOre", new ArrayList<String>());
        isBiomeWhitelistGraniteSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteSilverOre", false);
        biomeBlacklistGraniteSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Silver Ore").push("netherrack_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackSilverOre", true);
        veinSizeNetherrackSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackSilverOre", 4, 0, 65536);
        veinsPerChunkNetherrackSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackSilverOre", 4, 0, 65536);
        minHeightNetherrackSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackSilverOre", 10, 0, 256);
        maxHeightNetherrackSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackSilverOre", 96, 0, 256);
        isTempWhitelistNetherrackSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackSilverOre", false);
        temperatureBlacklistNetherrackSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackSilverOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackSilverOre", false);
        biomeBlacklistNetherrackSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Silver Ore").push("end_stone_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneSilverOre", true);
        veinSizeEndStoneSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneSilverOre", 4, 0, 65536);
        veinsPerChunkEndStoneSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneSilverOre", 4, 0, 65536);
        minHeightEndStoneSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneSilverOre", 60, 0, 256);
        maxHeightEndStoneSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneSilverOre", 128, 0, 256);
        isTempWhitelistEndStoneSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneSilverOre", false);
        temperatureBlacklistEndStoneSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneSilverOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneSilverOre", false);
        biomeBlacklistEndStoneSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Silver Ore").push("sand_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandSilverOre", true);
        veinSizeSandSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandSilverOre", 4, 0, 65536);
        veinsPerChunkSandSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandSilverOre", 4, 0, 65536);
        minHeightSandSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandSilverOre", 0, 0, 256);
        maxHeightSandSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandSilverOre", 128, 0, 256);
        isTempWhitelistSandSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandSilverOre", false);
        temperatureBlacklistSandSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandSilverOre", new ArrayList<String>());
        isBiomeWhitelistSandSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandSilverOre", false);
        biomeBlacklistSandSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Silver Ore").push("red_sand_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandSilverOre", true);
        veinSizeRedSandSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandSilverOre", 4, 0, 65536);
        veinsPerChunkRedSandSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandSilverOre", 4, 0, 65536);
        minHeightRedSandSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandSilverOre", 0, 0, 256);
        maxHeightRedSandSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandSilverOre", 128, 0, 256);
        isTempWhitelistRedSandSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandSilverOre", false);
        temperatureBlacklistRedSandSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandSilverOre", new ArrayList<String>());
        isBiomeWhitelistRedSandSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandSilverOre", false);
        biomeBlacklistRedSandSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Silver Ore").push("gravel_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelSilverOre", true);
        veinSizeGravelSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelSilverOre", 4, 0, 65536);
        veinsPerChunkGravelSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelSilverOre", 4, 0, 65536);
        minHeightGravelSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelSilverOre", 0, 0, 256);
        maxHeightGravelSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelSilverOre", 128, 0, 256);
        isTempWhitelistGravelSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelSilverOre", false);
        temperatureBlacklistGravelSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelSilverOre", new ArrayList<String>());
        isBiomeWhitelistGravelSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelSilverOre", false);
        biomeBlacklistGravelSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Silver Ore").push("sandstone_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneSilverOre", true);
        veinSizeSandstoneSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneSilverOre", 4, 0, 65536);
        veinsPerChunkSandstoneSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneSilverOre", 4, 0, 65536);
        minHeightSandstoneSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneSilverOre", 0, 0, 256);
        maxHeightSandstoneSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneSilverOre", 128, 0, 256);
        isTempWhitelistSandstoneSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneSilverOre", false);
        temperatureBlacklistSandstoneSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneSilverOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneSilverOre", false);
        biomeBlacklistSandstoneSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Silver Ore").push("red_sandstone_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneSilverOre", true);
        veinSizeRedSandstoneSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneSilverOre", 4, 0, 65536);
        veinsPerChunkRedSandstoneSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneSilverOre", 4, 0, 65536);
        minHeightRedSandstoneSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneSilverOre", 0, 0, 256);
        maxHeightRedSandstoneSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneSilverOre", 128, 0, 256);
        isTempWhitelistRedSandstoneSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneSilverOre", false);
        temperatureBlacklistRedSandstoneSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneSilverOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneSilverOre", false);
        biomeBlacklistRedSandstoneSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Silver Ore").push("blue_ice_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceSilverOre", true);
        veinSizeBlueIceSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceSilverOre", 4, 0, 65536);
        veinsPerChunkBlueIceSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceSilverOre", 4, 0, 65536);
        minHeightBlueIceSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceSilverOre", 0, 0, 256);
        maxHeightBlueIceSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceSilverOre", 128, 0, 256);
        isTempWhitelistBlueIceSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceSilverOre", false);
        temperatureBlacklistBlueIceSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceSilverOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceSilverOre", false);
        biomeBlacklistBlueIceSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBlueIceSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Silver Ore").push("packed_ice_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceSilverOre", true);
        veinSizePackedIceSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceSilverOre", 4, 0, 65536);
        veinsPerChunkPackedIceSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceSilverOre", 4, 0, 65536);
        minHeightPackedIceSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceSilverOre", 0, 0, 256);
        maxHeightPackedIceSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceSilverOre", 128, 0, 256);
        isTempWhitelistPackedIceSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceSilverOre", false);
        temperatureBlacklistPackedIceSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceSilverOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceSilverOre", false);
        biomeBlacklistPackedIceSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistPackedIceSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Silver Ore").push("bedrock_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockSilverOre", true);
        veinSizeBedrockSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockSilverOre", 1, 0, 65536);
        veinsPerChunkBedrockSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockSilverOre", 1, 0, 65536);
        minHeightBedrockSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockSilverOre", 0, 0, 256);
        maxHeightBedrockSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockSilverOre", 256, 0, 256);
        isTempWhitelistBedrockSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockSilverOre", false);
        temperatureBlacklistBedrockSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockSilverOre", new ArrayList<String>());
        isBiomeWhitelistBedrockSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockSilverOre", false);
        biomeBlacklistBedrockSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBedrockSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockSilverOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockSilverOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Silver Ore (Quark)").push("quark_basalt_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltSilverOre", true);
        veinSizeQuarkBasaltSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltSilverOre", 4, 0, 65536);
        veinsPerChunkQuarkBasaltSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltSilverOre", 4, 0, 65536);
        minHeightQuarkBasaltSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltSilverOre", 10, 0, 256);
        maxHeightQuarkBasaltSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltSilverOre", 96, 0, 256);
        isTempWhitelistQuarkBasaltSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltSilverOre", false);
        temperatureBlacklistQuarkBasaltSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltSilverOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltSilverOre", false);
        biomeBlacklistQuarkBasaltSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Silver Ore (Quark)").push("quark_limestone_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneSilverOre", true);
        veinSizeQuarkLimestoneSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneSilverOre", 4, 0, 65536);
        veinsPerChunkQuarkLimestoneSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneSilverOre", 4, 0, 65536);
        minHeightQuarkLimestoneSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneSilverOre", 0, 0, 256);
        maxHeightQuarkLimestoneSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneSilverOre", 40, 0, 256);
        isTempWhitelistQuarkLimestoneSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneSilverOre", false);
        temperatureBlacklistQuarkLimestoneSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneSilverOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneSilverOre", false);
        biomeBlacklistQuarkLimestoneSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Silver Ore (Quark)").push("quark_jasper_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperSilverOre", true);
        veinSizeQuarkJasperSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperSilverOre", 4, 0, 65536);
        veinsPerChunkQuarkJasperSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperSilverOre", 4, 0, 65536);
        minHeightQuarkJasperSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperSilverOre", 0, 0, 256);
        maxHeightQuarkJasperSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperSilverOre", 40, 0, 256);
        isTempWhitelistQuarkJasperSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperSilverOre", false);
        temperatureBlacklistQuarkJasperSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperSilverOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperSilverOre", false);
        biomeBlacklistQuarkJasperSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Silver Ore (Quark)").push("quark_marble_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleSilverOre", true);
        veinSizeQuarkMarbleSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleSilverOre", 4, 0, 65536);
        veinsPerChunkQuarkMarbleSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleSilverOre", 4, 0, 65536);
        minHeightQuarkMarbleSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleSilverOre", 0, 0, 256);
        maxHeightQuarkMarbleSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleSilverOre", 40, 0, 256);
        isTempWhitelistQuarkMarbleSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleSilverOre", false);
        temperatureBlacklistQuarkMarbleSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleSilverOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleSilverOre", false);
        biomeBlacklistQuarkMarbleSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Silver Ore (Quark)").push("quark_slate_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateSilverOre", true);
        veinSizeQuarkSlateSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateSilverOre", 4, 0, 65536);
        veinsPerChunkQuarkSlateSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateSilverOre", 4, 0, 65536);
        minHeightQuarkSlateSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateSilverOre", 0, 0, 256);
        maxHeightQuarkSlateSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateSilverOre", 40, 0, 256);
        isTempWhitelistQuarkSlateSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateSilverOre", false);
        temperatureBlacklistQuarkSlateSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateSilverOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateSilverOre", false);
        biomeBlacklistQuarkSlateSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Silver Ore (Embellishcraft)").push("embellishcraft_basalt_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltSilverOre", true);
        veinSizeEmbellishcraftBasaltSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltSilverOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltSilverOre", 4, 0, 65536);
        minHeightEmbellishcraftBasaltSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltSilverOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltSilverOre", 40, 0, 256);
        isTempWhitelistEmbellishcraftBasaltSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltSilverOre", false);
        temperatureBlacklistEmbellishcraftBasaltSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltSilverOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltSilverOre", false);
        biomeBlacklistEmbellishcraftBasaltSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Silver Ore (Embellishcraft)").push("embellishcraft_gneiss_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissSilverOre", true);
        veinSizeEmbellishcraftGneissSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissSilverOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissSilverOre", 4, 0, 65536);
        minHeightEmbellishcraftGneissSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissSilverOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissSilverOre", 40, 0, 256);
        isTempWhitelistEmbellishcraftGneissSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissSilverOre", false);
        temperatureBlacklistEmbellishcraftGneissSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissSilverOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissSilverOre", false);
        biomeBlacklistEmbellishcraftGneissSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Silver Ore (Embellishcraft)").push("embellishcraft_jade_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeSilverOre", true);
        veinSizeEmbellishcraftJadeSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeSilverOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeSilverOre", 4, 0, 65536);
        minHeightEmbellishcraftJadeSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeSilverOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeSilverOre", 40, 0, 256);
        isTempWhitelistEmbellishcraftJadeSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeSilverOre", false);
        temperatureBlacklistEmbellishcraftJadeSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeSilverOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeSilverOre", false);
        biomeBlacklistEmbellishcraftJadeSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Silver Ore (Embellishcraft)").push("embellishcraft_larvikite_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteSilverOre", true);
        veinSizeEmbellishcraftLarvikiteSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteSilverOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteSilverOre", 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteSilverOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteSilverOre", 40, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteSilverOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteSilverOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteSilverOre", false);
        biomeBlacklistEmbellishcraftLarvikiteSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Silver Ore (Embellishcraft)").push("embellishcraft_marble_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleSilverOre", true);
        veinSizeEmbellishcraftMarbleSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleSilverOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleSilverOre", 4, 0, 65536);
        minHeightEmbellishcraftMarbleSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleSilverOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleSilverOre", 40, 0, 256);
        isTempWhitelistEmbellishcraftMarbleSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleSilverOre", false);
        temperatureBlacklistEmbellishcraftMarbleSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleSilverOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleSilverOre", false);
        biomeBlacklistEmbellishcraftMarbleSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Silver Ore (Embellishcraft)").push("embellishcraft_slate_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateSilverOre", true);
        veinSizeEmbellishcraftSlateSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateSilverOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateSilverOre", 4, 0, 65536);
        minHeightEmbellishcraftSlateSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateSilverOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateSilverOre", 40, 0, 256);
        isTempWhitelistEmbellishcraftSlateSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateSilverOre", false);
        temperatureBlacklistEmbellishcraftSlateSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateSilverOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateSilverOre", false);
        biomeBlacklistEmbellishcraftSlateSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Silver Ore").push("hardened_stone_silver_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneSilverOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneSilverOre", true);
        veinSizeHardenedStoneSilverOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneSilverOre", 4, 0, 65536);
        veinsPerChunkHardenedStoneSilverOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneSilverOre", 4, 0, 65536);
        minHeightHardenedStoneSilverOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneSilverOre", 0, 0, 256);
        maxHeightHardenedStoneSilverOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneSilverOre", 40, 0, 256);
        isTempWhitelistHardenedStoneSilverOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneSilverOre", false);
        temperatureBlacklistHardenedStoneSilverOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneSilverOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneSilverOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneSilverOre", false);
        biomeBlacklistHardenedStoneSilverOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistHardenedStoneSilverOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Silver.spec, Main.MOD_ID + "/silver.toml");
    }
}
