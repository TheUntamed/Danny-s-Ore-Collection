package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Cobalt {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableCobaltOres;

    public static ForgeConfigSpec.BooleanValue enableStoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightStoneCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableSandCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeSandCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightSandCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightSandCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableGravelCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightGravelCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceCobaltOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockCobaltOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockCobaltOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateCobaltOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteCobaltOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateCobaltOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneCobaltOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneCobaltOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneCobaltOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneCobaltOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneCobaltOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneCobaltOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Cobalt Ores").push("cobalt_ores");
        enableCobaltOres = BUILDER.comment("Enable or disable all Cobalt Ore variants.").define("enableCobaltOres", true);
        BUILDER.comment("Stone Cobalt Ore").push("stone_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneCobaltOre", true);
        veinSizeStoneCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneCobaltOre", 6, 0, 65536);
        veinsPerChunkStoneCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneCobaltOre", 2, 0, 65536);
        minHeightStoneCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneCobaltOre", 0, 0, 256);
        maxHeightStoneCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneCobaltOre", 16, 0, 256);
        isTempWhitelistStoneCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneCobaltOre", false);
        temperatureBlacklistStoneCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneCobaltOre", new ArrayList<String>());
        isBiomeWhitelistStoneCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneCobaltOre", false);
        biomeBlacklistStoneCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Cobalt Ore").push("andesite_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteCobaltOre", true);
        veinSizeAndesiteCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteCobaltOre", 6, 0, 65536);
        veinsPerChunkAndesiteCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteCobaltOre", 2, 0, 65536);
        minHeightAndesiteCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteCobaltOre", 0, 0, 256);
        maxHeightAndesiteCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteCobaltOre", 16, 0, 256);
        isTempWhitelistAndesiteCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteCobaltOre", false);
        temperatureBlacklistAndesiteCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteCobaltOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteCobaltOre", false);
        biomeBlacklistAndesiteCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Cobalt Ore").push("diorite_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteCobaltOre", true);
        veinSizeDioriteCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteCobaltOre", 6, 0, 65536);
        veinsPerChunkDioriteCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteCobaltOre", 2, 0, 65536);
        minHeightDioriteCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteCobaltOre", 0, 0, 256);
        maxHeightDioriteCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteCobaltOre", 16, 0, 256);
        isTempWhitelistDioriteCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteCobaltOre", false);
        temperatureBlacklistDioriteCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteCobaltOre", new ArrayList<String>());
        isBiomeWhitelistDioriteCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteCobaltOre", false);
        biomeBlacklistDioriteCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Cobalt Ore").push("granite_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteCobaltOre", true);
        veinSizeGraniteCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteCobaltOre", 6, 0, 65536);
        veinsPerChunkGraniteCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteCobaltOre", 2, 0, 65536);
        minHeightGraniteCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteCobaltOre", 0, 0, 256);
        maxHeightGraniteCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteCobaltOre", 16, 0, 256);
        isTempWhitelistGraniteCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteCobaltOre", false);
        temperatureBlacklistGraniteCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteCobaltOre", new ArrayList<String>());
        isBiomeWhitelistGraniteCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteCobaltOre", false);
        biomeBlacklistGraniteCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Cobalt Ore").push("netherrack_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackCobaltOre", true);
        veinSizeNetherrackCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackCobaltOre", 6, 0, 65536);
        veinsPerChunkNetherrackCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackCobaltOre", 2, 0, 65536);
        minHeightNetherrackCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackCobaltOre", 96, 0, 256);
        maxHeightNetherrackCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackCobaltOre", 128, 0, 256);
        isTempWhitelistNetherrackCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackCobaltOre", false);
        temperatureBlacklistNetherrackCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackCobaltOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackCobaltOre", false);
        biomeBlacklistNetherrackCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Cobalt Ore").push("end_stone_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneCobaltOre", true);
        veinSizeEndStoneCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneCobaltOre", 6, 0, 65536);
        veinsPerChunkEndStoneCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneCobaltOre", 2, 0, 65536);
        minHeightEndStoneCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneCobaltOre", 0, 0, 256);
        maxHeightEndStoneCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneCobaltOre", 32, 0, 256);
        isTempWhitelistEndStoneCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneCobaltOre", false);
        temperatureBlacklistEndStoneCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneCobaltOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneCobaltOre", false);
        biomeBlacklistEndStoneCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Cobalt Ore").push("sand_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandCobaltOre", true);
        veinSizeSandCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandCobaltOre", 3, 0, 65536);
        veinsPerChunkSandCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandCobaltOre", 2, 0, 65536);
        minHeightSandCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandCobaltOre", 0, 0, 256);
        maxHeightSandCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandCobaltOre", 128, 0, 256);
        isTempWhitelistSandCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandCobaltOre", false);
        temperatureBlacklistSandCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandCobaltOre", new ArrayList<String>());
        isBiomeWhitelistSandCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandCobaltOre", false);
        biomeBlacklistSandCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Cobalt Ore").push("red_sand_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandCobaltOre", true);
        veinSizeRedSandCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandCobaltOre", 3, 0, 65536);
        veinsPerChunkRedSandCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandCobaltOre", 2, 0, 65536);
        minHeightRedSandCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandCobaltOre", 0, 0, 256);
        maxHeightRedSandCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandCobaltOre", 128, 0, 256);
        isTempWhitelistRedSandCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandCobaltOre", false);
        temperatureBlacklistRedSandCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandCobaltOre", new ArrayList<String>());
        isBiomeWhitelistRedSandCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandCobaltOre", false);
        biomeBlacklistRedSandCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Cobalt Ore").push("gravel_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelCobaltOre", true);
        veinSizeGravelCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelCobaltOre", 3, 0, 65536);
        veinsPerChunkGravelCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelCobaltOre", 2, 0, 65536);
        minHeightGravelCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelCobaltOre", 0, 0, 256);
        maxHeightGravelCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelCobaltOre", 128, 0, 256);
        isTempWhitelistGravelCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelCobaltOre", false);
        temperatureBlacklistGravelCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelCobaltOre", new ArrayList<String>());
        isBiomeWhitelistGravelCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelCobaltOre", false);
        biomeBlacklistGravelCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Cobalt Ore").push("sandstone_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneCobaltOre", true);
        veinSizeSandstoneCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneCobaltOre", 3, 0, 65536);
        veinsPerChunkSandstoneCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneCobaltOre", 2, 0, 65536);
        minHeightSandstoneCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneCobaltOre", 0, 0, 256);
        maxHeightSandstoneCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneCobaltOre", 128, 0, 256);
        isTempWhitelistSandstoneCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneCobaltOre", false);
        temperatureBlacklistSandstoneCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneCobaltOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneCobaltOre", false);
        biomeBlacklistSandstoneCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Cobalt Ore").push("red_sandstone_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneCobaltOre", true);
        veinSizeRedSandstoneCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneCobaltOre", 3, 0, 65536);
        veinsPerChunkRedSandstoneCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneCobaltOre", 2, 0, 65536);
        minHeightRedSandstoneCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneCobaltOre", 0, 0, 256);
        maxHeightRedSandstoneCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneCobaltOre", 128, 0, 256);
        isTempWhitelistRedSandstoneCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneCobaltOre", false);
        temperatureBlacklistRedSandstoneCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneCobaltOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneCobaltOre", false);
        biomeBlacklistRedSandstoneCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Cobalt Ore").push("blue_ice_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceCobaltOre", true);
        veinSizeBlueIceCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceCobaltOre", 3, 0, 65536);
        veinsPerChunkBlueIceCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceCobaltOre", 2, 0, 65536);
        minHeightBlueIceCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceCobaltOre", 0, 0, 256);
        maxHeightBlueIceCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceCobaltOre", 128, 0, 256);
        isTempWhitelistBlueIceCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceCobaltOre", false);
        temperatureBlacklistBlueIceCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceCobaltOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceCobaltOre", false);
        biomeBlacklistBlueIceCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBlueIceCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Cobalt Ore").push("packed_ice_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceCobaltOre", true);
        veinSizePackedIceCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceCobaltOre", 3, 0, 65536);
        veinsPerChunkPackedIceCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceCobaltOre", 2, 0, 65536);
        minHeightPackedIceCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceCobaltOre", 0, 0, 256);
        maxHeightPackedIceCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceCobaltOre", 128, 0, 256);
        isTempWhitelistPackedIceCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceCobaltOre", false);
        temperatureBlacklistPackedIceCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceCobaltOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceCobaltOre", false);
        biomeBlacklistPackedIceCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistPackedIceCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Cobalt Ore").push("bedrock_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockCobaltOre", true);
        veinSizeBedrockCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockCobaltOre", 1, 0, 65536);
        veinsPerChunkBedrockCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockCobaltOre", 1, 0, 65536);
        minHeightBedrockCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockCobaltOre", 0, 0, 256);
        maxHeightBedrockCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockCobaltOre", 256, 0, 256);
        isTempWhitelistBedrockCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockCobaltOre", false);
        temperatureBlacklistBedrockCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockCobaltOre", new ArrayList<String>());
        isBiomeWhitelistBedrockCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockCobaltOre", false);
        biomeBlacklistBedrockCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBedrockCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockCobaltOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockCobaltOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Cobalt Ore (Quark)").push("quark_basalt_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltCobaltOre", true);
        veinSizeQuarkBasaltCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltCobaltOre", 6, 0, 65536);
        veinsPerChunkQuarkBasaltCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltCobaltOre", 2, 0, 65536);
        minHeightQuarkBasaltCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltCobaltOre", 96, 0, 256);
        maxHeightQuarkBasaltCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltCobaltOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltCobaltOre", false);
        temperatureBlacklistQuarkBasaltCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltCobaltOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltCobaltOre", false);
        biomeBlacklistQuarkBasaltCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Cobalt Ore (Quark)").push("quark_limestone_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneCobaltOre", true);
        veinSizeQuarkLimestoneCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneCobaltOre", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneCobaltOre", 2, 0, 65536);
        minHeightQuarkLimestoneCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneCobaltOre", 0, 0, 256);
        maxHeightQuarkLimestoneCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneCobaltOre", 16, 0, 256);
        isTempWhitelistQuarkLimestoneCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneCobaltOre", false);
        temperatureBlacklistQuarkLimestoneCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneCobaltOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneCobaltOre", false);
        biomeBlacklistQuarkLimestoneCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Cobalt Ore (Quark)").push("quark_jasper_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperCobaltOre", true);
        veinSizeQuarkJasperCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperCobaltOre", 6, 0, 65536);
        veinsPerChunkQuarkJasperCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperCobaltOre", 2, 0, 65536);
        minHeightQuarkJasperCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperCobaltOre", 0, 0, 256);
        maxHeightQuarkJasperCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperCobaltOre", 16, 0, 256);
        isTempWhitelistQuarkJasperCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperCobaltOre", false);
        temperatureBlacklistQuarkJasperCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperCobaltOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperCobaltOre", false);
        biomeBlacklistQuarkJasperCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Cobalt Ore (Quark)").push("quark_marble_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleCobaltOre", true);
        veinSizeQuarkMarbleCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleCobaltOre", 6, 0, 65536);
        veinsPerChunkQuarkMarbleCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleCobaltOre", 2, 0, 65536);
        minHeightQuarkMarbleCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleCobaltOre", 0, 0, 256);
        maxHeightQuarkMarbleCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleCobaltOre", 16, 0, 256);
        isTempWhitelistQuarkMarbleCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleCobaltOre", false);
        temperatureBlacklistQuarkMarbleCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleCobaltOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleCobaltOre", false);
        biomeBlacklistQuarkMarbleCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Cobalt Ore (Quark)").push("quark_slate_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateCobaltOre", true);
        veinSizeQuarkSlateCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateCobaltOre", 6, 0, 65536);
        veinsPerChunkQuarkSlateCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateCobaltOre", 2, 0, 65536);
        minHeightQuarkSlateCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateCobaltOre", 0, 0, 256);
        maxHeightQuarkSlateCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateCobaltOre", 16, 0, 256);
        isTempWhitelistQuarkSlateCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateCobaltOre", false);
        temperatureBlacklistQuarkSlateCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateCobaltOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateCobaltOre", false);
        biomeBlacklistQuarkSlateCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Cobalt Ore (Embellishcraft)").push("embellishcraft_basalt_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltCobaltOre", true);
        veinSizeEmbellishcraftBasaltCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltCobaltOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltCobaltOre", 2, 0, 65536);
        minHeightEmbellishcraftBasaltCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltCobaltOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltCobaltOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltCobaltOre", false);
        temperatureBlacklistEmbellishcraftBasaltCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltCobaltOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltCobaltOre", false);
        biomeBlacklistEmbellishcraftBasaltCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Cobalt Ore (Embellishcraft)").push("embellishcraft_gneiss_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissCobaltOre", true);
        veinSizeEmbellishcraftGneissCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissCobaltOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissCobaltOre", 2, 0, 65536);
        minHeightEmbellishcraftGneissCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissCobaltOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissCobaltOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissCobaltOre", false);
        temperatureBlacklistEmbellishcraftGneissCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissCobaltOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissCobaltOre", false);
        biomeBlacklistEmbellishcraftGneissCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Cobalt Ore (Embellishcraft)").push("embellishcraft_jade_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeCobaltOre", true);
        veinSizeEmbellishcraftJadeCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeCobaltOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeCobaltOre", 2, 0, 65536);
        minHeightEmbellishcraftJadeCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeCobaltOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeCobaltOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeCobaltOre", false);
        temperatureBlacklistEmbellishcraftJadeCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeCobaltOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeCobaltOre", false);
        biomeBlacklistEmbellishcraftJadeCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Cobalt Ore (Embellishcraft)").push("embellishcraft_larvikite_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteCobaltOre", true);
        veinSizeEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteCobaltOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteCobaltOre", 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteCobaltOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteCobaltOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteCobaltOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteCobaltOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteCobaltOre", false);
        biomeBlacklistEmbellishcraftLarvikiteCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Cobalt Ore (Embellishcraft)").push("embellishcraft_marble_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleCobaltOre", true);
        veinSizeEmbellishcraftMarbleCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleCobaltOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleCobaltOre", 2, 0, 65536);
        minHeightEmbellishcraftMarbleCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleCobaltOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleCobaltOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleCobaltOre", false);
        temperatureBlacklistEmbellishcraftMarbleCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleCobaltOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleCobaltOre", false);
        biomeBlacklistEmbellishcraftMarbleCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Cobalt Ore (Embellishcraft)").push("embellishcraft_slate_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateCobaltOre", true);
        veinSizeEmbellishcraftSlateCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateCobaltOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateCobaltOre", 2, 0, 65536);
        minHeightEmbellishcraftSlateCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateCobaltOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateCobaltOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateCobaltOre", false);
        temperatureBlacklistEmbellishcraftSlateCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateCobaltOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateCobaltOre", false);
        biomeBlacklistEmbellishcraftSlateCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Cobalt Ore").push("hardened_stone_cobalt_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneCobaltOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneCobaltOre", true);
        veinSizeHardenedStoneCobaltOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneCobaltOre", 6, 0, 65536);
        veinsPerChunkHardenedStoneCobaltOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneCobaltOre", 2, 0, 65536);
        minHeightHardenedStoneCobaltOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneCobaltOre", 0, 0, 256);
        maxHeightHardenedStoneCobaltOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneCobaltOre", 16, 0, 256);
        isTempWhitelistHardenedStoneCobaltOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneCobaltOre", false);
        temperatureBlacklistHardenedStoneCobaltOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneCobaltOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneCobaltOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneCobaltOre", false);
        biomeBlacklistHardenedStoneCobaltOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistHardenedStoneCobaltOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Cobalt.spec, Main.MOD_ID + "/cobalt.toml");
    }
}
