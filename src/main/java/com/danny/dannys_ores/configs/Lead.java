package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Lead {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableLeadOres;

    public static ForgeConfigSpec.BooleanValue enableStoneLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneLeadOre;
    public static ForgeConfigSpec.IntValue minHeightStoneLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneLeadOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteLeadOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteLeadOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteLeadOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteLeadOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteLeadOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteLeadOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackLeadOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackLeadOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneLeadOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneLeadOre;

    public static ForgeConfigSpec.BooleanValue enableSandLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeSandLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandLeadOre;
    public static ForgeConfigSpec.IntValue minHeightSandLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightSandLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandLeadOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandLeadOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandLeadOre;

    public static ForgeConfigSpec.BooleanValue enableGravelLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelLeadOre;
    public static ForgeConfigSpec.IntValue minHeightGravelLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelLeadOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneLeadOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneLeadOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockLeadOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockLeadOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockLeadOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltLeadOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltLeadOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneLeadOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperLeadOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperLeadOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleLeadOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleLeadOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateLeadOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateLeadOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltLeadOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissLeadOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeLeadOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleLeadOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteLeadOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateLeadOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneLeadOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneLeadOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneLeadOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneLeadOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneLeadOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneLeadOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneLeadOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Lead Ores").push("lead_ores");
        enableLeadOres = BUILDER.comment("Enable or disable all Lead Ore variants.").define("enableLeadOres", true);
        BUILDER.comment("Stone Lead Ore").push("stone_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneLeadOre", true);
        veinSizeStoneLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneLeadOre", 9, 0, 65536);
        veinsPerChunkStoneLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneLeadOre", 20, 0, 65536);
        minHeightStoneLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneLeadOre", 40, 0, 256);
        maxHeightStoneLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneLeadOre", 128, 0, 256);
        isTempWhitelistStoneLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneLeadOre", false);
        temperatureBlacklistStoneLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneLeadOre", new ArrayList<String>());
        isBiomeWhitelistStoneLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneLeadOre", false);
        biomeBlacklistStoneLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Lead Ore").push("andesite_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteLeadOre", true);
        veinSizeAndesiteLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteLeadOre", 9, 0, 65536);
        veinsPerChunkAndesiteLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteLeadOre", 20, 0, 65536);
        minHeightAndesiteLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteLeadOre", 40, 0, 256);
        maxHeightAndesiteLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteLeadOre", 128, 0, 256);
        isTempWhitelistAndesiteLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteLeadOre", false);
        temperatureBlacklistAndesiteLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteLeadOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteLeadOre", false);
        biomeBlacklistAndesiteLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Lead Ore").push("diorite_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteLeadOre", true);
        veinSizeDioriteLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteLeadOre", 9, 0, 65536);
        veinsPerChunkDioriteLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteLeadOre", 20, 0, 65536);
        minHeightDioriteLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteLeadOre", 40, 0, 256);
        maxHeightDioriteLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteLeadOre", 128, 0, 256);
        isTempWhitelistDioriteLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteLeadOre", false);
        temperatureBlacklistDioriteLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteLeadOre", new ArrayList<String>());
        isBiomeWhitelistDioriteLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteLeadOre", false);
        biomeBlacklistDioriteLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Lead Ore").push("granite_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteLeadOre", true);
        veinSizeGraniteLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteLeadOre", 9, 0, 65536);
        veinsPerChunkGraniteLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteLeadOre", 20, 0, 65536);
        minHeightGraniteLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteLeadOre", 40, 0, 256);
        maxHeightGraniteLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteLeadOre", 128, 0, 256);
        isTempWhitelistGraniteLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteLeadOre", false);
        temperatureBlacklistGraniteLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteLeadOre", new ArrayList<String>());
        isBiomeWhitelistGraniteLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteLeadOre", false);
        biomeBlacklistGraniteLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Lead Ore").push("netherrack_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackLeadOre", true);
        veinSizeNetherrackLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackLeadOre", 4, 0, 65536);
        veinsPerChunkNetherrackLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackLeadOre", 10, 0, 65536);
        minHeightNetherrackLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackLeadOre", 10, 0, 256);
        maxHeightNetherrackLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackLeadOre", 96, 0, 256);
        isTempWhitelistNetherrackLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackLeadOre", false);
        temperatureBlacklistNetherrackLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackLeadOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackLeadOre", false);
        biomeBlacklistNetherrackLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Lead Ore").push("end_stone_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneLeadOre", true);
        veinSizeEndStoneLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneLeadOre", 4, 0, 65536);
        veinsPerChunkEndStoneLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneLeadOre", 10, 0, 65536);
        minHeightEndStoneLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneLeadOre", 60, 0, 256);
        maxHeightEndStoneLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneLeadOre", 128, 0, 256);
        isTempWhitelistEndStoneLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneLeadOre", false);
        temperatureBlacklistEndStoneLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneLeadOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneLeadOre", false);
        biomeBlacklistEndStoneLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Lead Ore").push("sand_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandLeadOre", true);
        veinSizeSandLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandLeadOre", 9, 0, 65536);
        veinsPerChunkSandLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandLeadOre", 20, 0, 65536);
        minHeightSandLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandLeadOre", 40, 0, 256);
        maxHeightSandLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandLeadOre", 128, 0, 256);
        isTempWhitelistSandLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandLeadOre", false);
        temperatureBlacklistSandLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandLeadOre", new ArrayList<String>());
        isBiomeWhitelistSandLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandLeadOre", false);
        biomeBlacklistSandLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Lead Ore").push("red_sand_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandLeadOre", true);
        veinSizeRedSandLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandLeadOre", 9, 0, 65536);
        veinsPerChunkRedSandLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandLeadOre", 20, 0, 65536);
        minHeightRedSandLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandLeadOre", 40, 0, 256);
        maxHeightRedSandLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandLeadOre", 128, 0, 256);
        isTempWhitelistRedSandLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandLeadOre", false);
        temperatureBlacklistRedSandLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandLeadOre", new ArrayList<String>());
        isBiomeWhitelistRedSandLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandLeadOre", false);
        biomeBlacklistRedSandLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Lead Ore").push("gravel_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelLeadOre", true);
        veinSizeGravelLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelLeadOre", 9, 0, 65536);
        veinsPerChunkGravelLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelLeadOre", 20, 0, 65536);
        minHeightGravelLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelLeadOre", 40, 0, 256);
        maxHeightGravelLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelLeadOre", 128, 0, 256);
        isTempWhitelistGravelLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelLeadOre", false);
        temperatureBlacklistGravelLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelLeadOre", new ArrayList<String>());
        isBiomeWhitelistGravelLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelLeadOre", false);
        biomeBlacklistGravelLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Lead Ore").push("sandstone_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneLeadOre", true);
        veinSizeSandstoneLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneLeadOre", 9, 0, 65536);
        veinsPerChunkSandstoneLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneLeadOre", 20, 0, 65536);
        minHeightSandstoneLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneLeadOre", 40, 0, 256);
        maxHeightSandstoneLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneLeadOre", 128, 0, 256);
        isTempWhitelistSandstoneLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneLeadOre", false);
        temperatureBlacklistSandstoneLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneLeadOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneLeadOre", false);
        biomeBlacklistSandstoneLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Lead Ore").push("red_sandstone_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneLeadOre", true);
        veinSizeRedSandstoneLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneLeadOre", 9, 0, 65536);
        veinsPerChunkRedSandstoneLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneLeadOre", 20, 0, 65536);
        minHeightRedSandstoneLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneLeadOre", 40, 0, 256);
        maxHeightRedSandstoneLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneLeadOre", 128, 0, 256);
        isTempWhitelistRedSandstoneLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneLeadOre", false);
        temperatureBlacklistRedSandstoneLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneLeadOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneLeadOre", false);
        biomeBlacklistRedSandstoneLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Lead Ore").push("stone_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockLeadOre", true);
        veinSizeBedrockLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockLeadOre", 1, 0, 65536);
        veinsPerChunkBedrockLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockLeadOre", 1, 0, 65536);
        minHeightBedrockLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockLeadOre", 0, 0, 256);
        maxHeightBedrockLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockLeadOre", 256, 0, 256);
        isTempWhitelistBedrockLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockLeadOre", false);
        temperatureBlacklistBedrockLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockLeadOre", new ArrayList<String>());
        isBiomeWhitelistBedrockLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockLeadOre", false);
        biomeBlacklistBedrockLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBedrockLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockLeadOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockLeadOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Lead Ore (Quark)").push("quark_basalt_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltLeadOre", true);
        veinSizeQuarkBasaltLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltLeadOre", 4, 0, 65536);
        veinsPerChunkQuarkBasaltLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltLeadOre", 10, 0, 65536);
        minHeightQuarkBasaltLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltLeadOre", 10, 0,256);
        maxHeightQuarkBasaltLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltLeadOre", 96, 0, 256);
        isTempWhitelistQuarkBasaltLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltLeadOre", false);
        temperatureBlacklistQuarkBasaltLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltLeadOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltLeadOre", false);
        biomeBlacklistQuarkBasaltLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Lead Ore (Quark)").push("quark_limestone_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneLeadOre", true);
        veinSizeQuarkLimestoneLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneLeadOre", 9, 0, 65536);
        veinsPerChunkQuarkLimestoneLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneLeadOre", 20, 0,65536);
        minHeightQuarkLimestoneLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneLeadOre", 40, 0,256);
        maxHeightQuarkLimestoneLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneLeadOre", 128, 0, 256);
        isTempWhitelistQuarkLimestoneLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneLeadOre", false);
        temperatureBlacklistQuarkLimestoneLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneLeadOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneLeadOre", false);
        biomeBlacklistQuarkLimestoneLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Lead Ore (Quark)").push("quark_jasper_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperLeadOre", true);
        veinSizeQuarkJasperLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperLeadOre", 9, 0, 65536);
        veinsPerChunkQuarkJasperLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperLeadOre", 20, 0,65536);
        minHeightQuarkJasperLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperLeadOre", 40, 0,256);
        maxHeightQuarkJasperLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperLeadOre", 128, 0, 256);
        isTempWhitelistQuarkJasperLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperLeadOre", false);
        temperatureBlacklistQuarkJasperLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperLeadOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperLeadOre", false);
        biomeBlacklistQuarkJasperLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Lead Ore (Quark)").push("quark_marble_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleLeadOre", true);
        veinSizeQuarkMarbleLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleLeadOre", 9, 0, 65536);
        veinsPerChunkQuarkMarbleLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleLeadOre", 20, 0,65536);
        minHeightQuarkMarbleLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleLeadOre", 40, 0,256);
        maxHeightQuarkMarbleLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleLeadOre", 128, 0, 256);
        isTempWhitelistQuarkMarbleLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleLeadOre", false);
        temperatureBlacklistQuarkMarbleLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleLeadOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleLeadOre", false);
        biomeBlacklistQuarkMarbleLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Lead Ore (Quark)").push("quark_slate_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateLeadOre", true);
        veinSizeQuarkSlateLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateLeadOre", 9, 0, 65536);
        veinsPerChunkQuarkSlateLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateLeadOre", 20, 0,65536);
        minHeightQuarkSlateLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateLeadOre", 40, 0,256);
        maxHeightQuarkSlateLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateLeadOre", 128, 0, 256);
        isTempWhitelistQuarkSlateLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateLeadOre", false);
        temperatureBlacklistQuarkSlateLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateLeadOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateLeadOre", false);
        biomeBlacklistQuarkSlateLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Lead Ore (Embellishcraft)").push("embellishcraft_basalt_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltLeadOre", true);
        veinSizeEmbellishcraftBasaltLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltLeadOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltLeadOre", 20, 0,65536);
        minHeightEmbellishcraftBasaltLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltLeadOre", 40, 0,256);
        maxHeightEmbellishcraftBasaltLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltLeadOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltLeadOre", false);
        temperatureBlacklistEmbellishcraftBasaltLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltLeadOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltLeadOre", false);
        biomeBlacklistEmbellishcraftBasaltLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Lead Ore (Embellishcraft)").push("embellishcraft_gneiss_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissLeadOre", true);
        veinSizeEmbellishcraftGneissLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissLeadOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissLeadOre", 20, 0,65536);
        minHeightEmbellishcraftGneissLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissLeadOre", 40, 0,256);
        maxHeightEmbellishcraftGneissLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissLeadOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissLeadOre", false);
        temperatureBlacklistEmbellishcraftGneissLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissLeadOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissLeadOre", false);
        biomeBlacklistEmbellishcraftGneissLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Lead Ore (Embellishcraft)").push("embellishcraft_jade_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeLeadOre", true);
        veinSizeEmbellishcraftJadeLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeLeadOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeLeadOre", 20, 0,65536);
        minHeightEmbellishcraftJadeLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeLeadOre", 40, 0,256);
        maxHeightEmbellishcraftJadeLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeLeadOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeLeadOre", false);
        temperatureBlacklistEmbellishcraftJadeLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeLeadOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeLeadOre", false);
        biomeBlacklistEmbellishcraftJadeLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Lead Ore (Embellishcraft)").push("embellishcraft_larvikite_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteLeadOre", true);
        veinSizeEmbellishcraftLarvikiteLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteLeadOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteLeadOre", 20, 0,65536);
        minHeightEmbellishcraftLarvikiteLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteLeadOre", 40, 0,256);
        maxHeightEmbellishcraftLarvikiteLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteLeadOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteLeadOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteLeadOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteLeadOre", false);
        biomeBlacklistEmbellishcraftLarvikiteLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Lead Ore (Embellishcraft)").push("embellishcraft_marble_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleLeadOre", true);
        veinSizeEmbellishcraftMarbleLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleLeadOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleLeadOre", 20, 0,65536);
        minHeightEmbellishcraftMarbleLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleLeadOre", 40, 0,256);
        maxHeightEmbellishcraftMarbleLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleLeadOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleLeadOre", false);
        temperatureBlacklistEmbellishcraftMarbleLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleLeadOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleLeadOre", false);
        biomeBlacklistEmbellishcraftMarbleLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Lead Ore (Embellishcraft)").push("embellishcraft_slate_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateLeadOre", true);
        veinSizeEmbellishcraftSlateLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateLeadOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateLeadOre", 20, 0, 65536);
        minHeightEmbellishcraftSlateLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateLeadOre", 40, 0, 256);
        maxHeightEmbellishcraftSlateLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateLeadOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateLeadOre", false);
        temperatureBlacklistEmbellishcraftSlateLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateLeadOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateLeadOre", false);
        biomeBlacklistEmbellishcraftSlateLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Lead Ore").push("hardened_stone_lead_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneLeadOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneLeadOre", true);
        veinSizeHardenedStoneLeadOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneLeadOre", 9, 0, 65536);
        veinsPerChunkHardenedStoneLeadOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneLeadOre", 20, 0, 65536);
        minHeightHardenedStoneLeadOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneLeadOre", 40, 0, 256);
        maxHeightHardenedStoneLeadOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneLeadOre", 128, 0, 256);
        isTempWhitelistHardenedStoneLeadOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneLeadOre", false);
        temperatureBlacklistHardenedStoneLeadOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneLeadOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneLeadOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneLeadOre", false);
        biomeBlacklistHardenedStoneLeadOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistHardenedStoneLeadOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Lead.spec, Main.MOD_ID + "/lead.toml");
    }
}
