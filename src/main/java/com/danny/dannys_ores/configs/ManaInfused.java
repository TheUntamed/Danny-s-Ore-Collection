package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class ManaInfused {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableManaInfusedOres;

    public static ForgeConfigSpec.BooleanValue enableStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightSandManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableGravelManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightGravelManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceManaInfusedOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceManaInfusedOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockManaInfusedOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockManaInfusedOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateManaInfusedOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateManaInfusedOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneManaInfusedOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Mana Infused Ores").push("mana_infused_ores");
        enableManaInfusedOres = BUILDER.comment("Enable or disable all Mana Infused Ore variants.").define("enableManaInfusedOres", true);
        BUILDER.comment("Stone Mana Infused Ore").push("stone_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneManaInfusedOre", true);
        veinSizeStoneManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneManaInfusedOre", 3, 0, 65536);
        veinsPerChunkStoneManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneManaInfusedOre", 3, 0, 65536);
        minHeightStoneManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneManaInfusedOre", 16, 0, 256);
        maxHeightStoneManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneManaInfusedOre", 48, 0, 256);
        isTempWhitelistStoneManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneManaInfusedOre", false);
        temperatureBlacklistStoneManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistStoneManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneManaInfusedOre", false);
        biomeBlacklistStoneManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Mana Infused Ore").push("andesite_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteManaInfusedOre", true);
        veinSizeAndesiteManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteManaInfusedOre", 3, 0, 65536);
        veinsPerChunkAndesiteManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteManaInfusedOre", 3, 0, 65536);
        minHeightAndesiteManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteManaInfusedOre", 16, 0, 256);
        maxHeightAndesiteManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteManaInfusedOre", 48, 0, 256);
        isTempWhitelistAndesiteManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteManaInfusedOre", false);
        temperatureBlacklistAndesiteManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteManaInfusedOre", false);
        biomeBlacklistAndesiteManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Mana Infused Ore").push("diorite_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteManaInfusedOre", true);
        veinSizeDioriteManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteManaInfusedOre", 3, 0, 65536);
        veinsPerChunkDioriteManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteManaInfusedOre", 3, 0, 65536);
        minHeightDioriteManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteManaInfusedOre", 16, 0, 256);
        maxHeightDioriteManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteManaInfusedOre", 48, 0, 256);
        isTempWhitelistDioriteManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteManaInfusedOre", false);
        temperatureBlacklistDioriteManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistDioriteManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteManaInfusedOre", false);
        biomeBlacklistDioriteManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Mana Infused Ore").push("granite_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteManaInfusedOre", true);
        veinSizeGraniteManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteManaInfusedOre", 3, 0, 65536);
        veinsPerChunkGraniteManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteManaInfusedOre", 3, 0, 65536);
        minHeightGraniteManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteManaInfusedOre", 16, 0, 256);
        maxHeightGraniteManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteManaInfusedOre", 48, 0, 256);
        isTempWhitelistGraniteManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteManaInfusedOre", false);
        temperatureBlacklistGraniteManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistGraniteManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteManaInfusedOre", false);
        biomeBlacklistGraniteManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Mana Infused Ore").push("netherrack_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackManaInfusedOre", true);
        veinSizeNetherrackManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackManaInfusedOre", 3, 0, 65536);
        veinsPerChunkNetherrackManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackManaInfusedOre", 3, 0, 65536);
        minHeightNetherrackManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackManaInfusedOre", 32, 0, 256);
        maxHeightNetherrackManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackManaInfusedOre", 128, 0, 256);
        isTempWhitelistNetherrackManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackManaInfusedOre", false);
        temperatureBlacklistNetherrackManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackManaInfusedOre", false);
        biomeBlacklistNetherrackManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Mana Infused Ore").push("end_stone_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneManaInfusedOre", true);
        veinSizeEndStoneManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneManaInfusedOre", 3, 0, 65536);
        veinsPerChunkEndStoneManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneManaInfusedOre", 3, 0, 65536);
        minHeightEndStoneManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneManaInfusedOre", 16, 0, 256);
        maxHeightEndStoneManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneManaInfusedOre", 80, 0, 256);
        isTempWhitelistEndStoneManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneManaInfusedOre", false);
        temperatureBlacklistEndStoneManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneManaInfusedOre", false);
        biomeBlacklistEndStoneManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Mana Infused Ore").push("sand_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandManaInfusedOre", true);
        veinSizeSandManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandManaInfusedOre", 3, 0, 65536);
        veinsPerChunkSandManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandManaInfusedOre", 3, 0, 65536);
        minHeightSandManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandManaInfusedOre", 16, 0, 256);
        maxHeightSandManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandManaInfusedOre", 128, 0, 256);
        isTempWhitelistSandManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandManaInfusedOre", false);
        temperatureBlacklistSandManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistSandManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandManaInfusedOre", false);
        biomeBlacklistSandManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Mana Infused Ore").push("red_sand_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandManaInfusedOre", true);
        veinSizeRedSandManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandManaInfusedOre", 3, 0, 65536);
        veinsPerChunkRedSandManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandManaInfusedOre", 3, 0, 65536);
        minHeightRedSandManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandManaInfusedOre", 16, 0, 256);
        maxHeightRedSandManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandManaInfusedOre", 128, 0, 256);
        isTempWhitelistRedSandManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandManaInfusedOre", false);
        temperatureBlacklistRedSandManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistRedSandManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandManaInfusedOre", false);
        biomeBlacklistRedSandManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Mana Infused Ore").push("gravel_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelManaInfusedOre", true);
        veinSizeGravelManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelManaInfusedOre", 3, 0, 65536);
        veinsPerChunkGravelManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelManaInfusedOre", 3, 0, 65536);
        minHeightGravelManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelManaInfusedOre", 16, 0, 256);
        maxHeightGravelManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelManaInfusedOre", 128, 0, 256);
        isTempWhitelistGravelManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelManaInfusedOre", false);
        temperatureBlacklistGravelManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistGravelManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelManaInfusedOre", false);
        biomeBlacklistGravelManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Mana Infused Ore").push("sandstone_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneManaInfusedOre", true);
        veinSizeSandstoneManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneManaInfusedOre", 3, 0, 65536);
        veinsPerChunkSandstoneManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneManaInfusedOre", 3, 0, 65536);
        minHeightSandstoneManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneManaInfusedOre", 16, 0, 256);
        maxHeightSandstoneManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneManaInfusedOre", 128, 0, 256);
        isTempWhitelistSandstoneManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneManaInfusedOre", false);
        temperatureBlacklistSandstoneManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneManaInfusedOre", false);
        biomeBlacklistSandstoneManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Mana Infused Ore").push("red_sandstone_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneManaInfusedOre", true);
        veinSizeRedSandstoneManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneManaInfusedOre", 3, 0, 65536);
        veinsPerChunkRedSandstoneManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneManaInfusedOre", 3, 0, 65536);
        minHeightRedSandstoneManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneManaInfusedOre", 16, 0, 256);
        maxHeightRedSandstoneManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneManaInfusedOre", 128, 0, 256);
        isTempWhitelistRedSandstoneManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneManaInfusedOre", false);
        temperatureBlacklistRedSandstoneManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneManaInfusedOre", false);
        biomeBlacklistRedSandstoneManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Mana Infused Ore").push("blue_ice_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceManaInfusedOre", true);
        veinSizeBlueIceManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceManaInfusedOre", 3, 0, 65536);
        veinsPerChunkBlueIceManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceManaInfusedOre", 3, 0, 65536);
        minHeightBlueIceManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceManaInfusedOre", 16, 0, 256);
        maxHeightBlueIceManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceManaInfusedOre", 128, 0, 256);
        isTempWhitelistBlueIceManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceManaInfusedOre", false);
        temperatureBlacklistBlueIceManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceManaInfusedOre", false);
        biomeBlacklistBlueIceManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBlueIceManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Mana Infused Ore").push("packed_ice_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceManaInfusedOre", true);
        veinSizePackedIceManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceManaInfusedOre", 3, 0, 65536);
        veinsPerChunkPackedIceManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceManaInfusedOre", 3, 0, 65536);
        minHeightPackedIceManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceManaInfusedOre", 16, 0, 256);
        maxHeightPackedIceManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceManaInfusedOre", 128, 0, 256);
        isTempWhitelistPackedIceManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceManaInfusedOre", false);
        temperatureBlacklistPackedIceManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceManaInfusedOre", false);
        biomeBlacklistPackedIceManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistPackedIceManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Mana Infused Ore").push("bedrock_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockManaInfusedOre", true);
        veinSizeBedrockManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockManaInfusedOre", 1, 0, 65536);
        veinsPerChunkBedrockManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockManaInfusedOre", 1, 0, 65536);
        minHeightBedrockManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockManaInfusedOre", 16, 0, 256);
        maxHeightBedrockManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockManaInfusedOre", 256, 0, 256);
        isTempWhitelistBedrockManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockManaInfusedOre", false);
        temperatureBlacklistBedrockManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistBedrockManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockManaInfusedOre", false);
        biomeBlacklistBedrockManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBedrockManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockManaInfusedOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockManaInfusedOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Mana Infused Ore (Quark)").push("quark_basalt_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltManaInfusedOre", true);
        veinSizeQuarkBasaltManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltManaInfusedOre", 3, 0, 65536);
        veinsPerChunkQuarkBasaltManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltManaInfusedOre", 3, 0, 65536);
        minHeightQuarkBasaltManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltManaInfusedOre", 32, 0, 256);
        maxHeightQuarkBasaltManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltManaInfusedOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltManaInfusedOre", false);
        temperatureBlacklistQuarkBasaltManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltManaInfusedOre", false);
        biomeBlacklistQuarkBasaltManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Mana Infused Ore (Quark)").push("quark_limestone_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneManaInfusedOre", true);
        veinSizeQuarkLimestoneManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneManaInfusedOre", 3, 0, 65536);
        veinsPerChunkQuarkLimestoneManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneManaInfusedOre", 3, 0, 65536);
        minHeightQuarkLimestoneManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneManaInfusedOre", 16, 0, 256);
        maxHeightQuarkLimestoneManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneManaInfusedOre", 48, 0, 256);
        isTempWhitelistQuarkLimestoneManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneManaInfusedOre", false);
        temperatureBlacklistQuarkLimestoneManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneManaInfusedOre", false);
        biomeBlacklistQuarkLimestoneManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Mana Infused Ore (Quark)").push("quark_jasper_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperManaInfusedOre", true);
        veinSizeQuarkJasperManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperManaInfusedOre", 3, 0, 65536);
        veinsPerChunkQuarkJasperManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperManaInfusedOre", 3, 0, 65536);
        minHeightQuarkJasperManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperManaInfusedOre", 16, 0, 256);
        maxHeightQuarkJasperManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperManaInfusedOre", 48, 0, 256);
        isTempWhitelistQuarkJasperManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperManaInfusedOre", false);
        temperatureBlacklistQuarkJasperManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperManaInfusedOre", false);
        biomeBlacklistQuarkJasperManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Mana Infused Ore (Quark)").push("quark_marble_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleManaInfusedOre", true);
        veinSizeQuarkMarbleManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleManaInfusedOre", 3, 0, 65536);
        veinsPerChunkQuarkMarbleManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleManaInfusedOre", 3, 0, 65536);
        minHeightQuarkMarbleManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleManaInfusedOre", 16, 0, 256);
        maxHeightQuarkMarbleManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleManaInfusedOre", 48, 0, 256);
        isTempWhitelistQuarkMarbleManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleManaInfusedOre", false);
        temperatureBlacklistQuarkMarbleManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleManaInfusedOre", false);
        biomeBlacklistQuarkMarbleManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Mana Infused Ore (Quark)").push("quark_slate_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateManaInfusedOre", true);
        veinSizeQuarkSlateManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateManaInfusedOre", 3, 0, 65536);
        veinsPerChunkQuarkSlateManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateManaInfusedOre", 3, 0, 65536);
        minHeightQuarkSlateManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateManaInfusedOre", 16, 0, 256);
        maxHeightQuarkSlateManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateManaInfusedOre", 48, 0, 256);
        isTempWhitelistQuarkSlateManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateManaInfusedOre", false);
        temperatureBlacklistQuarkSlateManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateManaInfusedOre", false);
        biomeBlacklistQuarkSlateManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Mana Infused Ore (Embellishcraft)").push("embellishcraft_basalt_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltManaInfusedOre", true);
        veinSizeEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltManaInfusedOre", 3, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltManaInfusedOre", 3, 0, 65536);
        minHeightEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltManaInfusedOre", 16, 0, 256);
        maxHeightEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltManaInfusedOre", 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltManaInfusedOre", false);
        temperatureBlacklistEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltManaInfusedOre", false);
        biomeBlacklistEmbellishcraftBasaltManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Mana Infused Ore (Embellishcraft)").push("embellishcraft_gneiss_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissManaInfusedOre", true);
        veinSizeEmbellishcraftGneissManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissManaInfusedOre", 3, 0, 65536);
        veinsPerChunkEmbellishcraftGneissManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissManaInfusedOre", 3, 0, 65536);
        minHeightEmbellishcraftGneissManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissManaInfusedOre", 16, 0, 256);
        maxHeightEmbellishcraftGneissManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissManaInfusedOre", 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissManaInfusedOre", false);
        temperatureBlacklistEmbellishcraftGneissManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissManaInfusedOre", false);
        biomeBlacklistEmbellishcraftGneissManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Mana Infused Ore (Embellishcraft)").push("embellishcraft_jade_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeManaInfusedOre", true);
        veinSizeEmbellishcraftJadeManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeManaInfusedOre", 3, 0, 65536);
        veinsPerChunkEmbellishcraftJadeManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeManaInfusedOre", 3, 0, 65536);
        minHeightEmbellishcraftJadeManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeManaInfusedOre", 16, 0, 256);
        maxHeightEmbellishcraftJadeManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeManaInfusedOre", 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeManaInfusedOre", false);
        temperatureBlacklistEmbellishcraftJadeManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeManaInfusedOre", false);
        biomeBlacklistEmbellishcraftJadeManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Mana Infused Ore (Embellishcraft)").push("embellishcraft_larvikite_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteManaInfusedOre", true);
        veinSizeEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteManaInfusedOre", 3, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteManaInfusedOre", 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteManaInfusedOre", 16, 0, 256);
        maxHeightEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteManaInfusedOre", 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteManaInfusedOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteManaInfusedOre", false);
        biomeBlacklistEmbellishcraftLarvikiteManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Mana Infused Ore (Embellishcraft)").push("embellishcraft_marble_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleManaInfusedOre", true);
        veinSizeEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleManaInfusedOre", 3, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleManaInfusedOre", 3, 0, 65536);
        minHeightEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleManaInfusedOre", 16, 0, 256);
        maxHeightEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleManaInfusedOre", 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleManaInfusedOre", false);
        temperatureBlacklistEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleManaInfusedOre", false);
        biomeBlacklistEmbellishcraftMarbleManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Mana Infused Ore (Embellishcraft)").push("embellishcraft_slate_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateManaInfusedOre", true);
        veinSizeEmbellishcraftSlateManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateManaInfusedOre", 3, 0, 65536);
        veinsPerChunkEmbellishcraftSlateManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateManaInfusedOre", 3, 0, 65536);
        minHeightEmbellishcraftSlateManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateManaInfusedOre", 16, 0, 256);
        maxHeightEmbellishcraftSlateManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateManaInfusedOre", 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateManaInfusedOre", false);
        temperatureBlacklistEmbellishcraftSlateManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateManaInfusedOre", false);
        biomeBlacklistEmbellishcraftSlateManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Mana Infused Ore").push("hardened_stone_mana_infused_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneManaInfusedOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneManaInfusedOre", true);
        veinSizeHardenedStoneManaInfusedOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneManaInfusedOre", 3, 0, 65536);
        veinsPerChunkHardenedStoneManaInfusedOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneManaInfusedOre", 3, 0, 65536);
        minHeightHardenedStoneManaInfusedOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneManaInfusedOre", 16, 0, 256);
        maxHeightHardenedStoneManaInfusedOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneManaInfusedOre", 48, 0, 256);
        isTempWhitelistHardenedStoneManaInfusedOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneManaInfusedOre", false);
        temperatureBlacklistHardenedStoneManaInfusedOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneManaInfusedOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneManaInfusedOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneManaInfusedOre", false);
        biomeBlacklistHardenedStoneManaInfusedOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistHardenedStoneManaInfusedOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, ManaInfused.spec, Main.MOD_ID + "/mana_infused.toml");
    }

}
