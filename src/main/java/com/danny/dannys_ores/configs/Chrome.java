package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Chrome {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableChromeOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneChromeOre;
    public static ForgeConfigSpec.IntValue minHeightStoneChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneChromeOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteChromeOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteChromeOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteChromeOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteChromeOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteChromeOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteChromeOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackChromeOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackChromeOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneChromeOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneChromeOre;

    public static ForgeConfigSpec.BooleanValue enableSandChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeSandChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandChromeOre;
    public static ForgeConfigSpec.IntValue minHeightSandChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightSandChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandChromeOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandChromeOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandChromeOre;

    public static ForgeConfigSpec.BooleanValue enableGravelChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelChromeOre;
    public static ForgeConfigSpec.IntValue minHeightGravelChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelChromeOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneChromeOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneChromeOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceChromeOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceChromeOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceChromeOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceChromeOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceChromeOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockChromeOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockChromeOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockChromeOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltChromeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltChromeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneChromeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperChromeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperChromeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleChromeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleChromeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateChromeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateChromeOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltChromeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissChromeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeChromeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleChromeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteChromeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateChromeOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneChromeOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneChromeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneChromeOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneChromeOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneChromeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneChromeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneChromeOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Chrome Ores").push("chrome_ores");
        enableChromeOres = BUILDER.comment("Enable or disable all Chrome Ore variants.").define("enableChromeOres", true);
        BUILDER.comment("Stone Chrome Ore").push("stone_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneChromeOre", true);
        veinSizeStoneChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneChromeOre", 6, 0, 65536);
        veinsPerChunkStoneChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneChromeOre", 10, 0, 65536);
        minHeightStoneChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneChromeOre", 0, 0, 256);
        maxHeightStoneChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneChromeOre", 64, 0, 256);
        isTempWhitelistStoneChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneChromeOre", false);
        temperatureBlacklistStoneChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneChromeOre", new ArrayList<String>());
        isBiomeWhitelistStoneChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneChromeOre", false);
        biomeBlacklistStoneChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Chrome Ore").push("andesite_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteChromeOre", true);
        veinSizeAndesiteChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteChromeOre", 6, 0, 65536);
        veinsPerChunkAndesiteChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteChromeOre", 10, 0, 65536);
        minHeightAndesiteChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteChromeOre", 0, 0, 256);
        maxHeightAndesiteChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteChromeOre", 64, 0, 256);
        isTempWhitelistAndesiteChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteChromeOre", false);
        temperatureBlacklistAndesiteChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteChromeOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteChromeOre", false);
        biomeBlacklistAndesiteChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Chrome Ore").push("diorite_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteChromeOre", true);
        veinSizeDioriteChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteChromeOre", 6, 0, 65536);
        veinsPerChunkDioriteChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteChromeOre", 10, 0, 65536);
        minHeightDioriteChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteChromeOre", 0, 0, 256);
        maxHeightDioriteChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteChromeOre", 64, 0, 256);
        isTempWhitelistDioriteChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteChromeOre", false);
        temperatureBlacklistDioriteChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteChromeOre", new ArrayList<String>());
        isBiomeWhitelistDioriteChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteChromeOre", false);
        biomeBlacklistDioriteChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Chrome Ore").push("granite_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteChromeOre", true);
        veinSizeGraniteChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteChromeOre", 6, 0, 65536);
        veinsPerChunkGraniteChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteChromeOre", 10, 0, 65536);
        minHeightGraniteChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteChromeOre", 0, 0, 256);
        maxHeightGraniteChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteChromeOre", 64, 0, 256);
        isTempWhitelistGraniteChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteChromeOre", false);
        temperatureBlacklistGraniteChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteChromeOre", new ArrayList<String>());
        isBiomeWhitelistGraniteChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteChromeOre", false);
        biomeBlacklistGraniteChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Chrome Ore").push("netherrack_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackChromeOre", true);
        veinSizeNetherrackChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackChromeOre", 3, 0, 65536);
        veinsPerChunkNetherrackChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackChromeOre", 6, 0, 65536);
        minHeightNetherrackChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackChromeOre", 10, 0, 256);
        maxHeightNetherrackChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackChromeOre", 128, 0, 256);
        isTempWhitelistNetherrackChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackChromeOre", false);
        temperatureBlacklistNetherrackChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackChromeOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackChromeOre", false);
        biomeBlacklistNetherrackChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Chrome Ore").push("end_stone_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneChromeOre", true);
        veinSizeEndStoneChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneChromeOre", 3, 0, 65536);
        veinsPerChunkEndStoneChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneChromeOre", 6, 0, 65536);
        minHeightEndStoneChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneChromeOre", 0, 0, 256);
        maxHeightEndStoneChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneChromeOre", 128, 0, 256);
        isTempWhitelistEndStoneChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneChromeOre", false);
        temperatureBlacklistEndStoneChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneChromeOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneChromeOre", false);
        biomeBlacklistEndStoneChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Chrome Ore").push("sand_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandChromeOre", true);
        veinSizeSandChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandChromeOre", 3, 0, 65536);
        veinsPerChunkSandChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandChromeOre", 5, 0, 65536);
        minHeightSandChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandChromeOre", 0, 0, 256);
        maxHeightSandChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandChromeOre", 128, 0, 256);
        isTempWhitelistSandChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandChromeOre", false);
        temperatureBlacklistSandChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandChromeOre", new ArrayList<String>());
        isBiomeWhitelistSandChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandChromeOre", false);
        biomeBlacklistSandChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Chrome Ore").push("red_sand_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandChromeOre", true);
        veinSizeRedSandChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandChromeOre", 3, 0, 65536);
        veinsPerChunkRedSandChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandChromeOre", 5, 0, 65536);
        minHeightRedSandChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandChromeOre", 0, 0, 256);
        maxHeightRedSandChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandChromeOre", 128, 0, 256);
        isTempWhitelistRedSandChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandChromeOre", false);
        temperatureBlacklistRedSandChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandChromeOre", new ArrayList<String>());
        isBiomeWhitelistRedSandChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandChromeOre", false);
        biomeBlacklistRedSandChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Chrome Ore").push("gravel_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelChromeOre", true);
        veinSizeGravelChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelChromeOre", 3, 0, 65536);
        veinsPerChunkGravelChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelChromeOre", 5, 0, 65536);
        minHeightGravelChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelChromeOre", 0, 0, 256);
        maxHeightGravelChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelChromeOre", 128, 0, 256);
        isTempWhitelistGravelChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelChromeOre", false);
        temperatureBlacklistGravelChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelChromeOre", new ArrayList<String>());
        isBiomeWhitelistGravelChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelChromeOre", false);
        biomeBlacklistGravelChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Chrome Ore").push("sandstone_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneChromeOre", true);
        veinSizeSandstoneChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneChromeOre", 3, 0, 65536);
        veinsPerChunkSandstoneChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneChromeOre", 5, 0, 65536);
        minHeightSandstoneChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneChromeOre", 0, 0, 256);
        maxHeightSandstoneChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneChromeOre", 128, 0, 256);
        isTempWhitelistSandstoneChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneChromeOre", false);
        temperatureBlacklistSandstoneChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneChromeOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneChromeOre", false);
        biomeBlacklistSandstoneChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Chrome Ore").push("red_sandstone_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneChromeOre", true);
        veinSizeRedSandstoneChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneChromeOre", 3, 0, 65536);
        veinsPerChunkRedSandstoneChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneChromeOre", 5, 0, 65536);
        minHeightRedSandstoneChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneChromeOre", 0, 0, 256);
        maxHeightRedSandstoneChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneChromeOre", 128, 0, 256);
        isTempWhitelistRedSandstoneChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneChromeOre", false);
        temperatureBlacklistRedSandstoneChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneChromeOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneChromeOre", false);
        biomeBlacklistRedSandstoneChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Chrome Ore").push("blue_ice_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceChromeOre", true);
        veinSizeBlueIceChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceChromeOre", 3, 0, 65536);
        veinsPerChunkBlueIceChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceChromeOre", 5, 0, 65536);
        minHeightBlueIceChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceChromeOre", 0, 0, 256);
        maxHeightBlueIceChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceChromeOre", 128, 0, 256);
        isTempWhitelistBlueIceChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceChromeOre", false);
        temperatureBlacklistBlueIceChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceChromeOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceChromeOre", false);
        biomeBlacklistBlueIceChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBlueIceChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Chrome Ore").push("packed_ice_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceChromeOre", true);
        veinSizePackedIceChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceChromeOre", 3, 0, 65536);
        veinsPerChunkPackedIceChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceChromeOre", 5, 0, 65536);
        minHeightPackedIceChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceChromeOre", 0, 0, 256);
        maxHeightPackedIceChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceChromeOre", 128, 0, 256);
        isTempWhitelistPackedIceChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceChromeOre", false);
        temperatureBlacklistPackedIceChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceChromeOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceChromeOre", false);
        biomeBlacklistPackedIceChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistPackedIceChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Chrome Ore").push("bedrock_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockChromeOre", true);
        veinSizeBedrockChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockChromeOre", 1, 0, 65536);
        veinsPerChunkBedrockChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockChromeOre", 1, 0, 65536);
        minHeightBedrockChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockChromeOre", 0, 0, 256);
        maxHeightBedrockChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockChromeOre", 256, 0, 256);
        isTempWhitelistBedrockChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockChromeOre", false);
        temperatureBlacklistBedrockChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockChromeOre", new ArrayList<String>());
        isBiomeWhitelistBedrockChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockChromeOre", false);
        biomeBlacklistBedrockChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBedrockChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockChromeOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockChromeOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Chrome Ore (Quark)").push("quark_basalt_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltChromeOre", true);
        veinSizeQuarkBasaltChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltChromeOre", 3, 0, 65536);
        veinsPerChunkQuarkBasaltChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltChromeOre", 6, 0, 65536);
        minHeightQuarkBasaltChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltChromeOre", 10, 0, 256);
        maxHeightQuarkBasaltChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltChromeOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltChromeOre", false);
        temperatureBlacklistQuarkBasaltChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltChromeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltChromeOre", false);
        biomeBlacklistQuarkBasaltChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Chrome Ore (Quark)").push("quark_limestone_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneChromeOre", true);
        veinSizeQuarkLimestoneChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneChromeOre", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneChromeOre", 10, 0, 65536);
        minHeightQuarkLimestoneChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneChromeOre", 0, 0, 256);
        maxHeightQuarkLimestoneChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneChromeOre", 64, 0, 256);
        isTempWhitelistQuarkLimestoneChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneChromeOre", false);
        temperatureBlacklistQuarkLimestoneChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneChromeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneChromeOre", false);
        biomeBlacklistQuarkLimestoneChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Chrome Ore (Quark)").push("quark_jasper_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperChromeOre", true);
        veinSizeQuarkJasperChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperChromeOre", 6, 0, 65536);
        veinsPerChunkQuarkJasperChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperChromeOre", 10, 0, 65536);
        minHeightQuarkJasperChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperChromeOre", 0, 0, 256);
        maxHeightQuarkJasperChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperChromeOre", 64, 0, 256);
        isTempWhitelistQuarkJasperChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperChromeOre", false);
        temperatureBlacklistQuarkJasperChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperChromeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperChromeOre", false);
        biomeBlacklistQuarkJasperChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Chrome Ore (Quark)").push("quark_marble_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleChromeOre", true);
        veinSizeQuarkMarbleChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleChromeOre", 6, 0, 65536);
        veinsPerChunkQuarkMarbleChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleChromeOre", 10, 0, 65536);
        minHeightQuarkMarbleChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleChromeOre", 0, 0, 256);
        maxHeightQuarkMarbleChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleChromeOre", 64, 0, 256);
        isTempWhitelistQuarkMarbleChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleChromeOre", false);
        temperatureBlacklistQuarkMarbleChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleChromeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleChromeOre", false);
        biomeBlacklistQuarkMarbleChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Chrome Ore (Quark)").push("quark_slate_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateChromeOre", true);
        veinSizeQuarkSlateChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateChromeOre", 6, 0, 65536);
        veinsPerChunkQuarkSlateChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateChromeOre", 10, 0, 65536);
        minHeightQuarkSlateChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateChromeOre", 0, 0, 256);
        maxHeightQuarkSlateChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateChromeOre", 64, 0, 256);
        isTempWhitelistQuarkSlateChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateChromeOre", false);
        temperatureBlacklistQuarkSlateChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateChromeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateChromeOre", false);
        biomeBlacklistQuarkSlateChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Chrome Ore (Embellishcraft)").push("embellishcraft_basalt_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltChromeOre", true);
        veinSizeEmbellishcraftBasaltChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltChromeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltChromeOre", 10, 0, 65536);
        minHeightEmbellishcraftBasaltChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltChromeOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltChromeOre", 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltChromeOre", false);
        temperatureBlacklistEmbellishcraftBasaltChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltChromeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltChromeOre", false);
        biomeBlacklistEmbellishcraftBasaltChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Chrome Ore (Embellishcraft)").push("embellishcraft_gneiss_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissChromeOre", true);
        veinSizeEmbellishcraftGneissChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissChromeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissChromeOre", 10, 0, 65536);
        minHeightEmbellishcraftGneissChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissChromeOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissChromeOre", 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissChromeOre", false);
        temperatureBlacklistEmbellishcraftGneissChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissChromeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissChromeOre", false);
        biomeBlacklistEmbellishcraftGneissChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Chrome Ore (Embellishcraft)").push("embellishcraft_jade_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeChromeOre", true);
        veinSizeEmbellishcraftJadeChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeChromeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeChromeOre", 10, 0, 65536);
        minHeightEmbellishcraftJadeChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeChromeOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeChromeOre", 64, 0, 256);
        isTempWhitelistEmbellishcraftJadeChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeChromeOre", false);
        temperatureBlacklistEmbellishcraftJadeChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeChromeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeChromeOre", false);
        biomeBlacklistEmbellishcraftJadeChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Chrome Ore (Embellishcraft)").push("embellishcraft_larvikite_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteChromeOre", true);
        veinSizeEmbellishcraftLarvikiteChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteChromeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteChromeOre", 10, 0, 65536);
        minHeightEmbellishcraftLarvikiteChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteChromeOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteChromeOre", 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteChromeOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteChromeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteChromeOre", false);
        biomeBlacklistEmbellishcraftLarvikiteChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Chrome Ore (Embellishcraft)").push("embellishcraft_marble_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleChromeOre", true);
        veinSizeEmbellishcraftMarbleChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleChromeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleChromeOre", 10, 0, 65536);
        minHeightEmbellishcraftMarbleChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleChromeOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleChromeOre", 64, 0, 256);
        isTempWhitelistEmbellishcraftMarbleChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleChromeOre", false);
        temperatureBlacklistEmbellishcraftMarbleChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleChromeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleChromeOre", false);
        biomeBlacklistEmbellishcraftMarbleChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Chrome Ore (Embellishcraft)").push("embellishcraft_slate_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateChromeOre", true);
        veinSizeEmbellishcraftSlateChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateChromeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateChromeOre", 10, 0, 65536);
        minHeightEmbellishcraftSlateChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateChromeOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateChromeOre", 64, 0, 256);
        isTempWhitelistEmbellishcraftSlateChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateChromeOre", false);
        temperatureBlacklistEmbellishcraftSlateChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateChromeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateChromeOre", false);
        biomeBlacklistEmbellishcraftSlateChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Chrome Ore").push("hardened_stone_chrome_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneChromeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneChromeOre", true);
        veinSizeHardenedStoneChromeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneChromeOre", 6, 0, 65536);
        veinsPerChunkHardenedStoneChromeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneChromeOre", 10, 0, 65536);
        minHeightHardenedStoneChromeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneChromeOre", 0, 0, 256);
        maxHeightHardenedStoneChromeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneChromeOre", 64, 0, 256);
        isTempWhitelistHardenedStoneChromeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneChromeOre", false);
        temperatureBlacklistHardenedStoneChromeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneChromeOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneChromeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneChromeOre", false);
        biomeBlacklistHardenedStoneChromeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistHardenedStoneChromeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Chrome.spec, Main.MOD_ID + "/chrome.toml");
    }
}
