package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Osmium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableOsmiumOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockOsmiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockOsmiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateOsmiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteOsmiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateOsmiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneOsmiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneOsmiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Osmium Ores").push("general");
        disableOsmiumOres = BUILDER.comment("If false, all osmium ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Osmium Ore").push("stone_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkStoneOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightStoneOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistStoneOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Osmium Ore").push("andesite_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkAndesiteOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightAndesiteOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistAndesiteOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Osmium Ore").push("diorite_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkDioriteOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightDioriteOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistDioriteOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Osmium Ore").push("granite_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkGraniteOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightGraniteOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistGraniteOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Osmium Ore").push("netherrack_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkNetherrackOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightNetherrackOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Osmium Ore").push("end_stone_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEndStoneOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightEndStoneOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Osmium Ore").push("sand_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightSandOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Osmium Ore").push("red_sand_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightRedSandOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Osmium Ore").push("gravel_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGravelOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightGravelOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Osmium Ore").push("sandstone_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandstoneOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightSandstoneOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Osmium Ore").push("red_sandstone_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandstoneOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightRedSandstoneOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Osmium Ore").push("blue_ice_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkBlueIceOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightBlueIceOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Osmium Ore").push("packed_ice_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkPackedIceOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightPackedIceOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Osmium Ore").push("bedrock_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockOsmiumOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockOsmiumOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Osmium Ore (Quark)").push("quark_basalt_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkBasaltOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightQuarkBasaltOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Osmium Ore (Quark)").push("quark_limestone_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkLimestoneOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkLimestoneOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkLimestoneOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Osmium Ore (Quark)").push("quark_jasper_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkJasperOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkJasperOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkJasperOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Osmium Ore (Quark)").push("quark_marble_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkMarbleOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkMarbleOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkMarbleOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Osmium Ore (Quark)").push("quark_slate_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkSlateOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkSlateOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkSlateOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Osmium Ore (Embellishcraft)").push("embellishcraft_basalt_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftBasaltOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Osmium Ore (Embellishcraft)").push("embellishcraft_gneiss_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftGneissOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Osmium Ore (Embellishcraft)").push("embellishcraft_jade_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftJadeOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftJadeOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Osmium Ore (Embellishcraft)").push("embellishcraft_larvikite_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Osmium Ore (Embellishcraft)").push("embellishcraft_marble_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftMarbleOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftMarbleOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Osmium Ore (Embellishcraft)").push("embellishcraft_slate_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftSlateOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftSlateOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Osmium Ore").push("hardened_stone_osmium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneOsmiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneOsmiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkHardenedStoneOsmiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightHardenedStoneOsmiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneOsmiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistHardenedStoneOsmiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneOsmiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneOsmiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneOsmiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Osmium.spec, Main.MOD_ID + "/osmium.toml");
    }
}
