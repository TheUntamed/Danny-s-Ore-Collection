package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Nickel {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableNickelOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneNickelOre;
    public static ForgeConfigSpec.IntValue minHeightStoneNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneNickelOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteNickelOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteNickelOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteNickelOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteNickelOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteNickelOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteNickelOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackNickelOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackNickelOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneNickelOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneNickelOre;

    public static ForgeConfigSpec.BooleanValue enableSandNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeSandNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandNickelOre;
    public static ForgeConfigSpec.IntValue minHeightSandNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightSandNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandNickelOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandNickelOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandNickelOre;

    public static ForgeConfigSpec.BooleanValue enableGravelNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelNickelOre;
    public static ForgeConfigSpec.IntValue minHeightGravelNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelNickelOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneNickelOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneNickelOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceNickelOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceNickelOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceNickelOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceNickelOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceNickelOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceNickelOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceNickelOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockNickelOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockNickelOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockNickelOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltNickelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltNickelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneNickelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperNickelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperNickelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleNickelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleNickelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateNickelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateNickelOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltNickelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissNickelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeNickelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleNickelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteNickelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateNickelOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneNickelOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneNickelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneNickelOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneNickelOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneNickelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneNickelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneNickelOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Nickel Ores").push("nickel_ores");
        enableNickelOres = BUILDER.comment("Enable or disable all Nickel Ore variants.").define("enableNickelOres", true);
        BUILDER.comment("Stone Nickel Ore").push("stone_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneNickelOre", true);
        veinSizeStoneNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneNickelOre", 6, 0, 65536);
        veinsPerChunkStoneNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneNickelOre", 1, 0, 65536);
        minHeightStoneNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneNickelOre", 0, 0, 256);
        maxHeightStoneNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneNickelOre", 24, 0, 256);
        isTempWhitelistStoneNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneNickelOre", false);
        temperatureBlacklistStoneNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneNickelOre", new ArrayList<String>());
        isBiomeWhitelistStoneNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneNickelOre", false);
        biomeBlacklistStoneNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Nickel Ore").push("andesite_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteNickelOre", true);
        veinSizeAndesiteNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteNickelOre", 6, 0, 65536);
        veinsPerChunkAndesiteNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteNickelOre", 1, 0, 65536);
        minHeightAndesiteNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteNickelOre", 0, 0, 256);
        maxHeightAndesiteNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteNickelOre", 24, 0, 256);
        isTempWhitelistAndesiteNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteNickelOre", false);
        temperatureBlacklistAndesiteNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteNickelOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteNickelOre", false);
        biomeBlacklistAndesiteNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Nickel Ore").push("diorite_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteNickelOre", true);
        veinSizeDioriteNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteNickelOre", 6, 0, 65536);
        veinsPerChunkDioriteNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteNickelOre", 1, 0, 65536);
        minHeightDioriteNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteNickelOre", 0, 0, 256);
        maxHeightDioriteNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteNickelOre", 24, 0, 256);
        isTempWhitelistDioriteNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteNickelOre", false);
        temperatureBlacklistDioriteNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteNickelOre", new ArrayList<String>());
        isBiomeWhitelistDioriteNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteNickelOre", false);
        biomeBlacklistDioriteNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Nickel Ore").push("granite_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteNickelOre", true);
        veinSizeGraniteNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteNickelOre", 6, 0, 65536);
        veinsPerChunkGraniteNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteNickelOre", 1, 0, 65536);
        minHeightGraniteNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteNickelOre", 0, 0, 256);
        maxHeightGraniteNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteNickelOre", 24, 0, 256);
        isTempWhitelistGraniteNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteNickelOre", false);
        temperatureBlacklistGraniteNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteNickelOre", new ArrayList<String>());
        isBiomeWhitelistGraniteNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteNickelOre", false);
        biomeBlacklistGraniteNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Nickel Ore").push("netherrack_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackNickelOre", true);
        veinSizeNetherrackNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackNickelOre", 6, 0, 65536);
        veinsPerChunkNetherrackNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackNickelOre", 1, 0, 65536);
        minHeightNetherrackNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackNickelOre", 10, 0, 256);
        maxHeightNetherrackNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackNickelOre", 128, 0, 256);
        isTempWhitelistNetherrackNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackNickelOre", false);
        temperatureBlacklistNetherrackNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackNickelOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackNickelOre", false);
        biomeBlacklistNetherrackNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Nickel Ore").push("end_stone_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneNickelOre", true);
        veinSizeEndStoneNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneNickelOre", 6, 0, 65536);
        veinsPerChunkEndStoneNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneNickelOre", 1, 0, 65536);
        minHeightEndStoneNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneNickelOre", 0, 0, 256);
        maxHeightEndStoneNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneNickelOre", 128, 0, 256);
        isTempWhitelistEndStoneNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneNickelOre", false);
        temperatureBlacklistEndStoneNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneNickelOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneNickelOre", false);
        biomeBlacklistEndStoneNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Nickel Ore").push("sand_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandNickelOre", true);
        veinSizeSandNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandNickelOre", 6, 0, 65536);
        veinsPerChunkSandNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandNickelOre", 1, 0, 65536);
        minHeightSandNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandNickelOre", 0, 0, 256);
        maxHeightSandNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandNickelOre", 128, 0, 256);
        isTempWhitelistSandNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandNickelOre", false);
        temperatureBlacklistSandNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandNickelOre", new ArrayList<String>());
        isBiomeWhitelistSandNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandNickelOre", false);
        biomeBlacklistSandNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Nickel Ore").push("red_sand_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandNickelOre", true);
        veinSizeRedSandNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandNickelOre", 6, 0, 65536);
        veinsPerChunkRedSandNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandNickelOre", 1, 0, 65536);
        minHeightRedSandNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandNickelOre", 0, 0, 256);
        maxHeightRedSandNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandNickelOre", 128, 0, 256);
        isTempWhitelistRedSandNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandNickelOre", false);
        temperatureBlacklistRedSandNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandNickelOre", new ArrayList<String>());
        isBiomeWhitelistRedSandNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandNickelOre", false);
        biomeBlacklistRedSandNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Nickel Ore").push("gravel_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelNickelOre", true);
        veinSizeGravelNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelNickelOre", 6, 0, 65536);
        veinsPerChunkGravelNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelNickelOre", 1, 0, 65536);
        minHeightGravelNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelNickelOre", 0, 0, 256);
        maxHeightGravelNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelNickelOre", 128, 0, 256);
        isTempWhitelistGravelNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelNickelOre", false);
        temperatureBlacklistGravelNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelNickelOre", new ArrayList<String>());
        isBiomeWhitelistGravelNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelNickelOre", false);
        biomeBlacklistGravelNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Nickel Ore").push("sandstone_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneNickelOre", true);
        veinSizeSandstoneNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneNickelOre", 6, 0, 65536);
        veinsPerChunkSandstoneNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneNickelOre", 1, 0, 65536);
        minHeightSandstoneNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneNickelOre", 0, 0, 256);
        maxHeightSandstoneNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneNickelOre", 128, 0, 256);
        isTempWhitelistSandstoneNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneNickelOre", false);
        temperatureBlacklistSandstoneNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneNickelOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneNickelOre", false);
        biomeBlacklistSandstoneNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Nickel Ore").push("red_sandstone_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneNickelOre", true);
        veinSizeRedSandstoneNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneNickelOre", 6, 0, 65536);
        veinsPerChunkRedSandstoneNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneNickelOre", 1, 0, 65536);
        minHeightRedSandstoneNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneNickelOre", 0, 0, 256);
        maxHeightRedSandstoneNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneNickelOre", 128, 0, 256);
        isTempWhitelistRedSandstoneNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneNickelOre", false);
        temperatureBlacklistRedSandstoneNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneNickelOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneNickelOre", false);
        biomeBlacklistRedSandstoneNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Nickel Ore").push("blue_ice_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceNickelOre", true);
        veinSizeBlueIceNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceNickelOre", 6, 0, 65536);
        veinsPerChunkBlueIceNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceNickelOre", 1, 0, 65536);
        minHeightBlueIceNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceNickelOre", 0, 0, 256);
        maxHeightBlueIceNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceNickelOre", 128, 0, 256);
        isTempWhitelistBlueIceNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceNickelOre", false);
        temperatureBlacklistBlueIceNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceNickelOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceNickelOre", false);
        biomeBlacklistBlueIceNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBlueIceNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Nickel Ore").push("packed_ice_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceNickelOre", true);
        veinSizePackedIceNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceNickelOre", 6, 0, 65536);
        veinsPerChunkPackedIceNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceNickelOre", 1, 0, 65536);
        minHeightPackedIceNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceNickelOre", 0, 0, 256);
        maxHeightPackedIceNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceNickelOre", 128, 0, 256);
        isTempWhitelistPackedIceNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceNickelOre", false);
        temperatureBlacklistPackedIceNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceNickelOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceNickelOre", false);
        biomeBlacklistPackedIceNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistPackedIceNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Nickel Ore").push("bedrock_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockNickelOre", true);
        veinSizeBedrockNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockNickelOre", 1, 0, 65536);
        veinsPerChunkBedrockNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockNickelOre", 1, 0, 65536);
        minHeightBedrockNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockNickelOre", 0, 0, 256);
        maxHeightBedrockNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockNickelOre", 256, 0, 256);
        isTempWhitelistBedrockNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockNickelOre", false);
        temperatureBlacklistBedrockNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockNickelOre", new ArrayList<String>());
        isBiomeWhitelistBedrockNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockNickelOre", false);
        biomeBlacklistBedrockNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBedrockNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockNickelOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockNickelOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Nickel Ore (Quark)").push("quark_basalt_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltNickelOre", true);
        veinSizeQuarkBasaltNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltNickelOre", 6, 0, 65536);
        veinsPerChunkQuarkBasaltNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltNickelOre", 1, 0, 65536);
        minHeightQuarkBasaltNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltNickelOre", 10, 0, 256);
        maxHeightQuarkBasaltNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltNickelOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltNickelOre", false);
        temperatureBlacklistQuarkBasaltNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltNickelOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltNickelOre", false);
        biomeBlacklistQuarkBasaltNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Nickel Ore (Quark)").push("quark_limestone_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneNickelOre", true);
        veinSizeQuarkLimestoneNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneNickelOre", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneNickelOre", 1, 0, 65536);
        minHeightQuarkLimestoneNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneNickelOre", 0, 0, 256);
        maxHeightQuarkLimestoneNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneNickelOre", 24, 0, 256);
        isTempWhitelistQuarkLimestoneNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneNickelOre", false);
        temperatureBlacklistQuarkLimestoneNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneNickelOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneNickelOre", false);
        biomeBlacklistQuarkLimestoneNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Nickel Ore (Quark)").push("quark_jasper_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperNickelOre", true);
        veinSizeQuarkJasperNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperNickelOre", 6, 0, 65536);
        veinsPerChunkQuarkJasperNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperNickelOre", 1, 0, 65536);
        minHeightQuarkJasperNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperNickelOre", 0, 0, 256);
        maxHeightQuarkJasperNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperNickelOre", 24, 0, 256);
        isTempWhitelistQuarkJasperNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperNickelOre", false);
        temperatureBlacklistQuarkJasperNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperNickelOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperNickelOre", false);
        biomeBlacklistQuarkJasperNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Nickel Ore (Quark)").push("quark_marble_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleNickelOre", true);
        veinSizeQuarkMarbleNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleNickelOre", 6, 0, 65536);
        veinsPerChunkQuarkMarbleNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleNickelOre", 1, 0, 65536);
        minHeightQuarkMarbleNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleNickelOre", 0, 0, 256);
        maxHeightQuarkMarbleNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleNickelOre", 24, 0, 256);
        isTempWhitelistQuarkMarbleNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleNickelOre", false);
        temperatureBlacklistQuarkMarbleNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleNickelOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleNickelOre", false);
        biomeBlacklistQuarkMarbleNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Nickel Ore (Quark)").push("quark_slate_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateNickelOre", true);
        veinSizeQuarkSlateNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateNickelOre", 6, 0, 65536);
        veinsPerChunkQuarkSlateNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateNickelOre", 1, 0, 65536);
        minHeightQuarkSlateNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateNickelOre", 0, 0, 256);
        maxHeightQuarkSlateNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateNickelOre", 24, 0, 256);
        isTempWhitelistQuarkSlateNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateNickelOre", false);
        temperatureBlacklistQuarkSlateNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateNickelOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateNickelOre", false);
        biomeBlacklistQuarkSlateNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Nickel Ore (Embellishcraft)").push("embellishcraft_basalt_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltNickelOre", true);
        veinSizeEmbellishcraftBasaltNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltNickelOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltNickelOre", 1, 0, 65536);
        minHeightEmbellishcraftBasaltNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltNickelOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltNickelOre", 24, 0, 256);
        isTempWhitelistEmbellishcraftBasaltNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltNickelOre", false);
        temperatureBlacklistEmbellishcraftBasaltNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltNickelOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltNickelOre", false);
        biomeBlacklistEmbellishcraftBasaltNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Nickel Ore (Embellishcraft)").push("embellishcraft_gneiss_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissNickelOre", true);
        veinSizeEmbellishcraftGneissNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissNickelOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissNickelOre", 1, 0, 65536);
        minHeightEmbellishcraftGneissNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissNickelOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissNickelOre", 24, 0, 256);
        isTempWhitelistEmbellishcraftGneissNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissNickelOre", false);
        temperatureBlacklistEmbellishcraftGneissNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissNickelOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissNickelOre", false);
        biomeBlacklistEmbellishcraftGneissNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Nickel Ore (Embellishcraft)").push("embellishcraft_jade_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeNickelOre", true);
        veinSizeEmbellishcraftJadeNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeNickelOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeNickelOre", 1, 0, 65536);
        minHeightEmbellishcraftJadeNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeNickelOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeNickelOre", 24, 0, 256);
        isTempWhitelistEmbellishcraftJadeNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeNickelOre", false);
        temperatureBlacklistEmbellishcraftJadeNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeNickelOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeNickelOre", false);
        biomeBlacklistEmbellishcraftJadeNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Nickel Ore (Embellishcraft)").push("embellishcraft_larvikite_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteNickelOre", true);
        veinSizeEmbellishcraftLarvikiteNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteNickelOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteNickelOre", 1, 0, 65536);
        minHeightEmbellishcraftLarvikiteNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteNickelOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteNickelOre", 24, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteNickelOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteNickelOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteNickelOre", false);
        biomeBlacklistEmbellishcraftLarvikiteNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Nickel Ore (Embellishcraft)").push("embellishcraft_marble_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleNickelOre", true);
        veinSizeEmbellishcraftMarbleNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleNickelOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleNickelOre", 1, 0, 65536);
        minHeightEmbellishcraftMarbleNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleNickelOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleNickelOre", 24, 0, 256);
        isTempWhitelistEmbellishcraftMarbleNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleNickelOre", false);
        temperatureBlacklistEmbellishcraftMarbleNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleNickelOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleNickelOre", false);
        biomeBlacklistEmbellishcraftMarbleNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Nickel Ore (Embellishcraft)").push("embellishcraft_slate_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateNickelOre", true);
        veinSizeEmbellishcraftSlateNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateNickelOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateNickelOre", 1, 0, 65536);
        minHeightEmbellishcraftSlateNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateNickelOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateNickelOre", 24, 0, 256);
        isTempWhitelistEmbellishcraftSlateNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateNickelOre", false);
        temperatureBlacklistEmbellishcraftSlateNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateNickelOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateNickelOre", false);
        biomeBlacklistEmbellishcraftSlateNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Nickel Ore").push("hardened_stone_nickel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneNickelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneNickelOre", true);
        veinSizeHardenedStoneNickelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneNickelOre", 6, 0, 65536);
        veinsPerChunkHardenedStoneNickelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneNickelOre", 1, 0, 65536);
        minHeightHardenedStoneNickelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneNickelOre", 0, 0, 256);
        maxHeightHardenedStoneNickelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneNickelOre", 24, 0, 256);
        isTempWhitelistHardenedStoneNickelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneNickelOre", false);
        temperatureBlacklistHardenedStoneNickelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneNickelOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneNickelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneNickelOre", false);
        biomeBlacklistHardenedStoneNickelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistHardenedStoneNickelOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Nickel.spec, Main.MOD_ID + "/nickel.toml");
    }
}
