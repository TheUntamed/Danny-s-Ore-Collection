package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Ardite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableArditeOres;

    public static ForgeConfigSpec.BooleanValue enableStoneArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneArditeOre;
    public static ForgeConfigSpec.IntValue minHeightStoneArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneArditeOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteArditeOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteArditeOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteArditeOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteArditeOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteArditeOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteArditeOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackArditeOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackArditeOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneArditeOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneArditeOre;

    public static ForgeConfigSpec.BooleanValue enableSandArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeSandArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandArditeOre;
    public static ForgeConfigSpec.IntValue minHeightSandArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightSandArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandArditeOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandArditeOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandArditeOre;

    public static ForgeConfigSpec.BooleanValue enableGravelArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelArditeOre;
    public static ForgeConfigSpec.IntValue minHeightGravelArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelArditeOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneArditeOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneArditeOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceArditeOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceArditeOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceArditeOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceArditeOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceArditeOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockArditeOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockArditeOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockArditeOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltArditeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltArditeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneArditeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperArditeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperArditeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleArditeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleArditeOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateArditeOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateArditeOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltArditeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissArditeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeArditeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleArditeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteArditeOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateArditeOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneArditeOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneArditeOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneArditeOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneArditeOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneArditeOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneArditeOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneArditeOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Ardite Ores").push("ardite_ores");
        enableArditeOres = BUILDER.comment("Enable or disable all Ardite Ore variants.").define("enableArditeOres", true);
        BUILDER.comment("Stone Ardite Ore").push("stone_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneArditeOre", true);
        veinSizeStoneArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneArditeOre", 6, 0, 65536);
        veinsPerChunkStoneArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneArditeOre", 2, 0, 65536);
        minHeightStoneArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneArditeOre", 0, 0, 256);
        maxHeightStoneArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneArditeOre", 16, 0, 256);
        isTempWhitelistStoneArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneArditeOre", false);
        temperatureBlacklistStoneArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneArditeOre", new ArrayList<String>());
        isBiomeWhitelistStoneArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneArditeOre", false);
        biomeBlacklistStoneArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Ardite Ore").push("andesite_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteArditeOre", true);
        veinSizeAndesiteArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteArditeOre", 6, 0, 65536);
        veinsPerChunkAndesiteArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteArditeOre", 2, 0, 65536);
        minHeightAndesiteArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteArditeOre", 0, 0, 256);
        maxHeightAndesiteArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteArditeOre", 16, 0, 256);
        isTempWhitelistAndesiteArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteArditeOre", false);
        temperatureBlacklistAndesiteArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteArditeOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteArditeOre", false);
        biomeBlacklistAndesiteArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Ardite Ore").push("diorite_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteArditeOre", true);
        veinSizeDioriteArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteArditeOre", 6, 0, 65536);
        veinsPerChunkDioriteArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteArditeOre", 2, 0, 65536);
        minHeightDioriteArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteArditeOre", 0, 0, 256);
        maxHeightDioriteArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteArditeOre", 16, 0, 256);
        isTempWhitelistDioriteArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteArditeOre", false);
        temperatureBlacklistDioriteArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteArditeOre", new ArrayList<String>());
        isBiomeWhitelistDioriteArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteArditeOre", false);
        biomeBlacklistDioriteArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Ardite Ore").push("granite_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteArditeOre", true);
        veinSizeGraniteArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteArditeOre", 6, 0, 65536);
        veinsPerChunkGraniteArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteArditeOre", 2, 0, 65536);
        minHeightGraniteArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteArditeOre", 0, 0, 256);
        maxHeightGraniteArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteArditeOre", 16, 0, 256);
        isTempWhitelistGraniteArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteArditeOre", false);
        temperatureBlacklistGraniteArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteArditeOre", new ArrayList<String>());
        isBiomeWhitelistGraniteArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteArditeOre", false);
        biomeBlacklistGraniteArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Ardite Ore").push("netherrack_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackArditeOre", true);
        veinSizeNetherrackArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackArditeOre", 6, 0, 65536);
        veinsPerChunkNetherrackArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackArditeOre", 2, 0, 65536);
        minHeightNetherrackArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackArditeOre", 96, 0, 256);
        maxHeightNetherrackArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackArditeOre", 128, 0, 256);
        isTempWhitelistNetherrackArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackArditeOre", false);
        temperatureBlacklistNetherrackArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackArditeOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackArditeOre", false);
        biomeBlacklistNetherrackArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Ardite Ore").push("end_stone_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneArditeOre", true);
        veinSizeEndStoneArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneArditeOre", 6, 0, 65536);
        veinsPerChunkEndStoneArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneArditeOre", 2, 0, 65536);
        minHeightEndStoneArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneArditeOre", 0, 0, 256);
        maxHeightEndStoneArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneArditeOre", 32, 0, 256);
        isTempWhitelistEndStoneArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneArditeOre", false);
        temperatureBlacklistEndStoneArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneArditeOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneArditeOre", false);
        biomeBlacklistEndStoneArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Ardite Ore").push("sand_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandArditeOre", true);
        veinSizeSandArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandArditeOre", 3, 0, 65536);
        veinsPerChunkSandArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandArditeOre", 2, 0, 65536);
        minHeightSandArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandArditeOre", 0, 0, 256);
        maxHeightSandArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandArditeOre", 128, 0, 256);
        isTempWhitelistSandArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandArditeOre", false);
        temperatureBlacklistSandArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandArditeOre", new ArrayList<String>());
        isBiomeWhitelistSandArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandArditeOre", false);
        biomeBlacklistSandArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Ardite Ore").push("red_sand_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandArditeOre", true);
        veinSizeRedSandArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandArditeOre", 3, 0, 65536);
        veinsPerChunkRedSandArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandArditeOre", 2, 0, 65536);
        minHeightRedSandArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandArditeOre", 0, 0, 256);
        maxHeightRedSandArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandArditeOre", 128, 0, 256);
        isTempWhitelistRedSandArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandArditeOre", false);
        temperatureBlacklistRedSandArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandArditeOre", new ArrayList<String>());
        isBiomeWhitelistRedSandArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandArditeOre", false);
        biomeBlacklistRedSandArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Ardite Ore").push("gravel_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelArditeOre", true);
        veinSizeGravelArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelArditeOre", 3, 0, 65536);
        veinsPerChunkGravelArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelArditeOre", 2, 0, 65536);
        minHeightGravelArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelArditeOre", 0, 0, 256);
        maxHeightGravelArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelArditeOre", 128, 0, 256);
        isTempWhitelistGravelArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelArditeOre", false);
        temperatureBlacklistGravelArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelArditeOre", new ArrayList<String>());
        isBiomeWhitelistGravelArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelArditeOre", false);
        biomeBlacklistGravelArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Ardite Ore").push("sandstone_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneArditeOre", true);
        veinSizeSandstoneArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneArditeOre", 3, 0, 65536);
        veinsPerChunkSandstoneArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneArditeOre", 2, 0, 65536);
        minHeightSandstoneArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneArditeOre", 0, 0, 256);
        maxHeightSandstoneArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneArditeOre", 128, 0, 256);
        isTempWhitelistSandstoneArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneArditeOre", false);
        temperatureBlacklistSandstoneArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneArditeOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneArditeOre", false);
        biomeBlacklistSandstoneArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Ardite Ore").push("red_sandstone_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneArditeOre", true);
        veinSizeRedSandstoneArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneArditeOre", 3, 0, 65536);
        veinsPerChunkRedSandstoneArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneArditeOre", 2, 0, 65536);
        minHeightRedSandstoneArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneArditeOre", 0, 0, 256);
        maxHeightRedSandstoneArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneArditeOre", 128, 0, 256);
        isTempWhitelistRedSandstoneArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneArditeOre", false);
        temperatureBlacklistRedSandstoneArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneArditeOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneArditeOre", false);
        biomeBlacklistRedSandstoneArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Ardite Ore").push("blue_ice_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceArditeOre", true);
        veinSizeBlueIceArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceArditeOre", 3, 0, 65536);
        veinsPerChunkBlueIceArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceArditeOre", 2, 0, 65536);
        minHeightBlueIceArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceArditeOre", 0, 0, 256);
        maxHeightBlueIceArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceArditeOre", 128, 0, 256);
        isTempWhitelistBlueIceArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceArditeOre", false);
        temperatureBlacklistBlueIceArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceArditeOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceArditeOre", false);
        biomeBlacklistBlueIceArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBlueIceArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Ardite Ore").push("packed_ice_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceArditeOre", true);
        veinSizePackedIceArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceArditeOre", 3, 0, 65536);
        veinsPerChunkPackedIceArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceArditeOre", 2, 0, 65536);
        minHeightPackedIceArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceArditeOre", 0, 0, 256);
        maxHeightPackedIceArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceArditeOre", 128, 0, 256);
        isTempWhitelistPackedIceArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceArditeOre", false);
        temperatureBlacklistPackedIceArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceArditeOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceArditeOre", false);
        biomeBlacklistPackedIceArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistPackedIceArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Ardite Ore").push("bedrock_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockArditeOre", true);
        veinSizeBedrockArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockArditeOre", 1, 0, 65536);
        veinsPerChunkBedrockArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockArditeOre", 1, 0, 65536);
        minHeightBedrockArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockArditeOre", 0, 0, 256);
        maxHeightBedrockArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockArditeOre", 256, 0, 256);
        isTempWhitelistBedrockArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockArditeOre", false);
        temperatureBlacklistBedrockArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockArditeOre", new ArrayList<String>());
        isBiomeWhitelistBedrockArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockArditeOre", false);
        biomeBlacklistBedrockArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistBedrockArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockArditeOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockArditeOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Ardite Ore (Quark)").push("quark_basalt_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltArditeOre", true);
        veinSizeQuarkBasaltArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltArditeOre", 6, 0, 65536);
        veinsPerChunkQuarkBasaltArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltArditeOre", 2, 0, 65536);
        minHeightQuarkBasaltArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltArditeOre", 96, 0, 256);
        maxHeightQuarkBasaltArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltArditeOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltArditeOre", false);
        temperatureBlacklistQuarkBasaltArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltArditeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltArditeOre", false);
        biomeBlacklistQuarkBasaltArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Ardite Ore (Quark)").push("quark_limestone_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneArditeOre", true);
        veinSizeQuarkLimestoneArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneArditeOre", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneArditeOre", 2, 0, 65536);
        minHeightQuarkLimestoneArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneArditeOre", 0, 0, 256);
        maxHeightQuarkLimestoneArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneArditeOre", 16, 0, 256);
        isTempWhitelistQuarkLimestoneArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneArditeOre", false);
        temperatureBlacklistQuarkLimestoneArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneArditeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneArditeOre", false);
        biomeBlacklistQuarkLimestoneArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Ardite Ore (Quark)").push("quark_jasper_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperArditeOre", true);
        veinSizeQuarkJasperArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperArditeOre", 6, 0, 65536);
        veinsPerChunkQuarkJasperArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperArditeOre", 2, 0, 65536);
        minHeightQuarkJasperArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperArditeOre", 0, 0, 256);
        maxHeightQuarkJasperArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperArditeOre", 16, 0, 256);
        isTempWhitelistQuarkJasperArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperArditeOre", false);
        temperatureBlacklistQuarkJasperArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperArditeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperArditeOre", false);
        biomeBlacklistQuarkJasperArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Ardite Ore (Quark)").push("quark_marble_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleArditeOre", true);
        veinSizeQuarkMarbleArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleArditeOre", 6, 0, 65536);
        veinsPerChunkQuarkMarbleArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleArditeOre", 2, 0, 65536);
        minHeightQuarkMarbleArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleArditeOre", 0, 0, 256);
        maxHeightQuarkMarbleArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleArditeOre", 16, 0, 256);
        isTempWhitelistQuarkMarbleArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleArditeOre", false);
        temperatureBlacklistQuarkMarbleArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleArditeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleArditeOre", false);
        biomeBlacklistQuarkMarbleArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Ardite Ore (Quark)").push("quark_slate_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateArditeOre", true);
        veinSizeQuarkSlateArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateArditeOre", 6, 0, 65536);
        veinsPerChunkQuarkSlateArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateArditeOre", 2, 0, 65536);
        minHeightQuarkSlateArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateArditeOre", 0, 0, 256);
        maxHeightQuarkSlateArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateArditeOre", 16, 0, 256);
        isTempWhitelistQuarkSlateArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateArditeOre", false);
        temperatureBlacklistQuarkSlateArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateArditeOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateArditeOre", false);
        biomeBlacklistQuarkSlateArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Ardite Ore (Embellishcraft)").push("embellishcraft_basalt_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltArditeOre", true);
        veinSizeEmbellishcraftBasaltArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltArditeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltArditeOre", 2, 0, 65536);
        minHeightEmbellishcraftBasaltArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltArditeOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltArditeOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltArditeOre", false);
        temperatureBlacklistEmbellishcraftBasaltArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltArditeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltArditeOre", false);
        biomeBlacklistEmbellishcraftBasaltArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Ardite Ore (Embellishcraft)").push("embellishcraft_gneiss_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissArditeOre", true);
        veinSizeEmbellishcraftGneissArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissArditeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissArditeOre", 2, 0, 65536);
        minHeightEmbellishcraftGneissArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissArditeOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissArditeOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissArditeOre", false);
        temperatureBlacklistEmbellishcraftGneissArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissArditeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissArditeOre", false);
        biomeBlacklistEmbellishcraftGneissArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Ardite Ore (Embellishcraft)").push("embellishcraft_jade_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeArditeOre", true);
        veinSizeEmbellishcraftJadeArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeArditeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeArditeOre", 2, 0, 65536);
        minHeightEmbellishcraftJadeArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeArditeOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeArditeOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeArditeOre", false);
        temperatureBlacklistEmbellishcraftJadeArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeArditeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeArditeOre", false);
        biomeBlacklistEmbellishcraftJadeArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Ardite Ore (Embellishcraft)").push("embellishcraft_larvikite_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteArditeOre", true);
        veinSizeEmbellishcraftLarvikiteArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteArditeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteArditeOre", 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteArditeOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteArditeOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteArditeOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteArditeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteArditeOre", false);
        biomeBlacklistEmbellishcraftLarvikiteArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Ardite Ore (Embellishcraft)").push("embellishcraft_marble_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleArditeOre", true);
        veinSizeEmbellishcraftMarbleArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleArditeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleArditeOre", 2, 0, 65536);
        minHeightEmbellishcraftMarbleArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleArditeOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleArditeOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleArditeOre", false);
        temperatureBlacklistEmbellishcraftMarbleArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleArditeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleArditeOre", false);
        biomeBlacklistEmbellishcraftMarbleArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Ardite Ore (Embellishcraft)").push("embellishcraft_slate_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateArditeOre", true);
        veinSizeEmbellishcraftSlateArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateArditeOre", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateArditeOre", 2, 0, 65536);
        minHeightEmbellishcraftSlateArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateArditeOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateArditeOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateArditeOre", false);
        temperatureBlacklistEmbellishcraftSlateArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateArditeOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateArditeOre", false);
        biomeBlacklistEmbellishcraftSlateArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Ardite Ore").push("hardened_stone_ardite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneArditeOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneArditeOre", true);
        veinSizeHardenedStoneArditeOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneArditeOre", 6, 0, 65536);
        veinsPerChunkHardenedStoneArditeOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneArditeOre", 2, 0, 65536);
        minHeightHardenedStoneArditeOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneArditeOre", 0, 0, 256);
        maxHeightHardenedStoneArditeOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneArditeOre", 16, 0, 256);
        isTempWhitelistHardenedStoneArditeOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneArditeOre", false);
        temperatureBlacklistHardenedStoneArditeOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneArditeOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneArditeOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneArditeOre", false);
        biomeBlacklistHardenedStoneArditeOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistHardenedStoneArditeOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Ardite.spec, Main.MOD_ID + "/ardite.toml");
    }
}
