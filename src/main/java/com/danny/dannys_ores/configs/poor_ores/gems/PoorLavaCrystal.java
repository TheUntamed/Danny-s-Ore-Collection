package com.danny.dannys_ores.configs.poor_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class PoorLavaCrystal {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePoorLavaCrystalOres;

    public static ForgeConfigSpec.BooleanValue enableStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPoorLavaCrystalOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePoorLavaCrystalOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePoorLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePoorLavaCrystalOre;

    // Danny's Stone Poor Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePoorLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePoorLavaCrystalOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Poor Lava Crystal Ores").push(PathHandler.getGeneralPath());
        disablePoorLavaCrystalOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Poor Lava Crystal Ore").push("stone_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Poor Lava Crystal Ore").push("andesite_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Poor Lava Crystal Ore").push("diorite_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Poor Lava Crystal Ore").push("granite_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Poor Lava Crystal Ore").push("netherrack_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 6, 0, 65536);
        minHeightNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Poor Lava Crystal Ore").push("end_stone_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Poor Lava Crystal Ore").push("sand_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Poor Lava Crystal Ore").push("red_sand_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Poor Lava Crystal Ore").push("gravel_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Poor Lava Crystal Ore").push("sandstone_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Poor Lava Crystal Ore").push("red__sandstone_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Poor Lava Crystal Ore").push("blue_ice_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Poor Lava Crystal Ore").push("packed_ice_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Poor Lava Crystal Ore").push("bedrock_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Poor LavaCrystal Ore (Quark)").push("quark_basalt_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 6, 0, 65536);
        minHeightQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Poor LavaCrystal Ore (Quark)").push("quark_limestone_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Poor LavaCrystal Ore (Quark)").push("quark_jasper_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor LavaCrystal Ore (Quark)").push("quark_marble_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor LavaCrystal Ore (Quark)").push("quark_slate_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Poor LavaCrystal Ore (Embellishcraft)").push("embellishcraft_basalt_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Poor LavaCrystal Ore (Embellishcraft)").push("embellishcraft_gneiss_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Poor LavaCrystal Ore (Embellishcraft)").push("embellishcraft_jade_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Poor LavaCrystal Ore (Embellishcraft)").push("embellishcraft_larvikite_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor LavaCrystal Ore (Embellishcraft)").push("embellishcraft_marble_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor LavaCrystal Ore (Embellishcraft)").push("embellishcraft_slate_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Poor Variants
        BUILDER.comment("Hardened Stone Poor Lava Crystal Ore").push("hardened_stone_poor_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePoorLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, PoorLavaCrystal.spec, path + "/poor_lava_crystal.toml");
    }
}
