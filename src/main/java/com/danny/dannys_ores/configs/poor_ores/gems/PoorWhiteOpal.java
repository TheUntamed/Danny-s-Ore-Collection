package com.danny.dannys_ores.configs.poor_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class PoorWhiteOpal {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePoorWhiteOpalOres;

    public static ForgeConfigSpec.BooleanValue enableStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPoorWhiteOpalOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePoorWhiteOpalOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePoorWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePoorWhiteOpalOre;

    // Danny's Stone Poor Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePoorWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePoorWhiteOpalOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Poor WhiteOpal Ores").push(PathHandler.getGeneralPath());
        disablePoorWhiteOpalOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Poor WhiteOpal Ore").push("stone_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Poor WhiteOpal Ore").push("andesite_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Poor WhiteOpal Ore").push("diorite_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Poor WhiteOpal Ore").push("granite_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Poor WhiteOpal Ore").push("netherrack_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Poor WhiteOpal Ore").push("end_stone_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Poor WhiteOpal Ore").push("sand_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Poor WhiteOpal Ore").push("red_sand_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Poor WhiteOpal Ore").push("gravel_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Poor WhiteOpal Ore").push("sandstone_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Poor WhiteOpal Ore").push("red_sandstone_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Poor WhiteOpal Ore").push("blue_ice_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Poor WhiteOpal Ore").push("packed_ice_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkPackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightPackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Poor WhiteOpal Ore").push("bedrock_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Poor WhiteOpal Ore (Quark)").push("quark_basalt_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Poor WhiteOpal Ore (Quark)").push("quark_limestone_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Poor WhiteOpal Ore (Quark)").push("quark_jasper_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor WhiteOpal Ore (Quark)").push("quark_marble_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor WhiteOpal Ore (Quark)").push("quark_slate_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Poor WhiteOpal Ore (Embellishcraft)").push("embellishcraft_basalt_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Poor WhiteOpal Ore (Embellishcraft)").push("embellishcraft_gneiss_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Poor WhiteOpal Ore (Embellishcraft)").push("embellishcraft_jade_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Poor WhiteOpal Ore (Embellishcraft)").push("embellishcraft_larvikite_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor WhiteOpal Ore (Embellishcraft)").push("embellishcraft_marble_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor WhiteOpal Ore (Embellishcraft)").push("embellishcraft_slate_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Poor Variants
        BUILDER.comment("Hardened Stone Poor WhiteOpal Ore").push("hardened_stone_poor_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePoorWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, PoorWhiteOpal.spec, path + "/poor_white_opal.toml");
    }
}
