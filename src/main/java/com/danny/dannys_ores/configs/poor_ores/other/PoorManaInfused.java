package com.danny.dannys_ores.configs.poor_ores.other;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class PoorManaInfused {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePoorManaInfusedOres;

    public static ForgeConfigSpec.BooleanValue enableStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPoorManaInfusedOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePoorManaInfusedOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePoorManaInfusedOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePoorManaInfusedOre;

    // Danny's Stone Poor Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePoorManaInfusedOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePoorManaInfusedOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Poor Mana Infused Ores").push(PathHandler.getGeneralPath());
        disablePoorManaInfusedOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Poor Mana Infused Ore").push("stone_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Poor Mana Infused Ore").push("andesite_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Poor Mana Infused Ore").push("diorite_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Poor Mana Infused Ore").push("granite_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Poor Mana Infused Ore").push("netherrack_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Poor Mana Infused Ore").push("end_stone_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 58, 0, 256);
        isTempWhitelistEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Poor Mana Infused Ore").push("sand_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Poor Mana Infused Ore").push("red_sand_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Poor Mana Infused Ore").push("gravel_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Poor Mana Infused Ore").push("sandstone_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Poor Mana Infused Ore").push("red_sandstone_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Poor Mana Infused Ore").push("blue_ice_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Poor Mana Infused Ore").push("packed_ice_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkPackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightPackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Poor Mana Infused Ore").push("bedrock_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPoorManaInfusedOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Poor Mana Infused Ore (Quark)").push("quark_basalt_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Poor Mana Infused Ore (Quark)").push("quark_limestone_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Poor Mana Infused Ore (Quark)").push("quark_jasper_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Mana Infused Ore (Quark)").push("quark_marble_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Mana Infused Ore (Quark)").push("quark_slate_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Poor Mana Infused Ore (Embellishcraft)").push("embellishcraft_basalt_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Poor Mana Infused Ore (Embellishcraft)").push("embellishcraft_gneiss_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Poor Mana Infused Ore (Embellishcraft)").push("embellishcraft_jade_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Poor Mana Infused Ore (Embellishcraft)").push("embellishcraft_larvikite_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Mana Infused Ore (Embellishcraft)").push("embellishcraft_marble_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Mana Infused Ore (Embellishcraft)").push("embellishcraft_slate_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Poor Variants
        BUILDER.comment("Hardened Stone Poor Mana Infused Ore").push("hardened_stone_poor_mana_infused_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePoorManaInfusedOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, PoorManaInfused.spec, path + "/poor_mana_infused.toml");
    }

}
