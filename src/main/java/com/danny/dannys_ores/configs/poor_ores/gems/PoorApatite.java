package com.danny.dannys_ores.configs.poor_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class PoorApatite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePoorApatiteOres;

    public static ForgeConfigSpec.BooleanValue enableStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPoorApatiteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPoorApatiteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePoorApatiteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePoorApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePoorApatiteOre;

    // Danny's Stone Poor Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePoorApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePoorApatiteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Poor Apatite Ores").push(PathHandler.getGeneralPath());
        disablePoorApatiteOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Poor Apatite Ore").push("stone_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStonePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkStonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightStonePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightStonePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistStonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStonePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStonePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Poor Apatite Ore").push("andesite_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Poor Apatite Ore").push("diorite_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Poor Apatite Ore").push("granite_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Poor Apatite Ore").push("netherrack_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Poor Apatite Ore").push("end_stone_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Poor Apatite Ore").push("sand_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkSandPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightSandPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightSandPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Poor Apatite Ore").push("red_sand_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Poor Apatite Ore").push("gravel_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Poor Apatite Ore").push("sandstone_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Poor Apatite Ore").push("red_sandstone_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Poor Apatite Ore").push("blue_ice_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Poor Apatite Ore").push("packed_ice_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkPackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 10, 0, 65536);
        minHeightPackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightPackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Poor Apatite Ore").push("bedrock_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPoorApatiteOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Poor Apatite Ore (Quark)").push("quark_basalt_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Poor Apatite Ore (Quark)").push("quark_limestone_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Poor Apatite Ore (Quark)").push("quark_jasper_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Apatite Ore (Quark)").push("quark_marble_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Apatite Ore (Quark)").push("quark_slate_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Poor Apatite Ore (Embellishcraft)").push("embellishcraft_basalt_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Poor Apatite Ore (Embellishcraft)").push("embellishcraft_gneiss_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Poor Apatite Ore (Embellishcraft)").push("embellishcraft_jade_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Poor Apatite Ore (Embellishcraft)").push("embellishcraft_larvikite_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Apatite Ore (Embellishcraft)").push("embellishcraft_marble_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Apatite Ore (Embellishcraft)").push("embellishcraft_slate_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Poor Variants
        BUILDER.comment("Hardened Stone Poor Apatite Ore").push("hardened_stone_poor_apatite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 17, 0, 65536);
        veinsPerChunkHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 48, 0, 256);
        maxHeightHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePoorApatiteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, PoorApatite.spec, path + "/poor_apatite.toml");
    }
}
