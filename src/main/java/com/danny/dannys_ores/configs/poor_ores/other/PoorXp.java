package com.danny.dannys_ores.configs.poor_ores.other;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class PoorXp {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePoorXpOres;

    public static ForgeConfigSpec.BooleanValue enableStonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightStonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpStonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpStonePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpAndesitePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpAndesitePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpDioritePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpDioritePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpGranitePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpGranitePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpNetherrackPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpNetherrackPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpEndStonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpEndStonePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpSandPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpGravelPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpGravelPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandstonePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandstonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandstonePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpBlueIcePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpBlueIcePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpPackedIcePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpPackedIcePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPoorXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpBedrockPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpBedrockPoorXpOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkBasaltPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkLimestonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkLimestonePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkJasperPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkJasperPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkMarblePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkSlatePoorXpOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftBasaltPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftBasaltPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftGneissPoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftGneissPoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftJadePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftJadePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftMarblePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftMarblePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftLarvikitePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftLarvikitePoorXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftSlatePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftSlatePoorXpOre;

    // Danny's Stone Poor Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePoorXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePoorXpOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePoorXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePoorXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePoorXpOre;
    public static ForgeConfigSpec.IntValue minXpHardenedStonePoorXpOre;
    public static ForgeConfigSpec.IntValue maxXpHardenedStonePoorXpOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Poor Xp Ores").push(PathHandler.getGeneralPath());
        disablePoorXpOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Poor Xp Ore").push("stone_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStonePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStonePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkStonePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightStonePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightStonePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistStonePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStonePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStonePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStonePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpStonePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpStonePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Poor Xp Ore").push("andesite_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkAndesitePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightAndesitePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightAndesitePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistAndesitePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpAndesitePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpAndesitePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Poor Xp Ore").push("diorite_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkDioritePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightDioritePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightDioritePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistDioritePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpDioritePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpDioritePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Poor Xp Ore").push("granite_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGranitePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightGranitePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightGranitePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGranitePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpGranitePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpGranitePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Poor Xp Ore").push("netherrack_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpNetherrackPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Poor Xp Ore").push("end_stone_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEndStonePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEndStonePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEndStonePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStonePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEndStonePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpEndStonePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Poor Xp Ore").push("sand_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightSandPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightSandPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpSandPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpSandPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Poor Xp Ore").push("red_sand_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightRedSandPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightRedSandPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpRedSandPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpRedSandPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Poor Xp Ore").push("gravel_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGravelPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightGravelPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightGravelPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpGravelPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpGravelPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Poor Xp Ore").push("sandstone_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandstonePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Poor Xp Ore").push("red_sandstone_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpRedSandstonePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Poor Xp Ore").push("blue_ice_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpBlueIcePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Poor Xp Ore").push("packed_ice_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpPackedIcePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Poor Xp Ore").push("bedrock_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 20, 0, 256);
        maxHeightBedrockPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 556, 0, 256);
        isTempWhitelistBedrockPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPoorXpOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpBedrockPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpBedrockPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Poor Xp Ore (Quark)").push("quark_basalt_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpQuarkBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Poor Xp Ore (Quark)").push("quark_limestone_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpQuarkLimestonePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Poor Xp Ore (Quark)").push("quark_jasper_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpQuarkJasperPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Xp Ore (Quark)").push("quark_marble_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpQuarkMarblePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Xp Ore (Quark)").push("quark_slate_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpQuarkSlatePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Poor Xp Ore (Embellishcraft)").push("embellishcraft_basalt_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpEmbellishcraftBasaltPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Poor Xp Ore (Embellishcraft)").push("embellishcraft_gneiss_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpEmbellishcraftGneissPoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Poor Xp Ore (Embellishcraft)").push("embellishcraft_jade_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpEmbellishcraftJadePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Poor Xp Ore (Embellishcraft)").push("embellishcraft_larvikite_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpEmbellishcraftLarvikitePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Xp Ore (Embellishcraft)").push("embellishcraft_marble_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpEmbellishcraftMarblePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Xp Ore (Embellishcraft)").push("embellishcraft_slate_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpEmbellishcraftSlatePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Poor Variants
        BUILDER.comment("Hardened Stone Poor Xp Ore").push("hardened_stone_poor_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getMinXpDropComment()).defineInRange(PathHandler.getMinXpDropPath(), 20, 0, 1000000);
        maxXpHardenedStonePoorXpOre = BUILDER.comment(CommentHandler.getMaxXpDropComment()).defineInRange(PathHandler.getMaxXpDropPath(), 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, PoorXp.spec, path + "/poor_xp.toml");
    }
}
