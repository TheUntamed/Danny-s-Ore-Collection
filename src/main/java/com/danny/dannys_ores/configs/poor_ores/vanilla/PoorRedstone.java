package com.danny.dannys_ores.configs.poor_ores.vanilla;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class PoorRedstone {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePoorRedstoneOres;

    public static ForgeConfigSpec.BooleanValue enableStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPoorRedstoneOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePoorRedstoneOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePoorRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePoorRedstoneOre;

    // Danny's Stone Poor Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePoorRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePoorRedstoneOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Poor Redstone Ores").push(PathHandler.getGeneralPath());
        disablePoorRedstoneOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Poor Redstone Ore").push("stone_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Poor Redstone Ore").push("andesite_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Poor Redstone Ore").push("diorite_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Poor Redstone Ore").push("granite_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Poor Redstone Ore").push("netherrack_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Poor Redstone Ore").push("end_stone_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Poor Redstone Ore").push("sand_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Poor Redstone Ore").push("red_sand_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Poor Redstone Ore").push("gravel_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Poor Redstone Ore").push("sandstone_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Poor Redstone Ore").push("red_sandstone_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Poor Redstone Ore").push("blue_ice_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Poor Redstone Ore").push("packed_ice_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkPackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightPackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Poor Redstone Ore").push("bedrock_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPoorRedstoneOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Poor Redstone Ore (Quark)").push("quark_basalt_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Poor Redstone Ore (Quark)").push("quark_limestone_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Poor Redstone Ore (Quark)").push("quark_jasper_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Redstone Ore (Quark)").push("quark_marble_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Redstone Ore (Quark)").push("quark_slate_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Poor Redstone Ore (Embellishcraft)").push("embellishcraft_basalt_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Poor Redstone Ore (Embellishcraft)").push("embellishcraft_gneiss_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Poor Redstone Ore (Embellishcraft)").push("embellishcraft_jade_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Poor Redstone Ore (Embellishcraft)").push("embellishcraft_larvikite_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor Redstone Ore (Embellishcraft)").push("embellishcraft_marble_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor Redstone Ore (Embellishcraft)").push("embellishcraft_slate_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Poor Variants
        BUILDER.comment("Hardened Stone Poor Redstone Ore").push("hardened_stone_poor_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePoorRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, PoorRedstone.spec, path + "/poorRedstone.toml");
    }
}
