package com.danny.dannys_ores.configs.poor_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class PoorDimensionalShard {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePoorDimensionalShardOres;

    public static ForgeConfigSpec.BooleanValue enableStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPoorDimensionalShardOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePoorDimensionalShardOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePoorDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePoorDimensionalShardOre;

    // Danny's Stone Poor Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePoorDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePoorDimensionalShardOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Poor Dimensional Shard Ores").push(PathHandler.getGeneralPath());
        disablePoorDimensionalShardOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone (StonePoor) Dimensional Shard Ore").push("stone_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Poor Dimensional Shard Ore").push("andesite_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Poor Dimensional Shard Ore").push("diorite_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Poor Dimensional Shard Ore").push("granite_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Poor Dimensional Shard Ore").push("netherrack_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Poor Dimensional Shard Ore").push("end_stone_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Poor Dimensional Shard Ore").push("sand_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Poor Dimensional Shard Ore").push("red_sand_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Poor Dimensional Shard Ore").push("gravel_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Poor Dimensional Shard Ore").push("sandstone_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Poor Dimensional Shard Ore").push("red__sandstone_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Poor Dimensional Shard Ore").push("blue_ice_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Poor Dimensional Shard Ore").push("packed_ice_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkPackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightPackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Poor Dimensional Shard Ore").push("bedrock_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Poor DimensionalShard Ore (Quark)").push("quark_basalt_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Poor DimensionalShard Ore (Quark)").push("quark_limestone_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Poor DimensionalShard Ore (Quark)").push("quark_jasper_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor DimensionalShard Ore (Quark)").push("quark_marble_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor DimensionalShard Ore (Quark)").push("quark_slate_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Poor DimensionalShard Ore (Embellishcraft)").push("embellishcraft_basalt_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Poor DimensionalShard Ore (Embellishcraft)").push("embellishcraft_gneiss_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Poor DimensionalShard Ore (Embellishcraft)").push("embellishcraft_jade_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Poor DimensionalShard Ore (Embellishcraft)").push("embellishcraft_larvikite_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Poor DimensionalShard Ore (Embellishcraft)").push("embellishcraft_marble_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Poor DimensionalShard Ore (Embellishcraft)").push("embellishcraft_slate_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Poor Variants
        BUILDER.comment("Hardened Stone Poor Dimensional Shard Ore").push("hardened_stone_poor_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePoorDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, PoorDimensionalShard.spec, path + "/poor_dimensional_shard.toml");
    }
}
