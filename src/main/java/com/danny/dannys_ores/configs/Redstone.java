package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Redstone {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableRedstoneOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneRedstoneOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Redstone Ores").push("redstone_ores");
        enableRedstoneOres = BUILDER.comment("Enable or disable all Redstone Ore variants.").define("enableRedstoneOres", true);
        BUILDER.comment("Vanilla (Stone) Redstone Ore").push("vanilla_stone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaRedstoneOre", true);
        veinSizeVanillaRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaRedstoneOre", 8, 0, 65536);
        veinsPerChunkVanillaRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaRedstoneOre", 8, 0, 65536);
        minHeightVanillaRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaRedstoneOre", 0, 0, 256);
        maxHeightVanillaRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaRedstoneOre", 16, 0, 256);
        isTempWhitelistVanillaRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaRedstoneOre", false);
        temperatureBlacklistVanillaRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistVanillaRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaRedstoneOre", false);
        biomeBlacklistVanillaRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Redstone Ore").push("andesite_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteRedstoneOre", true);
        veinSizeAndesiteRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteRedstoneOre", 8, 0, 65536);
        veinsPerChunkAndesiteRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteRedstoneOre", 8, 0, 65536);
        minHeightAndesiteRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteRedstoneOre", 0, 0, 256);
        maxHeightAndesiteRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteRedstoneOre", 16, 0, 256);
        isTempWhitelistAndesiteRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteRedstoneOre", false);
        temperatureBlacklistAndesiteRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteRedstoneOre", false);
        biomeBlacklistAndesiteRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Redstone Ore").push("diorite_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteRedstoneOre", true);
        veinSizeDioriteRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteRedstoneOre", 8, 0, 65536);
        veinsPerChunkDioriteRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteRedstoneOre", 8, 0, 65536);
        minHeightDioriteRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteRedstoneOre", 0, 0, 256);
        maxHeightDioriteRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteRedstoneOre", 16, 0, 256);
        isTempWhitelistDioriteRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteRedstoneOre", false);
        temperatureBlacklistDioriteRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistDioriteRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteRedstoneOre", false);
        biomeBlacklistDioriteRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Redstone Ore").push("granite_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteRedstoneOre", true);
        veinSizeGraniteRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteRedstoneOre", 8, 0, 65536);
        veinsPerChunkGraniteRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteRedstoneOre", 8, 0, 65536);
        minHeightGraniteRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteRedstoneOre", 0, 0, 256);
        maxHeightGraniteRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteRedstoneOre", 16, 0, 256);
        isTempWhitelistGraniteRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteRedstoneOre", false);
        temperatureBlacklistGraniteRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistGraniteRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteRedstoneOre", false);
        biomeBlacklistGraniteRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Redstone Ore").push("netherrack_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackRedstoneOre", true);
        veinSizeNetherrackRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackRedstoneOre", 8, 0, 65536);
        veinsPerChunkNetherrackRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackRedstoneOre", 8, 0, 65536);
        minHeightNetherrackRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackRedstoneOre", 96, 0, 256);
        maxHeightNetherrackRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackRedstoneOre", 128, 0, 256);
        isTempWhitelistNetherrackRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackRedstoneOre", false);
        temperatureBlacklistNetherrackRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackRedstoneOre", false);
        biomeBlacklistNetherrackRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Redstone Ore").push("end_stone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneRedstoneOre", true);
        veinSizeEndStoneRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneRedstoneOre", 8, 0, 65536);
        veinsPerChunkEndStoneRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneRedstoneOre", 4, 0, 65536);
        minHeightEndStoneRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneRedstoneOre", 0, 0, 256);
        maxHeightEndStoneRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneRedstoneOre", 32, 0, 256);
        isTempWhitelistEndStoneRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneRedstoneOre", false);
        temperatureBlacklistEndStoneRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneRedstoneOre", false);
        biomeBlacklistEndStoneRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Redstone Ore").push("sand_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandRedstoneOre", true);
        veinSizeSandRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandRedstoneOre", 8, 0, 65536);
        veinsPerChunkSandRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandRedstoneOre", 4, 0, 65536);
        minHeightSandRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandRedstoneOre", 0, 0, 256);
        maxHeightSandRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandRedstoneOre", 128, 0, 256);
        isTempWhitelistSandRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandRedstoneOre", false);
        temperatureBlacklistSandRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistSandRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandRedstoneOre", false);
        biomeBlacklistSandRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Redstone Ore").push("gravel_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelRedstoneOre", true);
        veinSizeGravelRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelRedstoneOre", 8, 0, 65536);
        veinsPerChunkGravelRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelRedstoneOre", 4, 0, 65536);
        minHeightGravelRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelRedstoneOre", 0, 0, 256);
        maxHeightGravelRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelRedstoneOre", 128, 0, 256);
        isTempWhitelistGravelRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelRedstoneOre", false);
        temperatureBlacklistGravelRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistGravelRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelRedstoneOre", false);
        biomeBlacklistGravelRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Redstone Ore").push("sandstone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneRedstoneOre", true);
        veinSizeSandstoneRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneRedstoneOre", 8, 0, 65536);
        veinsPerChunkSandstoneRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneRedstoneOre", 4, 0, 65536);
        minHeightSandstoneRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneRedstoneOre", 0, 0, 256);
        maxHeightSandstoneRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneRedstoneOre", 128, 0, 256);
        isTempWhitelistSandstoneRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneRedstoneOre", false);
        temperatureBlacklistSandstoneRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneRedstoneOre", false);
        biomeBlacklistSandstoneRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Redstone Ore").push("red_sandstone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneRedstoneOre", true);
        veinSizeRedSandstoneRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneRedstoneOre", 8, 0, 65536);
        veinsPerChunkRedSandstoneRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneRedstoneOre", 4, 0, 65536);
        minHeightRedSandstoneRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneRedstoneOre", 0, 0, 256);
        maxHeightRedSandstoneRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneRedstoneOre", 128, 0, 256);
        isTempWhitelistRedSandstoneRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneRedstoneOre", false);
        temperatureBlacklistRedSandstoneRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneRedstoneOre", false);
        biomeBlacklistRedSandstoneRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Redstone.spec, Main.MOD_ID + "/redstone.toml");
    }
}
