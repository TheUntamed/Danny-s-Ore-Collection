package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Redstone {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableRedstoneOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneRedstoneOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateRedstoneOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateRedstoneOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Redstone Ores").push("redstone_ores");
        enableRedstoneOres = BUILDER.comment("Enable or disable all Redstone Ore variants.").define("enableRedstoneOres", true);
        BUILDER.comment("Vanilla (Stone) Redstone Ore").push("vanilla_stone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaRedstoneOre", true);
        veinSizeVanillaRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaRedstoneOre", 8, 0, 65536);
        veinsPerChunkVanillaRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaRedstoneOre", 8, 0, 65536);
        minHeightVanillaRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaRedstoneOre", 0, 0, 256);
        maxHeightVanillaRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaRedstoneOre", 16, 0, 256);
        isTempWhitelistVanillaRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaRedstoneOre", false);
        temperatureBlacklistVanillaRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistVanillaRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaRedstoneOre", false);
        biomeBlacklistVanillaRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Redstone Ore").push("andesite_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteRedstoneOre", true);
        veinSizeAndesiteRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteRedstoneOre", 8, 0, 65536);
        veinsPerChunkAndesiteRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteRedstoneOre", 8, 0, 65536);
        minHeightAndesiteRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteRedstoneOre", 0, 0, 256);
        maxHeightAndesiteRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteRedstoneOre", 16, 0, 256);
        isTempWhitelistAndesiteRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteRedstoneOre", false);
        temperatureBlacklistAndesiteRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteRedstoneOre", false);
        biomeBlacklistAndesiteRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Redstone Ore").push("diorite_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteRedstoneOre", true);
        veinSizeDioriteRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteRedstoneOre", 8, 0, 65536);
        veinsPerChunkDioriteRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteRedstoneOre", 8, 0, 65536);
        minHeightDioriteRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteRedstoneOre", 0, 0, 256);
        maxHeightDioriteRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteRedstoneOre", 16, 0, 256);
        isTempWhitelistDioriteRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteRedstoneOre", false);
        temperatureBlacklistDioriteRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistDioriteRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteRedstoneOre", false);
        biomeBlacklistDioriteRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Redstone Ore").push("granite_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteRedstoneOre", true);
        veinSizeGraniteRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteRedstoneOre", 8, 0, 65536);
        veinsPerChunkGraniteRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteRedstoneOre", 8, 0, 65536);
        minHeightGraniteRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteRedstoneOre", 0, 0, 256);
        maxHeightGraniteRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteRedstoneOre", 16, 0, 256);
        isTempWhitelistGraniteRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteRedstoneOre", false);
        temperatureBlacklistGraniteRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistGraniteRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteRedstoneOre", false);
        biomeBlacklistGraniteRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Redstone Ore").push("netherrack_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackRedstoneOre", true);
        veinSizeNetherrackRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackRedstoneOre", 8, 0, 65536);
        veinsPerChunkNetherrackRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackRedstoneOre", 8, 0, 65536);
        minHeightNetherrackRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackRedstoneOre", 96, 0, 256);
        maxHeightNetherrackRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackRedstoneOre", 128, 0, 256);
        isTempWhitelistNetherrackRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackRedstoneOre", false);
        temperatureBlacklistNetherrackRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackRedstoneOre", false);
        biomeBlacklistNetherrackRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Redstone Ore").push("end_stone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneRedstoneOre", true);
        veinSizeEndStoneRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneRedstoneOre", 8, 0, 65536);
        veinsPerChunkEndStoneRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneRedstoneOre", 4, 0, 65536);
        minHeightEndStoneRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneRedstoneOre", 0, 0, 256);
        maxHeightEndStoneRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneRedstoneOre", 32, 0, 256);
        isTempWhitelistEndStoneRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneRedstoneOre", false);
        temperatureBlacklistEndStoneRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneRedstoneOre", false);
        biomeBlacklistEndStoneRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Redstone Ore").push("sand_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandRedstoneOre", true);
        veinSizeSandRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandRedstoneOre", 8, 0, 65536);
        veinsPerChunkSandRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandRedstoneOre", 4, 0, 65536);
        minHeightSandRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandRedstoneOre", 0, 0, 256);
        maxHeightSandRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandRedstoneOre", 128, 0, 256);
        isTempWhitelistSandRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandRedstoneOre", false);
        temperatureBlacklistSandRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistSandRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandRedstoneOre", false);
        biomeBlacklistSandRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Redstone Ore").push("gravel_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelRedstoneOre", true);
        veinSizeGravelRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelRedstoneOre", 8, 0, 65536);
        veinsPerChunkGravelRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelRedstoneOre", 4, 0, 65536);
        minHeightGravelRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelRedstoneOre", 0, 0, 256);
        maxHeightGravelRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelRedstoneOre", 128, 0, 256);
        isTempWhitelistGravelRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelRedstoneOre", false);
        temperatureBlacklistGravelRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistGravelRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelRedstoneOre", false);
        biomeBlacklistGravelRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Redstone Ore").push("sandstone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneRedstoneOre", true);
        veinSizeSandstoneRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneRedstoneOre", 8, 0, 65536);
        veinsPerChunkSandstoneRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneRedstoneOre", 4, 0, 65536);
        minHeightSandstoneRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneRedstoneOre", 0, 0, 256);
        maxHeightSandstoneRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneRedstoneOre", 128, 0, 256);
        isTempWhitelistSandstoneRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneRedstoneOre", false);
        temperatureBlacklistSandstoneRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneRedstoneOre", false);
        biomeBlacklistSandstoneRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Redstone Ore").push("red_sandstone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneRedstoneOre", true);
        veinSizeRedSandstoneRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneRedstoneOre", 8, 0, 65536);
        veinsPerChunkRedSandstoneRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneRedstoneOre", 4, 0, 65536);
        minHeightRedSandstoneRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneRedstoneOre", 0, 0, 256);
        maxHeightRedSandstoneRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneRedstoneOre", 128, 0, 256);
        isTempWhitelistRedSandstoneRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneRedstoneOre", false);
        temperatureBlacklistRedSandstoneRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneRedstoneOre", false);
        biomeBlacklistRedSandstoneRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Redstone Ore (Quark)").push("quark_basalt_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltRedstoneOre", true);
        veinSizeQuarkBasaltRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltRedstoneOre", 8, 0, 65536);
        veinsPerChunkQuarkBasaltRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltRedstoneOre", 8, 0, 65536);
        minHeightQuarkBasaltRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltRedstoneOre", 96, 0, 256);
        maxHeightQuarkBasaltRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltRedstoneOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltRedstoneOre", false);
        temperatureBlacklistQuarkBasaltRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltRedstoneOre", false);
        biomeBlacklistQuarkBasaltRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Redstone Ore (Quark)").push("quark_limestone_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneRedstoneOre", true);
        veinSizeQuarkLimestoneRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneRedstoneOre", 8, 0, 65536);
        veinsPerChunkQuarkLimestoneRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneRedstoneOre", 8, 0, 65536);
        minHeightQuarkLimestoneRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneRedstoneOre", 0, 0, 256);
        maxHeightQuarkLimestoneRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneRedstoneOre", 16, 0, 256);
        isTempWhitelistQuarkLimestoneRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneRedstoneOre", false);
        temperatureBlacklistQuarkLimestoneRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneRedstoneOre", false);
        biomeBlacklistQuarkLimestoneRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Redstone Ore (Quark)").push("quark_jasper_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperRedstoneOre", true);
        veinSizeQuarkJasperRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperRedstoneOre", 8, 0, 65536);
        veinsPerChunkQuarkJasperRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperRedstoneOre", 8, 0, 65536);
        minHeightQuarkJasperRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperRedstoneOre", 0, 0, 256);
        maxHeightQuarkJasperRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperRedstoneOre", 16, 0, 256);
        isTempWhitelistQuarkJasperRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperRedstoneOre", false);
        temperatureBlacklistQuarkJasperRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperRedstoneOre", false);
        biomeBlacklistQuarkJasperRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Redstone Ore (Quark)").push("quark_marble_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleRedstoneOre", true);
        veinSizeQuarkMarbleRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleRedstoneOre", 8, 0, 65536);
        veinsPerChunkQuarkMarbleRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleRedstoneOre", 8, 0, 65536);
        minHeightQuarkMarbleRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleRedstoneOre", 0, 0, 256);
        maxHeightQuarkMarbleRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleRedstoneOre", 16, 0, 256);
        isTempWhitelistQuarkMarbleRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleRedstoneOre", false);
        temperatureBlacklistQuarkMarbleRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleRedstoneOre", false);
        biomeBlacklistQuarkMarbleRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Redstone Ore (Quark)").push("quark_slate_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateRedstoneOre", true);
        veinSizeQuarkSlateRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateRedstoneOre", 8, 0, 65536);
        veinsPerChunkQuarkSlateRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateRedstoneOre", 8, 0, 65536);
        minHeightQuarkSlateRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateRedstoneOre", 0, 0, 256);
        maxHeightQuarkSlateRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateRedstoneOre", 16, 0, 256);
        isTempWhitelistQuarkSlateRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateRedstoneOre", false);
        temperatureBlacklistQuarkSlateRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateRedstoneOre", false);
        biomeBlacklistQuarkSlateRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Redstone Ore (Embellishcraft)").push("embellishcraft_basalt_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltRedstoneOre", true);
        veinSizeEmbellishcraftBasaltRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltRedstoneOre", 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltRedstoneOre", 8, 0, 65536);
        minHeightEmbellishcraftBasaltRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltRedstoneOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltRedstoneOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltRedstoneOre", false);
        temperatureBlacklistEmbellishcraftBasaltRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltRedstoneOre", false);
        biomeBlacklistEmbellishcraftBasaltRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Redstone Ore (Embellishcraft)").push("embellishcraft_gneiss_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissRedstoneOre", true);
        veinSizeEmbellishcraftGneissRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissRedstoneOre", 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissRedstoneOre", 8, 0, 65536);
        minHeightEmbellishcraftGneissRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissRedstoneOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissRedstoneOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissRedstoneOre", false);
        temperatureBlacklistEmbellishcraftGneissRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissRedstoneOre", false);
        biomeBlacklistEmbellishcraftGneissRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Redstone Ore (Embellishcraft)").push("embellishcraft_jade_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeRedstoneOre", true);
        veinSizeEmbellishcraftJadeRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeRedstoneOre", 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeRedstoneOre", 8, 0, 65536);
        minHeightEmbellishcraftJadeRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeRedstoneOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeRedstoneOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeRedstoneOre", false);
        temperatureBlacklistEmbellishcraftJadeRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeRedstoneOre", false);
        biomeBlacklistEmbellishcraftJadeRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Redstone Ore (Embellishcraft)").push("embellishcraft_larvikite_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteRedstoneOre", true);
        veinSizeEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteRedstoneOre", 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteRedstoneOre", 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteRedstoneOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteRedstoneOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteRedstoneOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteRedstoneOre", false);
        biomeBlacklistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Redstone Ore (Embellishcraft)").push("embellishcraft_marble_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleRedstoneOre", true);
        veinSizeEmbellishcraftMarbleRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleRedstoneOre", 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleRedstoneOre", 8, 0, 65536);
        minHeightEmbellishcraftMarbleRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleRedstoneOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleRedstoneOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleRedstoneOre", false);
        temperatureBlacklistEmbellishcraftMarbleRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleRedstoneOre", false);
        biomeBlacklistEmbellishcraftMarbleRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Redstone Ore (Embellishcraft)").push("embellishcraft_slate_redstone_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateRedstoneOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateRedstoneOre", true);
        veinSizeEmbellishcraftSlateRedstoneOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateRedstoneOre", 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateRedstoneOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateRedstoneOre", 8, 0, 65536);
        minHeightEmbellishcraftSlateRedstoneOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateRedstoneOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateRedstoneOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateRedstoneOre", 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateRedstoneOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateRedstoneOre", false);
        temperatureBlacklistEmbellishcraftSlateRedstoneOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateRedstoneOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateRedstoneOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateRedstoneOre", false);
        biomeBlacklistEmbellishcraftSlateRedstoneOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateRedstoneOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Redstone.spec, Main.MOD_ID + "/redstone.toml");
    }
}
