package com.danny.dannys_ores.configs.ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class ChargedCertusQuartz {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableChargedCertusQuartzOres;

    public static ForgeConfigSpec.BooleanValue enableStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockChargedCertusQuartzOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateChargedCertusQuartzOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteChargedCertusQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateChargedCertusQuartzOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneChargedCertusQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneChargedCertusQuartzOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("ChargedCertusQuartz Ores").push(PathHandler.getGeneralPath());
        disableChargedCertusQuartzOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Charged Certus Quartz Ore").push("stone_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Charged Certus Quartz Ore").push("andesite_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Charged Certus Quartz Ore").push("diorite_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Charged Certus Quartz Ore").push("granite_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Charged Certus Quartz Ore").push("netherrack_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Charged Certus Quartz Ore").push("end_stone_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Charged Certus Quartz Ore").push("sand_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Charged Certus Quartz Ore").push("red_sand_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Charged Certus Quartz Ore").push("gravel_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Charged Certus Quartz Ore").push("sandstone_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Charged Certus Quartz Ore").push("red_sandstone_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Charged Certus Quartz Ore").push("blue_ice_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Charged Certus Quartz Ore").push("packed_ice_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightPackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Charged Certus Quartz Ore").push("bedrock_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt ChargedCertusQuartz Ore (Quark)").push("quark_basalt_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone ChargedCertusQuartz Ore (Quark)").push("quark_limestone_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper ChargedCertusQuartz Ore (Quark)").push("quark_jasper_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble ChargedCertusQuartz Ore (Quark)").push("quark_marble_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate ChargedCertusQuartz Ore (Quark)").push("quark_slate_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt ChargedCertusQuartz Ore (Embellishcraft)").push("embellishcraft_basalt_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss ChargedCertusQuartz Ore (Embellishcraft)").push("embellishcraft_gneiss_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade ChargedCertusQuartz Ore (Embellishcraft)").push("embellishcraft_jade_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite ChargedCertusQuartz Ore (Embellishcraft)").push("embellishcraft_larvikite_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble ChargedCertusQuartz Ore (Embellishcraft)").push("embellishcraft_marble_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate ChargedCertusQuartz Ore (Embellishcraft)").push("embellishcraft_slate_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Charged Certus Quartz Ore").push("hardened_stone_charged_certus_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneChargedCertusQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, ChargedCertusQuartz.spec, path + "/charged_certus_quartz.toml");
    }
}
