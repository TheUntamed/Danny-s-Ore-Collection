package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Mithril {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableMithrilOres;

    public static ForgeConfigSpec.BooleanValue enableStoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightStoneMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableSandMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeSandMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightSandMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightSandMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableGravelMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightGravelMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceMithrilOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockMithrilOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockMithrilOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateMithrilOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateMithrilOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneMithrilOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Mithril Ores").push("general");
        disableMithrilOres = BUILDER.comment("If false, all mithril ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Mithril Ore").push("stone_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkStoneMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightStoneMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightStoneMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistStoneMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Mithril Ore").push("andesite_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkAndesiteMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightAndesiteMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightAndesiteMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistAndesiteMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Mithril Ore").push("diorite_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkDioriteMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightDioriteMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightDioriteMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistDioriteMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Mithril Ore").push("granite_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkGraniteMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightGraniteMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightGraniteMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistGraniteMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Mithril Ore").push("netherrack_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkNetherrackMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightNetherrackMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightNetherrackMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Mithril Ore").push("end_stone_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEndStoneMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEndStoneMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEndStoneMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 58, 0, 256);
        isTempWhitelistEndStoneMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Mithril Ore").push("sand_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkSandMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightSandMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Mithril Ore").push("red_sand_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkRedSandMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightRedSandMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Mithril Ore").push("gravel_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkGravelMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightGravelMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightGravelMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Mithril Ore").push("sandstone_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkSandstoneMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandstoneMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightSandstoneMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Mithril Ore").push("red_sandstone_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkRedSandstoneMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandstoneMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightRedSandstoneMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Mithril Ore").push("blue_ice_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkBlueIceMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBlueIceMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightBlueIceMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Mithril Ore").push("packed_ice_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkPackedIceMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightPackedIceMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightPackedIceMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Mithril Ore").push("bedrock_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightBedrockMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockMithrilOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Mithril Ore (Quark)").push("quark_basalt_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkBasaltMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkBasaltMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightQuarkBasaltMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Mithril Ore (Quark)").push("quark_limestone_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkLimestoneMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkLimestoneMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkLimestoneMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkLimestoneMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Mithril Ore (Quark)").push("quark_jasper_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkJasperMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkJasperMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkJasperMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkJasperMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Mithril Ore (Quark)").push("quark_marble_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkMarbleMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkMarbleMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkMarbleMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkMarbleMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Mithril Ore (Quark)").push("quark_slate_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkSlateMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkSlateMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkSlateMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkSlateMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Mithril Ore (Embellishcraft)").push("embellishcraft_basalt_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftBasaltMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftBasaltMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Mithril Ore (Embellishcraft)").push("embellishcraft_gneiss_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftGneissMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftGneissMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftGneissMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Mithril Ore (Embellishcraft)").push("embellishcraft_jade_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftJadeMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftJadeMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftJadeMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Mithril Ore (Embellishcraft)").push("embellishcraft_larvikite_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Mithril Ore (Embellishcraft)").push("embellishcraft_marble_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftMarbleMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftMarbleMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Mithril Ore (Embellishcraft)").push("embellishcraft_slate_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftSlateMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftSlateMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftSlateMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Mithril Ore").push("hardened_stone_mithril_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneMithrilOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneMithrilOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkHardenedStoneMithrilOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightHardenedStoneMithrilOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightHardenedStoneMithrilOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistHardenedStoneMithrilOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneMithrilOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneMithrilOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneMithrilOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Mithril.spec, Main.MOD_ID + "/mithril.toml");
    }
}
