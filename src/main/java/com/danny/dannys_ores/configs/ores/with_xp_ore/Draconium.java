package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Draconium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDraconiumOres;

    public static ForgeConfigSpec.BooleanValue enableStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDraconiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDraconiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDraconiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDraconiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDraconiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDraconiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDraconiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Draconium Ores").push(PathHandler.getGeneralPath());
        disableDraconiumOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Draconium Ore").push("stone_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkStoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightStoneDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistStoneDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Draconium Ore").push("andesite_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Draconium Ore").push("diorite_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkDioriteDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightDioriteDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistDioriteDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Draconium Ore").push("granite_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGraniteDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightGraniteDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistGraniteDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Draconium Ore").push("netherrack_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Draconium Ore").push("end_stone_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Draconium Ore").push("sand_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightSandDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Draconium Ore").push("red_sand_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightRedSandDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Draconium Ore").push("gravel_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGravelDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightGravelDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Draconium Ore").push("sandstone_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Draconium Ore").push("red_sandstone_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Draconium Ore").push("blue_ice_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Draconium Ore").push("packed_ice_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkPackedIceDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightPackedIceDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Draconium Ore").push("bedrock_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDraconiumOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Draconium Ore (Quark)").push("quark_basalt_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Draconium Ore (Quark)").push("quark_limestone_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Draconium Ore (Quark)").push("quark_jasper_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Draconium Ore (Quark)").push("quark_marble_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Draconium Ore (Quark)").push("quark_slate_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Draconium Ore (Embellishcraft)").push("embellishcraft_basalt_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Draconium Ore (Embellishcraft)").push("embellishcraft_gneiss_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Draconium Ore (Embellishcraft)").push("embellishcraft_jade_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Draconium Ore (Embellishcraft)").push("embellishcraft_larvikite_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Draconium Ore (Embellishcraft)").push("embellishcraft_marble_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Draconium Ore (Embellishcraft)").push("embellishcraft_slate_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Draconium Ore").push("hardened_stone_draconium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDraconiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Draconium.spec, path + "/draconium.toml");
    }
}
