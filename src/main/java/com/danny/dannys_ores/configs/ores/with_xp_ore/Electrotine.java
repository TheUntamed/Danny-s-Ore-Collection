package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Electrotine {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableElectrotineOres;

    public static ForgeConfigSpec.BooleanValue enableStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableSandElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeSandElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightSandElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightSandElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableGravelElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightGravelElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockElectrotineOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockElectrotineOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateElectrotineOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateElectrotineOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneElectrotineOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Electrotine Ores").push("general");
        disableElectrotineOres = BUILDER.comment("If false, all electrotine ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Electrotine Ore").push("stone_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkStoneElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightStoneElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistStoneElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Electrotine Ore").push("andesite_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkAndesiteElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightAndesiteElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistAndesiteElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Electrotine Ore").push("diorite_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkDioriteElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightDioriteElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistDioriteElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Electrotine Ore").push("granite_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkGraniteElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightGraniteElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistGraniteElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Electrotine Ore").push("netherrack_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkNetherrackElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightNetherrackElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 96, 0, 256);
        maxHeightNetherrackElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Electrotine Ore").push("end_stone_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStoneElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEndStoneElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEndStoneElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Electrotine Ore").push("sand_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Electrotine Ore").push("red_sand_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Electrotine Ore").push("gravel_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGravelElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Electrotine Ore").push("sandstone_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstoneElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandstoneElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Electrotine Ore").push("red_sandstone_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstoneElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandstoneElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Electrotine Ore").push("blue_ice_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIceElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightBlueIceElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Electrotine Ore").push("packed_ice_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIceElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightPackedIceElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Electrotine Ore").push("bedrock_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockElectrotineOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Electrotine Ore (Quark)").push("quark_basalt_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkBasaltElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 96, 0, 256);
        maxHeightQuarkBasaltElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Electrotine Ore (Quark)").push("quark_limestone_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkLimestoneElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkLimestoneElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Electrotine Ore (Quark)").push("quark_jasper_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkJasperElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkJasperElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkJasperElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Electrotine Ore (Quark)").push("quark_marble_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkMarbleElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkMarbleElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkMarbleElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Electrotine Ore (Quark)").push("quark_slate_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkSlateElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkSlateElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkSlateElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Electrotine Ore (Embellishcraft)").push("embellishcraft_basalt_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftBasaltElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Electrotine Ore (Embellishcraft)").push("embellishcraft_gneiss_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftGneissElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Electrotine Ore (Embellishcraft)").push("embellishcraft_jade_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftJadeElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Electrotine Ore (Embellishcraft)").push("embellishcraft_larvikite_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Electrotine Ore (Embellishcraft)").push("embellishcraft_marble_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftMarbleElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Electrotine Ore (Embellishcraft)").push("embellishcraft_slate_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftSlateElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Electrotine Ore").push("hardened_stone_electrotine_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneElectrotineOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneElectrotineOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkHardenedStoneElectrotineOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightHardenedStoneElectrotineOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneElectrotineOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistHardenedStoneElectrotineOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneElectrotineOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneElectrotineOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneElectrotineOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Electrotine.spec, Main.MOD_ID + "/electrotine.toml");
    }
}
