package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class BlackOpal {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableBlackOpalOres;

    public static ForgeConfigSpec.BooleanValue enableStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableGravelBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightGravelBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockBlackOpalOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockBlackOpalOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateBlackOpalOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteBlackOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateBlackOpalOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneBlackOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneBlackOpalOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Black Opal Ores").push("general");
        disableBlackOpalOres = BUILDER.comment("If false, all black opal ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Black Opal Ore").push("stone_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkStoneBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightStoneBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistStoneBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Black Opal Ore").push("andesite_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkAndesiteBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightAndesiteBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistAndesiteBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Black Opal Ore").push("diorite_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkDioriteBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightDioriteBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistDioriteBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Black Opal Ore").push("granite_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGraniteBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightGraniteBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistGraniteBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Black Opal Ore").push("netherrack_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkNetherrackBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightNetherrackBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 96, 0, 256);
        maxHeightNetherrackBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Black Opal Ore").push("end_stone_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEndStoneBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightEndStoneBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEndStoneBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Black Opal Ore").push("sand_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightSandBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Black Opal Ore").push("red_sand_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightRedSandBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Black Opal Ore").push("gravel_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGravelBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightGravelBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Black Opal Ore").push("sandstone_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandstoneBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightSandstoneBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Black Opal Ore").push("red_sandstone_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandstoneBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightRedSandstoneBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Black Opal Ore").push("blue_ice_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBlueIceBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightBlueIceBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Black Opal Ore").push("packed_ice_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkPackedIceBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightPackedIceBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Black Opal Ore").push("bedrock_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockBlackOpalOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Black Opal Ore (Quark)").push("quark_basalt_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkBasaltBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightQuarkBasaltBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 96, 0, 256);
        maxHeightQuarkBasaltBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Black Opal Ore (Quark)").push("quark_limestone_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkLimestoneBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightQuarkLimestoneBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkLimestoneBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Black Opal Ore (Quark)").push("quark_jasper_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkJasperBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightQuarkJasperBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkJasperBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Black Opal Ore (Quark)").push("quark_marble_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkMarbleBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightQuarkMarbleBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkMarbleBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Black Opal Ore (Quark)").push("quark_slate_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkSlateBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightQuarkSlateBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkSlateBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Black Opal Ore (Embellishcraft)").push("embellishcraft_basalt_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Black Opal Ore (Embellishcraft)").push("embellishcraft_gneiss_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightEmbellishcraftGneissBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Black Opal Ore (Embellishcraft)").push("embellishcraft_jade_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightEmbellishcraftJadeBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Black Opal Ore (Embellishcraft)").push("embellishcraft_larvikite_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Black Opal Ore (Embellishcraft)").push("embellishcraft_marble_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Black Opal Ore (Embellishcraft)").push("embellishcraft_slate_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightEmbellishcraftSlateBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Black Opal Ore").push("hardened_stone_black_opal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneBlackOpalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneBlackOpalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkHardenedStoneBlackOpalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk",1, 0, 65536);
        minHeightHardenedStoneBlackOpalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneBlackOpalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistHardenedStoneBlackOpalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneBlackOpalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneBlackOpalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneBlackOpalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, BlackOpal.spec, Main.MOD_ID + "/black_opal.toml");
    }
}
