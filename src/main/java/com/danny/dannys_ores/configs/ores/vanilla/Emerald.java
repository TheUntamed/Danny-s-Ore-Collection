package com.danny.dannys_ores.configs.ores.vanilla;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Emerald {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableEmeraldOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableSandEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightSandEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockEmeraldOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockEmeraldOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateEmeraldOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateEmeraldOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneEmeraldOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Emerald Ores").push("general");
        disableEmeraldOres = BUILDER.comment("If false, all emerald ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Vanilla (Stone) Emerald Ore").push("stone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeVanillaEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkVanillaEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightVanillaEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightVanillaEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistVanillaEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistVanillaEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistVanillaEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistVanillaEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Emerald Ore").push("andesite_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkAndesiteEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightAndesiteEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistAndesiteEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Emerald Ore").push("diorite_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkDioriteEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightDioriteEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistDioriteEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Emerald Ore").push("granite_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGraniteEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightGraniteEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistGraniteEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Emerald Ore").push("netherrack_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkNetherrackEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightNetherrackEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightNetherrackEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Emerald Ore").push("end_stone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEndStoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEndStoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEndStoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Emerald Ore").push("sand_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightSandEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Emerald Ore").push("red_sand_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightRedSandEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Emerald Ore").push("gravel_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGravelEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightGravelEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Emerald Ore").push("sandstone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandstoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightSandstoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Emerald Ore").push("red_sandstone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandstoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightRedSandstoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Emerald Ore").push("blue_ice_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBlueIceEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightBlueIceEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Emerald Ore").push("packed_ice_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkPackedIceEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightPackedIceEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Emerald Ore").push("bedrock_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockEmeraldOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Emerald Ore (Quark)").push("quark_basalt_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkBasaltEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkBasaltEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightQuarkBasaltEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Emerald Ore (Quark)").push("quark_limestone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkLimestoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkLimestoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkLimestoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Emerald Ore (Quark)").push("quark_jasper_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkJasperEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkJasperEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkJasperEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Emerald Ore (Quark)").push("quark_marble_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkMarbleEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkMarbleEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkMarbleEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Emerald Ore (Quark)").push("quark_slate_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkSlateEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkSlateEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkSlateEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Emerald Ore (Embellishcraft)").push("embellishcraft_basalt_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftBasaltEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Emerald Ore (Embellishcraft)").push("embellishcraft_gneiss_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftGneissEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Emerald Ore (Embellishcraft)").push("embellishcraft_jade_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftJadeEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Emerald Ore (Embellishcraft)").push("embellishcraft_larvikite_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Emerald Ore (Embellishcraft)").push("embellishcraft_marble_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftMarbleEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Emerald Ore (Embellishcraft)").push("embellishcraft_slate_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftSlateEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Emerald Ore").push("hardened_stone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkHardenedStoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightHardenedStoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistHardenedStoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Emerald.spec, Main.MOD_ID + "/emerald.toml");
    }
}
