package com.danny.dannys_ores.configs.ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Prudentium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePrudentiumOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPrudentiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPrudentiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePrudentiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePrudentiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePrudentiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePrudentiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePrudentiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Prudentium Ores").push(PathHandler.getGeneralPath());
        disablePrudentiumOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Prudentium Ore").push("stone_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStonePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkStonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightStonePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStonePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistStonePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStonePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStonePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStonePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Prudentium Ore").push("andesite_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesitePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Prudentium Ore").push("diorite_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioritePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioritePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkDioritePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightDioritePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioritePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistDioritePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioritePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioritePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioritePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Prudentium Ore").push("granite_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGranitePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGranitePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkGranitePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGranitePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGranitePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistGranitePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGranitePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGranitePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGranitePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Prudentium Ore").push("netherrack_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Prudentium Ore").push("end_stone_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStonePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Prudentium Ore").push("sand_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Prudentium Ore").push("red_sand_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Prudentium Ore").push("gravel_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGravelPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Prudentium Ore").push("sandstone_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Prudentium Ore").push("red_sandstone_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstonePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Prudentium Ore").push("blue_ice_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIcePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Prudentium Ore").push("packed_ice_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightPackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIcePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Prudentium Ore").push("bedrock_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockPrudentiumOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Prudentium Ore (Quark)").push("quark_basalt_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Prudentium Ore (Quark)").push("quark_limestone_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestonePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Prudentium Ore (Quark)").push("quark_jasper_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Prudentium Ore (Quark)").push("quark_marble_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarblePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Prudentium Ore (Quark)").push("quark_slate_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlatePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Prudentium Ore (Embellishcraft)").push("embellishcraft_basalt_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Prudentium Ore (Embellishcraft)").push("embellishcraft_gneiss_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissPrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Prudentium Ore (Embellishcraft)").push("embellishcraft_jade_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Prudentium Ore (Embellishcraft)").push("embellishcraft_larvikite_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikitePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Prudentium Ore (Embellishcraft)").push("embellishcraft_marble_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarblePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Prudentium Ore (Embellishcraft)").push("embellishcraft_slate_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlatePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Prudentium Ore").push("hardened_stone_prudentium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStonePrudentiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Prudentium.spec, path + "/prudentium.toml");
    }
}
