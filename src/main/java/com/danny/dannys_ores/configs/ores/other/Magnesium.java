package com.danny.dannys_ores.configs.ores.other;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Magnesium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableMagnesiumOres;

    public static ForgeConfigSpec.BooleanValue enableStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockMagnesiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockMagnesiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateMagnesiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteMagnesiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateMagnesiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneMagnesiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneMagnesiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Magnesium Ores").push(PathHandler.getGeneralPath());
        disableMagnesiumOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Magnesium Ore").push("stone_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkStoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightStoneMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistStoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Magnesium Ore").push("andesite_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Magnesium Ore").push("diorite_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Magnesium Ore").push("granite_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Magnesium Ore").push("netherrack_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Magnesium Ore").push("end_stone_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Magnesium Ore").push("sand_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Magnesium Ore").push("red_sand_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Magnesium Ore").push("gravel_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkGravelMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightGravelMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Magnesium Ore").push("sandstone_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Magnesium Ore").push("red_sandstone_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Magnesium Ore").push("blue_ice_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Magnesium Ore").push("packed_ice_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkPackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightPackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Magnesium Ore").push("bedrock_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockMagnesiumOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Magnesium Ore (Quark)").push("quark_basalt_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Magnesium Ore (Quark)").push("quark_limestone_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Magnesium Ore (Quark)").push("quark_jasper_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Magnesium Ore (Quark)").push("quark_marble_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Magnesium Ore (Quark)").push("quark_slate_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Magnesium Ore (Embellishcraft)").push("embellishcraft_basalt_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Magnesium Ore (Embellishcraft)").push("embellishcraft_gneiss_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Magnesium Ore (Embellishcraft)").push("embellishcraft_jade_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Magnesium Ore (Embellishcraft)").push("embellishcraft_larvikite_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Magnesium Ore (Embellishcraft)").push("embellishcraft_marble_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Magnesium Ore (Embellishcraft)").push("embellishcraft_slate_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Magnesium Ore").push("hardened_stone_magnesium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneMagnesiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Magnesium.spec, path + "/magnesium.toml");
    }
}
