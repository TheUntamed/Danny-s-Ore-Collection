package com.danny.dannys_ores.configs.ores.elementary;

import com.danny.dannys_ores.util.CommentHandler;
import com.danny.dannys_ores.util.PathHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Earth {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableEarthOres;
    public static ForgeConfigSpec.BooleanValue disableEffectEarthOres;
    public static ForgeConfigSpec.BooleanValue onlyWhileSelectedEarthOres;
    public static ForgeConfigSpec.IntValue durationSlownessEffectEarthOres;
    public static ForgeConfigSpec.IntValue effectLevelEarthOres;

    public static ForgeConfigSpec.BooleanValue enableStoneEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneEarthOre;
    public static ForgeConfigSpec.IntValue minHeightStoneEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneEarthOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteEarthOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteEarthOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteEarthOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteEarthOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteEarthOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteEarthOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackEarthOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackEarthOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneEarthOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneEarthOre;

    public static ForgeConfigSpec.BooleanValue enableSandEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeSandEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandEarthOre;
    public static ForgeConfigSpec.IntValue minHeightSandEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightSandEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandEarthOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandEarthOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandEarthOre;

    public static ForgeConfigSpec.BooleanValue enableGravelEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelEarthOre;
    public static ForgeConfigSpec.IntValue minHeightGravelEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelEarthOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneEarthOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneEarthOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceEarthOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceEarthOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceEarthOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceEarthOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceEarthOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockEarthOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockEarthOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockEarthOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltEarthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltEarthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneEarthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperEarthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperEarthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleEarthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleEarthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateEarthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateEarthOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltEarthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissEarthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeEarthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleEarthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteEarthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateEarthOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneEarthOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneEarthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneEarthOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneEarthOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneEarthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneEarthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneEarthOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Earth Ores").push(PathHandler.getGeneralPath());
        disableEarthOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        disableEffectEarthOres = BUILDER.comment("If true, earth ores will not slow players down while in their inventory/hand.").define("disableSlownessEffect", false);
        onlyWhileSelectedEarthOres = BUILDER.comment("If true, a player will only be slowed down while holding the ore in a hand. If false, it just has to be in the inventory.").define(PathHandler.getSelectedPath(), false);
        durationSlownessEffectEarthOres = BUILDER.comment("How long the effect will last (in ticks) after removing the ore from the inventory/hand. While in hand/inventory the timer will refresh.").defineInRange(PathHandler.getDurationPath(), 1, 1, 1000000);
        effectLevelEarthOres = BUILDER.comment(CommentHandler.getEffectLevelComment()).defineInRange(PathHandler.getEffectLevelPath(), 1, 1, 10);
        BUILDER.comment("Stone Earth Ore").push("stone_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkStoneEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightStoneEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistStoneEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Earth Ore").push("andesite_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkAndesiteEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightAndesiteEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistAndesiteEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Earth Ore").push("diorite_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkDioriteEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightDioriteEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistDioriteEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Earth Ore").push("granite_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkGraniteEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightGraniteEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistGraniteEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Earth Ore").push("netherrack_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightNetherrackEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistNetherrackEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Earth Ore").push("end_stone_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStoneEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStoneEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Earth Ore").push("sand_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Earth Ore").push("red_sand_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Earth Ore").push("gravel_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Earth Ore").push("sandstone_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstoneEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstoneEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Earth Ore").push("red_sandstone_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Earth Ore").push("blue_ice_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIceEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIceEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Earth Ore").push("packed_ice_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIceEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIceEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Earth Ore").push("bedrock_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBedrockEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block and Item properties").push(PathHandler.getPropertiesPath());
        resistanceBedrockEarthOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Earth Ore (Quark)").push("quark_basalt_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Earth Ore (Quark)").push("quark_limestone_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Earth Ore (Quark)").push("quark_jasper_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Earth Ore (Quark)").push("quark_marble_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Earth Ore (Quark)").push("quark_slate_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Earth Ore (Embellishcraft)").push("embellishcraft_basalt_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Earth Ore (Embellishcraft)").push("embellishcraft_gneiss_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Earth Ore (Embellishcraft)").push("embellishcraft_jade_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Earth Ore (Embellishcraft)").push("embellishcraft_larvikite_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Earth Ore (Embellishcraft)").push("embellishcraft_marble_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Earth Ore (Embellishcraft)").push("embellishcraft_slate_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Earth Ore").push("hardened_stone_earth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneEarthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Earth.spec, path + "/earth.toml");
    }
}
