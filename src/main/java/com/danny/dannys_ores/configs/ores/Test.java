package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.util.CommentHandler;
import com.danny.dannys_ores.util.OreTypes;
import com.danny.dannys_ores.util.PathHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Test {
    private OreTypes type;

    private final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public ForgeConfigSpec spec;
    public ForgeConfigSpec.BooleanValue disableAllVariants;

    public ForgeConfigSpec.BooleanValue enableStoneVariant;
    public ForgeConfigSpec.IntValue veinSizeStoneVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkStoneVariant;
    public ForgeConfigSpec.IntValue minHeightStoneVariant;
    public ForgeConfigSpec.IntValue maxHeightStoneVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistStoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneVariant;

    public ForgeConfigSpec.BooleanValue enableAndesiteVariant;
    public ForgeConfigSpec.IntValue veinSizeAndesiteVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkAndesiteVariant;
    public ForgeConfigSpec.IntValue minHeightAndesiteVariant;
    public ForgeConfigSpec.IntValue maxHeightAndesiteVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteVariant;

    public ForgeConfigSpec.BooleanValue enableDioriteVariant;
    public ForgeConfigSpec.IntValue veinSizeDioriteVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkDioriteVariant;
    public ForgeConfigSpec.IntValue minHeightDioriteVariant;
    public ForgeConfigSpec.IntValue maxHeightDioriteVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistDioriteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteVariant;

    public ForgeConfigSpec.BooleanValue enableGraniteVariant;
    public ForgeConfigSpec.IntValue veinSizeGraniteVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkGraniteVariant;
    public ForgeConfigSpec.IntValue minHeightGraniteVariant;
    public ForgeConfigSpec.IntValue maxHeightGraniteVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistGraniteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteVariant;

    public ForgeConfigSpec.BooleanValue enableNetherrackVariant;
    public ForgeConfigSpec.IntValue veinSizeNetherrackVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkNetherrackVariant;
    public ForgeConfigSpec.IntValue minHeightNetherrackVariant;
    public ForgeConfigSpec.IntValue maxHeightNetherrackVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackVariant;

    public ForgeConfigSpec.BooleanValue enableEndStoneVariant;
    public ForgeConfigSpec.IntValue veinSizeEndStoneVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkEndStoneVariant;
    public ForgeConfigSpec.IntValue minHeightEndStoneVariant;
    public ForgeConfigSpec.IntValue maxHeightEndStoneVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneVariant;

    public ForgeConfigSpec.BooleanValue enableSandVariant;
    public ForgeConfigSpec.IntValue veinSizeSandVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkSandVariant;
    public ForgeConfigSpec.IntValue minHeightSandVariant;
    public ForgeConfigSpec.IntValue maxHeightSandVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistSandVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistSandVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandVariant;

    public ForgeConfigSpec.BooleanValue enableRedSandVariant;
    public ForgeConfigSpec.IntValue veinSizeRedSandVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkRedSandVariant;
    public ForgeConfigSpec.IntValue minHeightRedSandVariant;
    public ForgeConfigSpec.IntValue maxHeightRedSandVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistRedSandVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandVariant;

    public ForgeConfigSpec.BooleanValue enableGravelVariant;
    public ForgeConfigSpec.IntValue veinSizeGravelVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkGravelVariant;
    public ForgeConfigSpec.IntValue minHeightGravelVariant;
    public ForgeConfigSpec.IntValue maxHeightGravelVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistGravelVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelVariant;

    public ForgeConfigSpec.BooleanValue enableSandstoneVariant;
    public ForgeConfigSpec.IntValue veinSizeSandstoneVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkSandstoneVariant;
    public ForgeConfigSpec.IntValue minHeightSandstoneVariant;
    public ForgeConfigSpec.IntValue maxHeightSandstoneVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneVariant;

    public ForgeConfigSpec.BooleanValue enableRedSandstoneVariant;
    public ForgeConfigSpec.IntValue veinSizeRedSandstoneVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneVariant;
    public ForgeConfigSpec.IntValue minHeightRedSandstoneVariant;
    public ForgeConfigSpec.IntValue maxHeightRedSandstoneVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneVariant;

    public ForgeConfigSpec.BooleanValue enableBlueIceVariant;
    public ForgeConfigSpec.IntValue veinSizeBlueIceVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkBlueIceVariant;
    public ForgeConfigSpec.IntValue minHeightBlueIceVariant;
    public ForgeConfigSpec.IntValue maxHeightBlueIceVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceVariant;

    public ForgeConfigSpec.BooleanValue enablePackedIceVariant;
    public ForgeConfigSpec.IntValue veinSizePackedIceVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkPackedIceVariant;
    public ForgeConfigSpec.IntValue minHeightPackedIceVariant;
    public ForgeConfigSpec.IntValue maxHeightPackedIceVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceVariant;

    public ForgeConfigSpec.BooleanValue enableBedrockVariant;
    public ForgeConfigSpec.IntValue veinSizeBedrockVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkBedrockVariant;
    public ForgeConfigSpec.IntValue minHeightBedrockVariant;
    public ForgeConfigSpec.IntValue maxHeightBedrockVariant;
    public ForgeConfigSpec.DoubleValue resistanceBedrockVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistBedrockVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockVariant;

    // Quark
    public ForgeConfigSpec.BooleanValue enableQuarkBasaltVariant;
    public ForgeConfigSpec.IntValue veinSizeQuarkBasaltVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltVariant;
    public ForgeConfigSpec.IntValue minHeightQuarkBasaltVariant;
    public ForgeConfigSpec.IntValue maxHeightQuarkBasaltVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltVariant;

    public ForgeConfigSpec.BooleanValue enableQuarkLimestoneVariant;
    public ForgeConfigSpec.IntValue veinSizeQuarkLimestoneVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneVariant;
    public ForgeConfigSpec.IntValue minHeightQuarkLimestoneVariant;
    public ForgeConfigSpec.IntValue maxHeightQuarkLimestoneVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneVariant;

    public ForgeConfigSpec.BooleanValue enableQuarkJasperVariant;
    public ForgeConfigSpec.IntValue veinSizeQuarkJasperVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperVariant;
    public ForgeConfigSpec.IntValue minHeightQuarkJasperVariant;
    public ForgeConfigSpec.IntValue maxHeightQuarkJasperVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperVariant;

    public ForgeConfigSpec.BooleanValue enableQuarkMarbleVariant;
    public ForgeConfigSpec.IntValue veinSizeQuarkMarbleVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleVariant;
    public ForgeConfigSpec.IntValue minHeightQuarkMarbleVariant;
    public ForgeConfigSpec.IntValue maxHeightQuarkMarbleVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleVariant;

    public ForgeConfigSpec.BooleanValue enableQuarkSlateVariant;
    public ForgeConfigSpec.IntValue veinSizeQuarkSlateVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateVariant;
    public ForgeConfigSpec.IntValue minHeightQuarkSlateVariant;
    public ForgeConfigSpec.IntValue maxHeightQuarkSlateVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateVariant;

    // Embellishcraft
    public ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltVariant;

    public ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissVariant;
    public ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissVariant;
    public ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissVariant;
    public ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissVariant;

    public ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeVariant;
    public ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeVariant;
    public ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeVariant;
    public ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeVariant;

    public ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleVariant;

    public ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteVariant;

    public ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateVariant;
    public ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateVariant;
    public ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateVariant;
    public ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateVariant;

    // Danny's Stone Variants
    public ForgeConfigSpec.BooleanValue enableHardenedStoneVariant;
    public ForgeConfigSpec.IntValue veinSizeHardenedStoneVariant;
    public ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneVariant;
    public ForgeConfigSpec.IntValue minHeightHardenedStoneVariant;
    public ForgeConfigSpec.IntValue maxHeightHardenedStoneVariant;
    public ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneVariant;
    public ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneVariant;
    public ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneVariant;

    private void build() {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment(CommentHandler.getVariantComment(type)).push(PathHandler.getGeneralPath());
        disableAllVariants = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Variant").push("stone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkStoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightStoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistStoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Variant").push("andesite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkAndesiteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightAndesiteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistAndesiteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Variant").push("diorite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkDioriteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightDioriteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistDioriteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Variant").push("granite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGraniteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGraniteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistGraniteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Variant").push("netherrack_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkNetherrackVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightNetherrackVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightNetherrackVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Variant").push("end_stone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEndStoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEndStoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Variant").push("sand_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightSandVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Variant").push("red_sand_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightRedSandVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Variant").push("gravel_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGravelVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Variant").push("sandstone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightSandstoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Variant").push("red_sandstone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightRedSandstoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Variant").push("blue_ice_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIceVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightBlueIceVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Variant").push("packed_ice_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIceVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightPackedIceVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Variant").push("bedrock_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBedrockVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightBedrockVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockVariant = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Variant (Quark)").push("quark_basalt_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkBasaltVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkBasaltVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightQuarkBasaltVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Variant (Quark)").push("quark_limestone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Variant (Quark)").push("quark_jasper_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkJasperVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkJasperVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkJasperVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Variant (Quark)").push("quark_marble_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkMarbleVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkMarbleVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Variant (Quark)").push("quark_slate_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkSlateVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkSlateVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkSlateVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Variant (Embellishcraft)").push("embellishcraft_basalt_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Ore (Embellishcraft)").push("embellishcraft_gneiss_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Variant (Embellishcraft)").push("embellishcraft_jade_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Variant (Embellishcraft)").push("embellishcraft_larvikite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Variant (Embellishcraft)").push("embellishcraft_marble_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Variant (Embellishcraft)").push("embellishcraft_slate_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Variant").push("hardened_stone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkHardenedStoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightHardenedStoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistHardenedStoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public Test (OreTypes type) {
        this.type = type;
    }

    public void loadConfig(String path) {
        System.err.println("loadConfig oreType: " + type);
        build();
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, this.spec, path + "/" + type.toString().toLowerCase() + ".toml");
    }
}
