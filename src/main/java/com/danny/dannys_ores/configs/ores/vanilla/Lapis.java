package com.danny.dannys_ores.configs.ores.vanilla;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Lapis {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableLapisOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaLapisOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaLapisOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteLapisOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteLapisOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteLapisOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteLapisOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteLapisOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteLapisOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackLapisOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackLapisOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneLapisOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneLapisOre;

    public static ForgeConfigSpec.BooleanValue enableSandLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeSandLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandLapisOre;
    public static ForgeConfigSpec.IntValue minHeightSandLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightSandLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandLapisOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandLapisOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandLapisOre;

    public static ForgeConfigSpec.BooleanValue enableGravelLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelLapisOre;
    public static ForgeConfigSpec.IntValue minHeightGravelLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelLapisOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneLapisOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneLapisOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceLapisOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceLapisOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceLapisOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceLapisOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceLapisOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceLapisOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceLapisOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockLapisOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockLapisOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockLapisOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltLapisOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltLapisOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneLapisOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperLapisOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperLapisOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleLapisOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleLapisOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateLapisOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateLapisOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltLapisOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissLapisOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeLapisOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleLapisOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteLapisOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateLapisOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneLapisOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneLapisOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneLapisOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneLapisOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneLapisOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneLapisOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneLapisOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Lapis Ores").push("general");
        disableLapisOres = BUILDER.comment("If false, all lapis ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Vanilla (Stone) Lapis Ore").push("stone_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeVanillaLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkVanillaLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightVanillaLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightVanillaLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistVanillaLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistVanillaLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistVanillaLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistVanillaLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Lapis Ore").push("andesite_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkAndesiteLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightAndesiteLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistAndesiteLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Lapis Ore").push("diorite_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkDioriteLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightDioriteLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistDioriteLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Lapis Ore").push("granite_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkGraniteLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightGraniteLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistGraniteLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Lapis Ore").push("netherrack_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkNetherrackLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightNetherrackLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightNetherrackLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Lapis Ore").push("end_stone_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEndStoneLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEndStoneLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEndStoneLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Lapis Ore").push("sand_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkSandLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Lapis Ore").push("red_sand_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkRedSandLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Lapis Ore").push("gravel_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkGravelLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightGravelLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Lapis Ore").push("sandstone_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkSandstoneLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandstoneLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Lapis Ore").push("red_sandstone_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkRedSandstoneLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandstoneLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Lapis Ore").push("blue_ice_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkBlueIceLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBlueIceLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Lapis Ore").push("packed_ice_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkPackedIceLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightPackedIceLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Lapis Ore").push("bedrock_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockLapisOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Lapis Ore (Quark)").push("quark_basalt_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkBasaltLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkBasaltLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightQuarkBasaltLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Lapis Ore (Quark)").push("quark_limestone_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkLimestoneLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkLimestoneLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkLimestoneLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Lapis Ore (Quark)").push("quark_jasper_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkJasperLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkJasperLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkJasperLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Lapis Ore (Quark)").push("quark_marble_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkMarbleLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkMarbleLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkMarbleLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Lapis Ore (Quark)").push("quark_slate_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkQuarkSlateLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkSlateLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkSlateLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Lapis Ore (Embellishcraft)").push("embellishcraft_basalt_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftBasaltLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Lapis Ore (Embellishcraft)").push("embellishcraft_gneiss_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftGneissLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftGneissLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Lapis Ore (Embellishcraft)").push("embellishcraft_jade_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftJadeLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftJadeLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Lapis Ore (Embellishcraft)").push("embellishcraft_larvikite_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftLarvikiteLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Lapis Ore (Embellishcraft)").push("embellishcraft_marble_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftMarbleLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Lapis Ore (Embellishcraft)").push("embellishcraft_slate_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkEmbellishcraftSlateLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEmbellishcraftSlateLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Lapis Ore").push("hardened_stone_lapis_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneLapisOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneLapisOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 7, 0, 65536);
        veinsPerChunkHardenedStoneLapisOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightHardenedStoneLapisOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneLapisOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistHardenedStoneLapisOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneLapisOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneLapisOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneLapisOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Lapis.spec, Main.MOD_ID + "/lapis.toml");
    }
}
