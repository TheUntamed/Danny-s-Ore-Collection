package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Imperium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableImperiumOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceImperiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockImperiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockImperiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateImperiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteImperiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateImperiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneImperiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneImperiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneImperiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneImperiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneImperiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneImperiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Imperium Ores").push("general");
        disableImperiumOres = BUILDER.comment("If false, all imperium ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Imperium Ore").push("stone_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkStoneImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightStoneImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistStoneImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Imperium Ore").push("andesite_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkAndesiteImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightAndesiteImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistAndesiteImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Imperium Ore").push("diorite_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkDioriteImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightDioriteImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistDioriteImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Imperium Ore").push("granite_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGraniteImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGraniteImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistGraniteImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Imperium Ore").push("netherrack_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkNetherrackImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightNetherrackImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightNetherrackImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Imperium Ore").push("end_stone_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEndStoneImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightEndStoneImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Imperium Ore").push("sand_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Imperium Ore").push("red_sand_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Imperium Ore").push("gravel_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGravelImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightGravelImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Imperium Ore").push("sandstone_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandstoneImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightSandstoneImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Imperium Ore").push("red_sandstone_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandstoneImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightRedSandstoneImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Imperium Ore").push("blue_ice_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBlueIceImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBlueIceImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Imperium Ore").push("packed_ice_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkPackedIceImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightPackedIceImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Imperium Ore").push("bedrock_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockImperiumOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Imperium Ore (Quark)").push("quark_basalt_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkBasaltImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightQuarkBasaltImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightQuarkBasaltImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Imperium Ore (Quark)").push("quark_limestone_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkLimestoneImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkLimestoneImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkLimestoneImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Imperium Ore (Quark)").push("quark_jasper_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkJasperImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkJasperImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkJasperImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Imperium Ore (Quark)").push("quark_marble_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkMarbleImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkMarbleImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkMarbleImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Imperium Ore (Quark)").push("quark_slate_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkSlateImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkSlateImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkSlateImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Imperium Ore (Embellishcraft)").push("embellishcraft_basalt_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftBasaltImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Imperium Ore (Embellishcraft)").push("embellishcraft_gneiss_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftGneissImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Imperium Ore (Embellishcraft)").push("embellishcraft_jade_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftJadeImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Imperium Ore (Embellishcraft)").push("embellishcraft_larvikite_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Imperium Ore (Embellishcraft)").push("embellishcraft_marble_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftMarbleImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Imperium Ore (Embellishcraft)").push("embellishcraft_slate_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftSlateImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Imperium Ore").push("hardened_stone_imperium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneImperiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneImperiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkHardenedStoneImperiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightHardenedStoneImperiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneImperiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistHardenedStoneImperiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneImperiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneImperiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneImperiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Imperium.spec, Main.MOD_ID + "/imperium.toml");
    }
}
