package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Steel {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableSteelOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneSteelOre;
    public static ForgeConfigSpec.IntValue minHeightStoneSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneSteelOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteSteelOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteSteelOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteSteelOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteSteelOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteSteelOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteSteelOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackSteelOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackSteelOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneSteelOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneSteelOre;

    public static ForgeConfigSpec.BooleanValue enableSandSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeSandSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandSteelOre;
    public static ForgeConfigSpec.IntValue minHeightSandSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightSandSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandSteelOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandSteelOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandSteelOre;

    public static ForgeConfigSpec.BooleanValue enableGravelSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelSteelOre;
    public static ForgeConfigSpec.IntValue minHeightGravelSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelSteelOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneSteelOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneSteelOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceSteelOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceSteelOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceSteelOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceSteelOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceSteelOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockSteelOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockSteelOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockSteelOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltSteelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltSteelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneSteelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperSteelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperSteelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleSteelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleSteelOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateSteelOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateSteelOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltSteelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissSteelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeSteelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleSteelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteSteelOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateSteelOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneSteelOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneSteelOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneSteelOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneSteelOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneSteelOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneSteelOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneSteelOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Steel Ores").push("general");
        disableSteelOres = BUILDER.comment("If false, all steel ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Steel Ore").push("stone_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkStoneSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightStoneSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistStoneSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Steel Ore").push("andesite_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkAndesiteSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightAndesiteSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistAndesiteSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Steel Ore").push("diorite_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkDioriteSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightDioriteSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistDioriteSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Steel Ore").push("granite_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkGraniteSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightGraniteSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistGraniteSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Steel Ore").push("netherrack_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkNetherrackSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightNetherrackSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Steel Ore").push("end_stone_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStoneSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEndStoneSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Steel Ore").push("sand_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightSandSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Steel Ore").push("red_sand_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightRedSandSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Steel Ore").push("gravel_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightGravelSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Steel Ore").push("sandstone_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstoneSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightSandstoneSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Steel Ore").push("red_sandstone_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstoneSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightRedSandstoneSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Steel Ore").push("blue_ice_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIceSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightBlueIceSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Steel Ore").push("packed_ice_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIceSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightPackedIceSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Steel Ore").push("bedrock_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockSteelOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Steel Ore (Quark)").push("quark_basalt_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkBasaltSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Steel Ore (Quark)").push("quark_limestone_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkQuarkLimestoneSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightQuarkLimestoneSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkLimestoneSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Steel Ore (Quark)").push("quark_jasper_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkQuarkJasperSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightQuarkJasperSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkJasperSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Steel Ore (Quark)").push("quark_marble_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkQuarkMarbleSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightQuarkMarbleSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkMarbleSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Steel Ore (Quark)").push("quark_slate_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkQuarkSlateSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightQuarkSlateSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkSlateSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Steel Ore (Embellishcraft)").push("embellishcraft_basalt_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightEmbellishcraftBasaltSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Steel Ore (Embellishcraft)").push("embellishcraft_gneiss_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEmbellishcraftGneissSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightEmbellishcraftGneissSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Steel Ore (Embellishcraft)").push("embellishcraft_jade_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEmbellishcraftJadeSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightEmbellishcraftJadeSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Steel Ore (Embellishcraft)").push("embellishcraft_larvikite_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightEmbellishcraftLarvikiteSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Steel Ore (Embellishcraft)").push("embellishcraft_marble_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightEmbellishcraftMarbleSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Steel Ore (Embellishcraft)").push("embellishcraft_slate_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEmbellishcraftSlateSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightEmbellishcraftSlateSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Steel Ore").push("hardened_stone_steel_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneSteelOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneSteelOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkHardenedStoneSteelOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightHardenedStoneSteelOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneSteelOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistHardenedStoneSteelOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneSteelOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneSteelOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneSteelOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Steel.spec, Main.MOD_ID + "/steel.toml");
    }
}
