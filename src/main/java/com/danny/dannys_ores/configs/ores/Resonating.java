package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Resonating {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableResonatingOres;

    public static ForgeConfigSpec.BooleanValue enableStoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightStoneResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableSandResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeSandResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightSandResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightSandResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableGravelResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightGravelResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceResonatingOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockResonatingOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockResonatingOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateResonatingOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteResonatingOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateResonatingOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneResonatingOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneResonatingOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneResonatingOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneResonatingOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneResonatingOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneResonatingOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Resonating Ores").push("general");
        disableResonatingOres = BUILDER.comment("If false, all resonating ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Resonating Ore").push("stone_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkStoneResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightStoneResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistStoneResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Resonating Ore").push("andesite_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkAndesiteResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightAndesiteResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistAndesiteResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Resonating Ore").push("diorite_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkDioriteResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightDioriteResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistDioriteResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Resonating Ore").push("granite_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGraniteResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightGraniteResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistGraniteResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Resonating Ore").push("netherrack_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkNetherrackResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightNetherrackResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistNetherrackResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Resonating Ore").push("end_stone_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEndStoneResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEndStoneResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Resonating Ore").push("sand_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkSandResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Resonating Ore").push("red_sand_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkRedSandResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Resonating Ore").push("gravel_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkGravelResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGravelResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Resonating Ore").push("sandstone_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkSandstoneResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandstoneResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Resonating Ore").push("red_sandstone_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkRedSandstoneResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandstoneResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Resonating Ore").push("blue_ice_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkBlueIceResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightBlueIceResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Resonating Ore").push("packed_ice_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkPackedIceResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightPackedIceResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Resonating Ore").push("bedrock_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockResonatingOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Resonating Ore (Quark)").push("quark_basalt_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkBasaltResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkBasaltResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistQuarkBasaltResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Resonating Ore (Quark)").push("quark_limestone_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkLimestoneResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkLimestoneResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkLimestoneResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Resonating Ore (Quark)").push("quark_jasper_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkJasperResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkJasperResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkJasperResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Resonating Ore (Quark)").push("quark_marble_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkMarbleResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkMarbleResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkMarbleResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Resonating Ore (Quark)").push("quark_slate_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkSlateResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkSlateResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkSlateResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Resonating Ore (Embellishcraft)").push("embellishcraft_basalt_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftBasaltResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Resonating Ore (Embellishcraft)").push("embellishcraft_gneiss_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftGneissResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Resonating Ore (Embellishcraft)").push("embellishcraft_jade_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftJadeResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Resonating Ore (Embellishcraft)").push("embellishcraft_larvikite_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Resonating Ore (Embellishcraft)").push("embellishcraft_marble_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftMarbleResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Resonating Ore (Embellishcraft)").push("embellishcraft_slate_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftSlateResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Resonating Ore").push("hardened_stone_resonating_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneResonatingOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneResonatingOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkHardenedStoneResonatingOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightHardenedStoneResonatingOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneResonatingOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistHardenedStoneResonatingOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneResonatingOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneResonatingOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneResonatingOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Resonating.spec, Main.MOD_ID + "/resonating.toml");
    }
}
