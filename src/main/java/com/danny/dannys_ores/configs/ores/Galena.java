package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Galena {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableGalenaOres;

    public static ForgeConfigSpec.BooleanValue enableStoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightStoneGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableSandGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeSandGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightSandGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightSandGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableGravelGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightGravelGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceGalenaOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockGalenaOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockGalenaOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateGalenaOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteGalenaOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateGalenaOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneGalenaOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneGalenaOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneGalenaOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneGalenaOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneGalenaOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneGalenaOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Galena Ores").push("general");
        disableGalenaOres = BUILDER.comment("If false, all galena ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Galena Ore").push("stone_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkStoneGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightStoneGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistStoneGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Galena Ore").push("andesite_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkAndesiteGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightAndesiteGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistAndesiteGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Galena Ore").push("diorite_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkDioriteGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightDioriteGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistDioriteGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Galena Ore").push("granite_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGraniteGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGraniteGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistGraniteGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Galena Ore").push("netherrack_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkNetherrackGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightNetherrackGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightNetherrackGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistNetherrackGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Galena Ore").push("end_stone_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEndStoneGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEndStoneGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Galena Ore").push("sand_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Galena Ore").push("red_sand_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Galena Ore").push("gravel_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGravelGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGravelGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Galena Ore").push("sandstone_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandstoneGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandstoneGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Galena Ore").push("red_sandstone_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandstoneGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandstoneGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Galena Ore").push("blue_ice_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkBlueIceGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightBlueIceGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Galena Ore").push("packed_ice_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkPackedIceGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightPackedIceGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Galena Ore").push("bedrock_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockGalenaOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Galena Ore (Quark)").push("quark_basalt_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkBasaltGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkBasaltGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkBasaltGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistQuarkBasaltGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Galena Ore (Quark)").push("quark_limestone_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkLimestoneGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkLimestoneGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkLimestoneGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Galena Ore (Quark)").push("quark_jasper_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkJasperGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkJasperGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkJasperGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Galena Ore (Quark)").push("quark_marble_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkMarbleGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkMarbleGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkMarbleGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Galena Ore (Quark)").push("quark_slate_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkSlateGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkSlateGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkSlateGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Galena Ore (Embellishcraft)").push("embellishcraft_basalt_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftBasaltGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftBasaltGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Galena Ore (Embellishcraft)").push("embellishcraft_gneiss_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftGneissGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftGneissGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Galena Ore (Embellishcraft)").push("embellishcraft_jade_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftJadeGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftJadeGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Galena Ore (Embellishcraft)").push("embellishcraft_larvikite_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Galena Ore (Embellishcraft)").push("embellishcraft_marble_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftMarbleGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftMarbleGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Galena Ore (Embellishcraft)").push("embellishcraft_slate_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftSlateGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftSlateGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Galena Ore").push("hardened_stone_galena_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneGalenaOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneGalenaOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkHardenedStoneGalenaOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightHardenedStoneGalenaOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneGalenaOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistHardenedStoneGalenaOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneGalenaOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneGalenaOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneGalenaOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Galena.spec, Main.MOD_ID + "/galena.toml");
    }
}
