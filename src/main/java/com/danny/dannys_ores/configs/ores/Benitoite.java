package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Benitoite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableBenitoiteOres;

    public static ForgeConfigSpec.BooleanValue enableStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockBenitoiteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockBenitoiteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateBenitoiteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteBenitoiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateBenitoiteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneBenitoiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneBenitoiteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Benitoite Ores").push("general");
        disableBenitoiteOres = BUILDER.comment("If false, all benitoite ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Benitoite Ore").push("stone_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkStoneBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightStoneBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistStoneBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Benitoite Ore").push("andesite_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkAndesiteBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightAndesiteBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistAndesiteBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Benitoite Ore").push("diorite_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkDioriteBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightDioriteBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistDioriteBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Benitoite Ore").push("granite_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGraniteBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGraniteBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistGraniteBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Benitoite Ore").push("netherrack_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkNetherrackBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightNetherrackBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightNetherrackBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Benitoite Ore").push("end_stone_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEndStoneBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEndStoneBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEndStoneBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Benitoite Ore").push("sand_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkSandBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Benitoite Ore").push("red_sand_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkRedSandBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Benitoite Ore").push("gravel_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGravelBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Benitoite Ore").push("sandstone_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkSandstoneBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandstoneBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Benitoite Ore").push("red_sandstone_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkRedSandstoneBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandstoneBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Benitoite Ore").push("blue_ice_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkBlueIceBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightBlueIceBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Benitoite Ore").push("packed_ice_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkPackedIceBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightPackedIceBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Benitoite Ore").push("bedrock_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockBenitoiteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Benitoite Ore (Quark)").push("quark_basalt_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkQuarkBasaltBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkBasaltBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkBasaltBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Benitoite Ore (Quark)").push("quark_limestone_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkLimestoneBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkLimestoneBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkLimestoneBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Benitoite Ore (Quark)").push("quark_jasper_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkJasperBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkJasperBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkJasperBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Benitoite Ore (Quark)").push("quark_marble_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkMarbleBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkMarbleBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkMarbleBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Benitoite Ore (Quark)").push("quark_slate_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkSlateBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkSlateBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkSlateBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Benitoite Ore (Embellishcraft)").push("embellishcraft_basalt_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Benitoite Ore (Embellishcraft)").push("embellishcraft_gneiss_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEmbellishcraftGneissBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftGneissBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Benitoite Ore (Embellishcraft)").push("embellishcraft_jade_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEmbellishcraftJadeBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftJadeBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Benitoite Ore (Embellishcraft)").push("embellishcraft_larvikite_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Benitoite Ore (Embellishcraft)").push("embellishcraft_marble_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Benitoite Ore (Embellishcraft)").push("embellishcraft_slate_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEmbellishcraftSlateBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftSlateBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Benitoite Ore").push("hardened_stone_benitoite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneBenitoiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneBenitoiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkHardenedStoneBenitoiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightHardenedStoneBenitoiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneBenitoiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistHardenedStoneBenitoiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneBenitoiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneBenitoiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneBenitoiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Benitoite.spec, Main.MOD_ID + "/benitoite.toml");
    }
}
