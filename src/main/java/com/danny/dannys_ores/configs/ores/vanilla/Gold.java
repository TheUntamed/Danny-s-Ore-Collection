package com.danny.dannys_ores.configs.ores.vanilla;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Gold {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableGoldOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaGoldOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaGoldOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteGoldOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteGoldOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteGoldOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteGoldOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteGoldOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackGoldOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneGoldOre;

    public static ForgeConfigSpec.BooleanValue enableSandGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandGoldOre;
    public static ForgeConfigSpec.IntValue minHeightSandGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandGoldOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandGoldOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandGoldOre;

    public static ForgeConfigSpec.BooleanValue enableGravelGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelGoldOre;
    public static ForgeConfigSpec.IntValue minHeightGravelGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelGoldOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneGoldOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneGoldOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceGoldOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceGoldOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceGoldOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceGoldOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceGoldOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockGoldOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockGoldOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockGoldOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltGoldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltGoldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneGoldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperGoldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperGoldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleGoldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleGoldOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateGoldOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateGoldOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltGoldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissGoldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeGoldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleGoldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteGoldOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateGoldOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneGoldOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Gold Ores").push(PathHandler.getGeneralPath());
        disableGoldOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Vanilla (Stone) Gold Ore").push("stone_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableVanillaGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeVanillaGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkVanillaGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightVanillaGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightVanillaGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistVanillaGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistVanillaGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistVanillaGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistVanillaGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Gold Ore").push("andesite_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkAndesiteGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightAndesiteGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistAndesiteGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Gold Ore").push("diorite_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkDioriteGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightDioriteGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistDioriteGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Gold Ore").push("granite_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkGraniteGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightGraniteGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistGraniteGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Gold Ore").push("netherrack_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkNetherrackGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightNetherrackGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightNetherrackGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Gold Ore").push("end_stone_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkEndStoneGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEndStoneGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEndStoneGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Gold Ore").push("sand_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkSandGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Gold Ore").push("red_sand_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkRedSandGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Gold Ore").push("gravel_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkGravelGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightGravelGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Gold Ore").push("sandstone_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkSandstoneGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandstoneGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Gold Ore").push("red_sandstone_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Gold Ore").push("blue_ice_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkBlueIceGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightBlueIceGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Gold Ore").push("packed_ice_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkPackedIceGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightPackedIceGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Gold Ore").push("bedrock_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockGoldOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Gold Ore (Quark)").push("quark_basalt_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Gold Ore (Quark)").push("quark_limestone_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Gold Ore (Quark)").push("quark_jasper_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Gold Ore (Quark)").push("quark_marble_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Gold Ore (Quark)").push("quark_slate_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Gold Ore (Embellishcraft)").push("embellishcraft_basalt_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Gold Ore (Embellishcraft)").push("embellishcraft_gneiss_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Gold Ore (Embellishcraft)").push("embellishcraft_jade_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Gold Ore (Embellishcraft)").push("embellishcraft_larvikite_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Gold Ore (Embellishcraft)").push("embellishcraft_marble_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Gold Ore (Embellishcraft)").push("embellishcraft_slate_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Gold Ore").push("hardened_stone_gold_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneGoldOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Gold.spec, path + "/gold.toml");
    }
}
