package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Pyrite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePyriteOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStonePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightStonePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableSandPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightSandPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePyriteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPyriteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPyriteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePyriteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePyriteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePyriteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Pyrite Ores").push("general");
        disablePyriteOres = BUILDER.comment("If false, all pyrite ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Pyrite Ore").push("stone_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStonePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStonePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkStonePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightStonePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightStonePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistStonePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStonePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStonePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStonePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Pyrite Ore").push("andesite_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesitePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesitePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkAndesitePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightAndesitePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightAndesitePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistAndesitePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesitePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesitePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesitePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Pyrite Ore").push("diorite_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioritePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioritePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkDioritePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightDioritePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightDioritePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistDioritePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioritePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioritePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioritePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Pyrite Ore").push("granite_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGranitePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGranitePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkGranitePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGranitePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightGranitePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGranitePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGranitePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGranitePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGranitePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Pyrite Ore").push("netherrack_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkNetherrackPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightNetherrackPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightNetherrackPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Pyrite Ore").push("end_stone_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStonePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStonePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStonePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEndStonePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStonePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStonePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStonePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStonePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStonePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Pyrite Ore").push("sand_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightSandPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Pyrite Ore").push("red_sand_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightRedSandPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Pyrite Ore").push("gravel_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGravelPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightGravelPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Pyrite Ore").push("sandstone_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstonePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstonePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstonePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandstonePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightSandstonePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstonePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstonePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstonePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstonePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Pyrite Ore").push("red_sandstone_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstonePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstonePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstonePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandstonePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightRedSandstonePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstonePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstonePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstonePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstonePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Pyrite Ore").push("blue_ice_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIcePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIcePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIcePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightBlueIcePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightBlueIcePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIcePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIcePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIcePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIcePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Pyrite Ore").push("packed_ice_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIcePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIcePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIcePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightPackedIcePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightPackedIcePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIcePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIcePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIcePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIcePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Pyrite Ore").push("bedrock_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockPyriteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Pyrite Ore (Quark)").push("quark_basalt_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkBasaltPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkBasaltPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Pyrite Ore (Quark)").push("quark_limestone_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestonePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestonePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkLimestonePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkLimestonePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkLimestonePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkLimestonePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestonePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestonePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Pyrite Ore (Quark)").push("quark_jasper_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkJasperPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkJasperPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkJasperPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkJasperPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Pyrite Ore (Quark)").push("quark_marble_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarblePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarblePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkMarblePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkMarblePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkMarblePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkMarblePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarblePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarblePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Pyrite Ore (Quark)").push("quark_slate_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlatePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlatePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkSlatePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkSlatePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkSlatePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkSlatePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlatePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlatePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Pyrite Ore (Embellishcraft)").push("embellishcraft_basalt_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftBasaltPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftBasaltPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Pyrite Ore (Embellishcraft)").push("embellishcraft_gneiss_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissPyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissPyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftGneissPyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftGneissPyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissPyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissPyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissPyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Pyrite Ore (Embellishcraft)").push("embellishcraft_jade_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftJadePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftJadePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Pyrite Ore (Embellishcraft)").push("embellishcraft_larvikite_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikitePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikitePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftLarvikitePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftLarvikitePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikitePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikitePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Pyrite Ore (Embellishcraft)").push("embellishcraft_marble_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarblePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarblePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftMarblePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftMarblePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarblePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarblePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarblePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Pyrite Ore (Embellishcraft)").push("embellishcraft_slate_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlatePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlatePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftSlatePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftSlatePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlatePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlatePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlatePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Pyrite Ore").push("hardened_stone_pyrite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStonePyriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStonePyriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkHardenedStonePyriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightHardenedStonePyriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightHardenedStonePyriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistHardenedStonePyriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStonePyriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStonePyriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStonePyriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Pyrite.spec, Main.MOD_ID + "/pyrite.toml");
    }
}
