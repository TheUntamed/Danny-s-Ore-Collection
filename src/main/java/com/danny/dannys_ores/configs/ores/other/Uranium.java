package com.danny.dannys_ores.configs.ores.other;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Uranium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableUraniumOres;
    public static ForgeConfigSpec.BooleanValue disablePoisonEffectUraniumOres;
    public static ForgeConfigSpec.BooleanValue onlyWhileSelectedUraniumOres;
    public static ForgeConfigSpec.IntValue durationPoisonEffectUraniumOres;
    public static ForgeConfigSpec.IntValue effectLevelUraniumOres;

    public static ForgeConfigSpec.BooleanValue enableStoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableSandUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightSandUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceUraniumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockUraniumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockUraniumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateUraniumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteUraniumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateUraniumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneUraniumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneUraniumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneUraniumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneUraniumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneUraniumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneUraniumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Uranium Ores").push("general");
        disableUraniumOres = BUILDER.comment("If false, all uranium ore variants will be disabled.").define("disableAllVariants", false);
        disablePoisonEffectUraniumOres = BUILDER.comment("If true, uranium ores will not poison players while in thair inventory/hand.").define("disablePoisonEffect", false);
        onlyWhileSelectedUraniumOres = BUILDER.comment("If true, a player will only be poisoned while holding the ore in a hand. If false, it just has to be in the inventory.").define("onlyWhileSelected", false);
        durationPoisonEffectUraniumOres = BUILDER.comment("How long the effect will last (in ticks) after removing the ore from the inventory/hand. While in hand/inventory the timer will refresh.").defineInRange("duration", 25, 25, 1000000);
        effectLevelUraniumOres = BUILDER.comment("The strength of the effect.").defineInRange("effectLevel", 1, 1, 2);
        BUILDER.comment("Stone Uranium Ore").push("stone_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkStoneUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightStoneUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistStoneUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Uranium Ore").push("andesite_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkAndesiteUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightAndesiteUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistAndesiteUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Uranium Ore").push("diorite_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkDioriteUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightDioriteUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistDioriteUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Uranium Ore").push("granite_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkGraniteUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGraniteUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistGraniteUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Uranium Ore").push("netherrack_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkNetherrackUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightNetherrackUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightNetherrackUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Uranium Ore").push("end_stone_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEndStoneUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEndStoneUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEndStoneUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Uranium Ore").push("sand_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkSandUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Uranium Ore").push("red_sand_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkRedSandUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Uranium Ore").push("gravel_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkGravelUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGravelUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Uranium Ore").push("sandstone_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkSandstoneUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandstoneUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Uranium Ore").push("red_sandstone_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkRedSandstoneUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandstoneUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Uranium Ore").push("blue_ice_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkBlueIceUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightBlueIceUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Uranium Ore").push("packed_ice_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkPackedIceUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightPackedIceUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Uranium Ore").push("bedrock_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockUraniumOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Uranium Ore (Quark)").push("quark_basalt_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkQuarkBasaltUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkBasaltUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightQuarkBasaltUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Uranium Ore (Quark)").push("quark_limestone_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkLimestoneUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkLimestoneUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkLimestoneUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Uranium Ore (Quark)").push("quark_jasper_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkJasperUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkJasperUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkJasperUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Uranium Ore (Quark)").push("quark_marble_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkMarbleUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkMarbleUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkMarbleUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Uranium Ore (Quark)").push("quark_slate_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkSlateUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkSlateUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkSlateUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Uranium Ore (Embellishcraft)").push("embellishcraft_basalt_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftBasaltUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Uranium Ore (Embellishcraft)").push("embellishcraft_gneiss_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftGneissUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Uranium Ore (Embellishcraft)").push("embellishcraft_jade_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftJadeUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Uranium Ore (Embellishcraft)").push("embellishcraft_larvikite_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Uranium Ore (Embellishcraft)").push("embellishcraft_marble_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftMarbleUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Uranium Ore (Embellishcraft)").push("embellishcraft_slate_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftSlateUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Uranium Ore").push("hardened_stone_uranium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneUraniumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneUraniumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkHardenedStoneUraniumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightHardenedStoneUraniumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneUraniumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistHardenedStoneUraniumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneUraniumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneUraniumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneUraniumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Uranium.spec, Main.MOD_ID + "/uranium.toml");
    }
}
