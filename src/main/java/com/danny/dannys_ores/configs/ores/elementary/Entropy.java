package com.danny.dannys_ores.configs.ores.elementary;

import com.danny.dannys_ores.util.CommentHandler;
import com.danny.dannys_ores.util.PathHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Entropy {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableEntropyOres;
    public static ForgeConfigSpec.DoubleValue explosionChanceEntropyOres;
    public static ForgeConfigSpec.DoubleValue explosionRangeEntropyOres;
    public static ForgeConfigSpec.BooleanValue explosionBreaksBlocksEntropyOres;

    public static ForgeConfigSpec.BooleanValue enableStoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightStoneEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableSandEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeSandEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightSandEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightSandEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableGravelEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightGravelEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceEntropyOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockEntropyOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockEntropyOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateEntropyOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteEntropyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateEntropyOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneEntropyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneEntropyOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneEntropyOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneEntropyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneEntropyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneEntropyOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Entropy Ores").push(PathHandler.getGeneralPath());
        disableEntropyOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        explosionChanceEntropyOres = BUILDER.comment(CommentHandler.getExplosionChanceComment()).defineInRange(PathHandler.getExplosionChancePath(), 50.0D, 0.0D, 100.0D);
        explosionRangeEntropyOres = BUILDER.comment(CommentHandler.getExplosionRangeComment()).defineInRange(PathHandler.getExplosionRangePath(), 3.0D, 0.0D, 100.0D);
        explosionBreaksBlocksEntropyOres = BUILDER.comment(CommentHandler.getExplosionBreaksBlocksComment()).define(PathHandler.getExplosionBreaksBlocksPath(), true);
        BUILDER.comment("Stone Entropy Ore").push("stone_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkStoneEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightStoneEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistStoneEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Entropy Ore").push("andesite_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkAndesiteEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightAndesiteEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistAndesiteEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Entropy Ore").push("diorite_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkDioriteEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightDioriteEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistDioriteEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Entropy Ore").push("granite_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkGraniteEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightGraniteEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistGraniteEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Entropy Ore").push("netherrack_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightNetherrackEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistNetherrackEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Entropy Ore").push("end_stone_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStoneEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStoneEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Entropy Ore").push("sand_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Entropy Ore").push("red_sand_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Entropy Ore").push("gravel_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Entropy Ore").push("sandstone_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstoneEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstoneEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Entropy Ore").push("red_sandstone_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Entropy Ore").push("blue_ice_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIceEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIceEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Entropy Ore").push("packed_ice_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIceEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIceEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Entropy Ore").push("bedrock_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block and Item properties").push(PathHandler.getPropertiesPath());
        resistanceBedrockEntropyOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Entropy Ore (Quark)").push("quark_basalt_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Entropy Ore (Quark)").push("quark_limestone_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Entropy Ore (Quark)").push("quark_jasper_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Entropy Ore (Quark)").push("quark_marble_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Entropy Ore (Quark)").push("quark_slate_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Entropy Ore (Embellishcraft)").push("embellishcraft_basalt_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Entropy Ore (Embellishcraft)").push("embellishcraft_gneiss_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Entropy Ore (Embellishcraft)").push("embellishcraft_jade_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Entropy Ore (Embellishcraft)").push("embellishcraft_larvikite_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Entropy Ore (Embellishcraft)").push("embellishcraft_marble_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Entropy Ore (Embellishcraft)").push("embellishcraft_slate_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Entropy Ore").push("hardened_stone_entropy_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneEntropyOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Entropy.spec, path + "/entropy.toml");
    }
}
