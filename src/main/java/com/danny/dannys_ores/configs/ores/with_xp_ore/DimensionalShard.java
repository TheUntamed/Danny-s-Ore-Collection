package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DimensionalShard {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDimensionalShardOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDimensionalShardOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDimensionalShardOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDimensionalShardOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDimensionalShardOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDimensionalShardOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dimensional Shard Ores").push("general");
        disableDimensionalShardOres = BUILDER.comment("If false, all dimensional_shard ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Vanilla (Stone) Dimensional Shard Ore").push("stone_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeVanillaDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkVanillaDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightVanillaDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightVanillaDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistVanillaDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistVanillaDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistVanillaDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistVanillaDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dimensional Shard Ore").push("andesite_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkAndesiteDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightAndesiteDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistAndesiteDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dimensional Shard Ore").push("diorite_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkDioriteDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightDioriteDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistDioriteDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dimensional Shard Ore").push("granite_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkGraniteDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGraniteDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistGraniteDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dimensional Shard Ore").push("netherrack_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkNetherrackDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightNetherrackDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightNetherrackDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dimensional Shard Ore").push("end_stone_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEndStoneDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEndStoneDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEndStoneDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dimensional Shard Ore").push("sand_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dimensional Shard Ore").push("red_sand_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dimensional Shard Ore").push("gravel_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkGravelDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGravelDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dimensional Shard Ore").push("sandstone_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandstoneDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandstoneDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dimensional Shard Ore").push("red_sandstone_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandstoneDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandstoneDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dimensional Shard Ore").push("blue_ice_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkBlueIceDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightBlueIceDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dimensional Shard Ore").push("packed_ice_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkPackedIceDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightPackedIceDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dimensional Shard Ore").push("bedrock_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockDimensionalShardOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt DimensionalShard Ore (Quark)").push("quark_basalt_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkBasaltDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkBasaltDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightQuarkBasaltDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone DimensionalShard Ore (Quark)").push("quark_limestone_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkLimestoneDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkLimestoneDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkLimestoneDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper DimensionalShard Ore (Quark)").push("quark_jasper_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkJasperDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkJasperDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkJasperDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble DimensionalShard Ore (Quark)").push("quark_marble_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkMarbleDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkMarbleDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkMarbleDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate DimensionalShard Ore (Quark)").push("quark_slate_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkSlateDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkSlateDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistQuarkSlateDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt DimensionalShard Ore (Embellishcraft)").push("embellishcraft_basalt_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss DimensionalShard Ore (Embellishcraft)").push("embellishcraft_gneiss_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade DimensionalShard Ore (Embellishcraft)").push("embellishcraft_jade_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite DimensionalShard Ore (Embellishcraft)").push("embellishcraft_larvikite_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble DimensionalShard Ore (Embellishcraft)").push("embellishcraft_marble_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate DimensionalShard Ore (Embellishcraft)").push("embellishcraft_slate_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Dimensional Shard Ore").push("hardened_stone_dimensional_shard_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneDimensionalShardOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneDimensionalShardOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkHardenedStoneDimensionalShardOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightHardenedStoneDimensionalShardOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneDimensionalShardOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 40, 0, 256);
        isTempWhitelistHardenedStoneDimensionalShardOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneDimensionalShardOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDimensionalShardOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneDimensionalShardOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DimensionalShard.spec, Main.MOD_ID + "/dimensional_shard.toml");
    }
}
