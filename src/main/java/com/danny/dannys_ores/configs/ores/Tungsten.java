package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Tungsten {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableTungstenOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightStoneTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableSandTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeSandTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightSandTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightSandTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableGravelTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightGravelTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceTungstenOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockTungstenOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockTungstenOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateTungstenOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteTungstenOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateTungstenOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneTungstenOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneTungstenOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneTungstenOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneTungstenOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneTungstenOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneTungstenOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Tungsten Ores").push("general");
        disableTungstenOres = BUILDER.comment("If false, all tungsten ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Tungsten Ore").push("stone_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkStoneTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightStoneTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightStoneTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistStoneTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Tungsten Ore").push("andesite_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkAndesiteTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightAndesiteTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightAndesiteTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistAndesiteTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Tungsten Ore").push("diorite_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkDioriteTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightDioriteTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightDioriteTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistDioriteTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Tungsten Ore").push("granite_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkGraniteTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGraniteTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightGraniteTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGraniteTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Tungsten Ore").push("netherrack_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkNetherrackTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightNetherrackTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightNetherrackTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Tungsten Ore").push("end_stone_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStoneTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEndStoneTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEndStoneTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Tungsten Ore").push("sand_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightSandTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Tungsten Ore").push("red_sand_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightRedSandTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Tungsten Ore").push("gravel_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGravelTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightGravelTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Tungsten Ore").push("sandstone_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstoneTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandstoneTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightSandstoneTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Tungsten Ore").push("red_sandstone_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstoneTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandstoneTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightRedSandstoneTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Tungsten Ore").push("blue_ice_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIceTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightBlueIceTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightBlueIceTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Tungsten Ore").push("packed_ice_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIceTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightPackedIceTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightPackedIceTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Tungsten Ore").push("bedrock_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockTungstenOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Tungsten Ore (Quark)").push("quark_basalt_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkBasaltTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkBasaltTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Tungsten Ore (Quark)").push("quark_limestone_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkLimestoneTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkLimestoneTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkLimestoneTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Tungsten Ore (Quark)").push("quark_jasper_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkJasperTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkJasperTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkJasperTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkJasperTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Tungsten Ore (Quark)").push("quark_marble_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkMarbleTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkMarbleTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkMarbleTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkMarbleTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Tungsten Ore (Quark)").push("quark_slate_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkSlateTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkSlateTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightQuarkSlateTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkSlateTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Tungsten Ore (Embellishcraft)").push("embellishcraft_basalt_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftBasaltTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftBasaltTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Tungsten Ore (Embellishcraft)").push("embellishcraft_gneiss_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftGneissTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftGneissTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Tungsten Ore (Embellishcraft)").push("embellishcraft_jade_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftJadeTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftJadeTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Tungsten Ore (Embellishcraft)").push("embellishcraft_larvikite_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Tungsten Ore (Embellishcraft)").push("embellishcraft_marble_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftMarbleTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftMarbleTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Tungsten Ore (Embellishcraft)").push("embellishcraft_slate_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftSlateTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightEmbellishcraftSlateTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Tungsten Ore").push("hardened_stone_tungsten_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneTungstenOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneTungstenOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkHardenedStoneTungstenOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightHardenedStoneTungstenOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 16, 0, 256);
        maxHeightHardenedStoneTungstenOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistHardenedStoneTungstenOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneTungstenOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneTungstenOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneTungstenOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Tungsten.spec, Main.MOD_ID + "/tungsten.toml");
    }
}
