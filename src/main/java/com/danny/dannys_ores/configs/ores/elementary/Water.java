package com.danny.dannys_ores.configs.ores.elementary;

import com.danny.dannys_ores.util.CommentHandler;
import com.danny.dannys_ores.util.PathHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Water {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableWaterOres;
    public static ForgeConfigSpec.BooleanValue disableEffectWaterOres;
    public static ForgeConfigSpec.BooleanValue onlyWhileSelectedWaterOres;

    public static ForgeConfigSpec.BooleanValue enableStoneWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneWaterOre;
    public static ForgeConfigSpec.IntValue minHeightStoneWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneWaterOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteWaterOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteWaterOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteWaterOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteWaterOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteWaterOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteWaterOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackWaterOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackWaterOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneWaterOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneWaterOre;

    public static ForgeConfigSpec.BooleanValue enableSandWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeSandWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandWaterOre;
    public static ForgeConfigSpec.IntValue minHeightSandWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightSandWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandWaterOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandWaterOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandWaterOre;

    public static ForgeConfigSpec.BooleanValue enableGravelWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelWaterOre;
    public static ForgeConfigSpec.IntValue minHeightGravelWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelWaterOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneWaterOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneWaterOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceWaterOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceWaterOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceWaterOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceWaterOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceWaterOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockWaterOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockWaterOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockWaterOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltWaterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltWaterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneWaterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperWaterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperWaterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleWaterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleWaterOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateWaterOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateWaterOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltWaterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissWaterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeWaterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleWaterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteWaterOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateWaterOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneWaterOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneWaterOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneWaterOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneWaterOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneWaterOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneWaterOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneWaterOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Water Ores").push(PathHandler.getGeneralPath());
        disableWaterOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        disableEffectWaterOres = BUILDER.comment("If true, water ores will not reduce the air volume of players while in their inventory/hand.").define("disableDrownEffect", false);
        onlyWhileSelectedWaterOres = BUILDER.comment("If true, the air volume of a player will only be reduced while holding the ore in a hand. If false, it just has to be in the inventory.").define(PathHandler.getSelectedPath(), false);
        BUILDER.comment("Stone Water Ore").push("stone_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkStoneWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightStoneWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistStoneWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Water Ore").push("andesite_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkAndesiteWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightAndesiteWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistAndesiteWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Water Ore").push("diorite_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkDioriteWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightDioriteWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistDioriteWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Water Ore").push("granite_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkGraniteWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightGraniteWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistGraniteWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Water Ore").push("netherrack_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightNetherrackWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistNetherrackWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Water Ore").push("end_stone_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStoneWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStoneWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Water Ore").push("sand_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Water Ore").push("red_sand_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Water Ore").push("gravel_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Water Ore").push("sandstone_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstoneWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstoneWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Water Ore").push("red_sandstone_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Water Ore").push("blue_ice_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIceWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIceWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Water Ore").push("packed_ice_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIceWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIceWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Water Ore").push("bedrock_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBedrockWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block and Item properties").push(PathHandler.getPropertiesPath());
        resistanceBedrockWaterOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Water Ore (Quark)").push("quark_basalt_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Water Ore (Quark)").push("quark_limestone_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Water Ore (Quark)").push("quark_jasper_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Water Ore (Quark)").push("quark_marble_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Water Ore (Quark)").push("quark_slate_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Water Ore (Embellishcraft)").push("embellishcraft_basalt_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Water Ore (Embellishcraft)").push("embellishcraft_gneiss_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Water Ore (Embellishcraft)").push("embellishcraft_jade_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Water Ore (Embellishcraft)").push("embellishcraft_larvikite_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Water Ore (Embellishcraft)").push("embellishcraft_marble_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Water Ore (Embellishcraft)").push("embellishcraft_slate_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Water Ore").push("hardened_stone_water_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 5, 0, 65536);
        minHeightHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneWaterOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Water.spec, path + "/water.toml");
    }
}
