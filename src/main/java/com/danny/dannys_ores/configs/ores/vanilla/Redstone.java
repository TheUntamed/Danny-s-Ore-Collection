package com.danny.dannys_ores.configs.ores.vanilla;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Redstone {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableRedstoneOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightGravelRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockRedstoneOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockRedstoneOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateRedstoneOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteRedstoneOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateRedstoneOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneRedstoneOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneRedstoneOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Redstone Ores").push(PathHandler.getGeneralPath());
        disableRedstoneOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Vanilla (Stone) Redstone Ore").push("stone_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableVanillaRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeVanillaRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkVanillaRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightVanillaRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightVanillaRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistVanillaRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistVanillaRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistVanillaRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistVanillaRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Redstone Ore").push("andesite_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Redstone Ore").push("diorite_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkDioriteRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightDioriteRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistDioriteRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Redstone Ore").push("granite_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGraniteRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGraniteRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistGraniteRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Redstone Ore").push("netherrack_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Redstone Ore").push("end_stone_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Redstone Ore").push("sand_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkSandRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Redstone Ore").push("red_sand_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkRedSandRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Redstone Ore").push("gravel_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGravelRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGravelRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Redstone Ore").push("sandstone_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Redstone Ore").push("red_sandstone_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Redstone Ore").push("blue_ice_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Redstone Ore").push("packed_ice_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkPackedIceRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightPackedIceRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Redstone Ore").push("bedrock_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockRedstoneOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Redstone Ore (Quark)").push("quark_basalt_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Redstone Ore (Quark)").push("quark_limestone_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Redstone Ore (Quark)").push("quark_jasper_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Redstone Ore (Quark)").push("quark_marble_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Redstone Ore (Quark)").push("quark_slate_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Redstone Ore (Embellishcraft)").push("embellishcraft_basalt_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Redstone Ore (Embellishcraft)").push("embellishcraft_gneiss_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Redstone Ore (Embellishcraft)").push("embellishcraft_jade_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Redstone Ore (Embellishcraft)").push("embellishcraft_larvikite_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Redstone Ore (Embellishcraft)").push("embellishcraft_marble_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Redstone Ore (Embellishcraft)").push("embellishcraft_slate_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Redstone Ore").push("hardened_stone_redstone_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneRedstoneOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Redstone.spec, path + "/redstone.toml");
    }
}
