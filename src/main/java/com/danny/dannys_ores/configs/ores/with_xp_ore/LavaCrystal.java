package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class LavaCrystal {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableLavaCrystalOres;

    public static ForgeConfigSpec.BooleanValue enableStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableGravelLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightGravelLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockLavaCrystalOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockLavaCrystalOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateLavaCrystalOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteLavaCrystalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateLavaCrystalOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneLavaCrystalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneLavaCrystalOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Lava Crystal Ores").push(PathHandler.getGeneralPath());
        disableLavaCrystalOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Lava Crystal Ore").push("stone_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Lava Crystal Ore").push("andesite_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Lava Crystal Ore").push("diorite_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Lava Crystal Ore").push("granite_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Lava Crystal Ore").push("netherrack_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 6, 0, 65536);
        minHeightNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Lava Crystal Ore").push("end_stone_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Lava Crystal Ore").push("sand_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Lava Crystal Ore").push("red_sand_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Lava Crystal Ore").push("gravel_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Lava Crystal Ore").push("sandstone_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Lava Crystal Ore").push("red_sandstone_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Lava Crystal Ore").push("blue_ice_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Lava Crystal Ore").push("packed_ice_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Lava Crystal Ore").push("bedrock_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockLavaCrystalOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt LavaCrystal Ore (Quark)").push("quark_basalt_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 6, 0, 65536);
        minHeightQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone LavaCrystal Ore (Quark)").push("quark_limestone_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper LavaCrystal Ore (Quark)").push("quark_jasper_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble LavaCrystal Ore (Quark)").push("quark_marble_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate LavaCrystal Ore (Quark)").push("quark_slate_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt LavaCrystal Ore (Embellishcraft)").push("embellishcraft_basalt_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss LavaCrystal Ore (Embellishcraft)").push("embellishcraft_gneiss_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade LavaCrystal Ore (Embellishcraft)").push("embellishcraft_jade_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite LavaCrystal Ore (Embellishcraft)").push("embellishcraft_larvikite_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble LavaCrystal Ore (Embellishcraft)").push("embellishcraft_marble_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate LavaCrystal Ore (Embellishcraft)").push("embellishcraft_slate_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Lava Crystal Ore").push("hardened_stone_lava_crystal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 24, 0, 256);
        isTempWhitelistHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneLavaCrystalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, LavaCrystal.spec, path + "/lava_crystal.toml");
    }
}
