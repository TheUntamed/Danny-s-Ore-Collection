package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Amethyst {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableAmethystOres;

    public static ForgeConfigSpec.BooleanValue enableStoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightStoneAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableSandAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeSandAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightSandAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightSandAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableGravelAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightGravelAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceAmethystOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockAmethystOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockAmethystOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateAmethystOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteAmethystOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateAmethystOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneAmethystOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneAmethystOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneAmethystOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneAmethystOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneAmethystOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneAmethystOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Amethyst Ores").push(PathHandler.getGeneralPath());
        disableAmethystOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Amethyst Ore").push("stone_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkStoneAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightStoneAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistStoneAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Amethyst Ore").push("andesite_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkAndesiteAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightAndesiteAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistAndesiteAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Amethyst Ore").push("diorite_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkDioriteAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightDioriteAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistDioriteAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Amethyst Ore").push("granite_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGraniteAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightGraniteAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistGraniteAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Amethyst Ore").push("netherrack_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkNetherrackAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightNetherrackAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightNetherrackAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Amethyst Ore").push("end_stone_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEndStoneAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEndStoneAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStoneAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Amethyst Ore").push("sand_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkSandAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightSandAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Amethyst Ore").push("red_sand_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkRedSandAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightRedSandAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Amethyst Ore").push("gravel_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGravelAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightGravelAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Amethyst Ore").push("sandstone_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkSandstoneAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightSandstoneAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Amethyst Ore").push("red_sandstone_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Amethyst Ore").push("blue_ice_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkBlueIceAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBlueIceAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceAmethystOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Amethyst Ore").push("packed_ice_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkPackedIceAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightPackedIceAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceAmethystOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Amethyst Ore").push("bedrock_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockAmethystOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockAmethystOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Amethyst Ore (Quark)").push("quark_basalt_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Amethyst Ore (Quark)").push("quark_limestone_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Amethyst Ore (Quark)").push("quark_jasper_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Amethyst Ore (Quark)").push("quark_marble_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Amethyst Ore (Quark)").push("quark_slate_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Amethyst Ore (Embellishcraft)").push("embellishcraft_basalt_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Amethyst Ore (Embellishcraft)").push("embellishcraft_gneiss_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Amethyst Ore (Embellishcraft)").push("embellishcraft_jade_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Amethyst Ore (Embellishcraft)").push("embellishcraft_larvikite_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Amethyst Ore (Embellishcraft)").push("embellishcraft_marble_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Amethyst Ore (Embellishcraft)").push("embellishcraft_slate_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateAmethystOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Amethyst Ore").push("hardened_stone_amethyst_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneAmethystOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneAmethystOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Amethyst.spec, path + "/amethyst.toml");
    }
}
