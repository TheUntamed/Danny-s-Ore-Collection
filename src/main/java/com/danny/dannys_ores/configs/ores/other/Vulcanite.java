package com.danny.dannys_ores.configs.ores.other;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Vulcanite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableVulcaniteOres;
    public static ForgeConfigSpec.BooleanValue disableBurnEffectVulcaniteOres;
    public static ForgeConfigSpec.BooleanValue onlyWhileSelectedVulcaniteOres;
    public static ForgeConfigSpec.IntValue durationBurnEffectVulcaniteOres;

    public static ForgeConfigSpec.BooleanValue enableStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockVulcaniteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockVulcaniteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateVulcaniteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteVulcaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateVulcaniteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneVulcaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneVulcaniteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Vulcanite Ores").push("general");
        disableVulcaniteOres = BUILDER.comment("If false, all vulcanite ore variants will be disabled.").define("disableAllVariants", false);
        disableBurnEffectVulcaniteOres = BUILDER.comment("If true, vulcanite ores will not set players on fire while in their inventory/hand.").define("disableBurnEffect", false);
        onlyWhileSelectedVulcaniteOres = BUILDER.comment("If true, a player will only be set on fire while holding the ore in a hand. If false, it just has to be in the inventory.").define("onlyWhileSelected", false);
        durationBurnEffectVulcaniteOres = BUILDER.comment("How long the effect will last (in seconds) after removing the ore from the inventory/hand. While in hand/inventory the timer will refresh.").defineInRange("duration", 1, 1, 1000000);
        BUILDER.comment("Stone Vulcanite Ore").push("stone_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkStoneVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightStoneVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistStoneVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Vulcanite Ore").push("andesite_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkAndesiteVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightAndesiteVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistAndesiteVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Vulcanite Ore").push("diorite_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkDioriteVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightDioriteVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistDioriteVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Vulcanite Ore").push("granite_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGraniteVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightGraniteVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistGraniteVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Vulcanite Ore").push("netherrack_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkNetherrackVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightNetherrackVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightNetherrackVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistNetherrackVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Vulcanite Ore").push("end_stone_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEndStoneVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEndStoneVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Vulcanite Ore").push("sand_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkSandVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Vulcanite Ore").push("red_sand_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkRedSandVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Vulcanite Ore").push("gravel_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkGravelVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGravelVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Vulcanite Ore").push("sandstone_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkSandstoneVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandstoneVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Vulcanite Ore").push("red_sandstone_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkRedSandstoneVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandstoneVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Vulcanite Ore").push("blue_ice_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkBlueIceVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightBlueIceVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Vulcanite Ore").push("packed_ice_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkPackedIceVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightPackedIceVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Vulcanite Ore").push("bedrock_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block and Item properties").push("properties");
        resistanceBedrockVulcaniteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Vulcanite Ore (Quark)").push("quark_basalt_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkBasaltVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkBasaltVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkBasaltVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistQuarkBasaltVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Vulcanite Ore (Quark)").push("quark_limestone_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkLimestoneVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkLimestoneVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkLimestoneVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Vulcanite Ore (Quark)").push("quark_jasper_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkJasperVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkJasperVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkJasperVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Vulcanite Ore (Quark)").push("quark_marble_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkMarbleVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkMarbleVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkMarbleVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Vulcanite Ore (Quark)").push("quark_slate_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkSlateVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightQuarkSlateVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkSlateVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Vulcanite Ore (Embellishcraft)").push("embellishcraft_basalt_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Vulcanite Ore (Embellishcraft)").push("embellishcraft_gneiss_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftGneissVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Vulcanite Ore (Embellishcraft)").push("embellishcraft_jade_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftJadeVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Vulcanite Ore (Embellishcraft)").push("embellishcraft_larvikite_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Vulcanite Ore (Embellishcraft)").push("embellishcraft_marble_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Vulcanite Ore (Embellishcraft)").push("embellishcraft_slate_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightEmbellishcraftSlateVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Vulcanite Ore").push("hardened_stone_vulcanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneVulcaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneVulcaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkHardenedStoneVulcaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 5, 0, 65536);
        minHeightHardenedStoneVulcaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneVulcaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistHardenedStoneVulcaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneVulcaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneVulcaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneVulcaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Vulcanite.spec, Main.MOD_ID + "/vulcanite.toml");
    }
}
