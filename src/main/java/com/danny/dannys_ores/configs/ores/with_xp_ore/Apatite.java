package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Apatite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableApatiteOres;

    public static ForgeConfigSpec.BooleanValue enableStoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceApatiteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockApatiteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockApatiteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateApatiteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteApatiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateApatiteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneApatiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneApatiteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneApatiteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneApatiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneApatiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneApatiteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Apatite Ores").push("general");
        disableApatiteOres = BUILDER.comment("If false, all apatite ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Apatite Ore").push("stone_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkStoneApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightStoneApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightStoneApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistStoneApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Apatite Ore").push("andesite_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkAndesiteApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightAndesiteApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightAndesiteApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistAndesiteApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Apatite Ore").push("diorite_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkDioriteApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightDioriteApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightDioriteApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistDioriteApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Apatite Ore").push("granite_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkGraniteApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightGraniteApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightGraniteApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGraniteApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Apatite Ore").push("netherrack_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkNetherrackApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightNetherrackApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistNetherrackApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Apatite Ore").push("end_stone_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEndStoneApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightEndStoneApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEndStoneApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Apatite Ore").push("sand_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkSandApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightSandApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightSandApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Apatite Ore").push("red_sand_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkRedSandApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightRedSandApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightRedSandApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Apatite Ore").push("gravel_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkGravelApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightGravelApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightGravelApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Apatite Ore").push("sandstone_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkSandstoneApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightSandstoneApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightSandstoneApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Apatite Ore").push("red_sandstone_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkRedSandstoneApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightRedSandstoneApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightRedSandstoneApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Apatite Ore").push("blue_ice_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkBlueIceApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightBlueIceApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightBlueIceApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Apatite Ore").push("packed_ice_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkPackedIceApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 10, 0, 65536);
        minHeightPackedIceApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightPackedIceApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Apatite Ore").push("bedrock_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightBedrockApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockApatiteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Apatite Ore (Quark)").push("quark_basalt_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkQuarkBasaltApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightQuarkBasaltApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkBasaltApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Apatite Ore (Quark)").push("quark_limestone_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkQuarkLimestoneApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightQuarkLimestoneApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightQuarkLimestoneApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkLimestoneApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Apatite Ore (Quark)").push("quark_jasper_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkQuarkJasperApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightQuarkJasperApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightQuarkJasperApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkJasperApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Apatite Ore (Quark)").push("quark_marble_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkQuarkMarbleApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightQuarkMarbleApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightQuarkMarbleApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkMarbleApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Apatite Ore (Quark)").push("quark_slate_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkQuarkSlateApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightQuarkSlateApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightQuarkSlateApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkSlateApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Apatite Ore (Embellishcraft)").push("embellishcraft_basalt_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightEmbellishcraftBasaltApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightEmbellishcraftBasaltApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Apatite Ore (Embellishcraft)").push("embellishcraft_gneiss_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkEmbellishcraftGneissApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightEmbellishcraftGneissApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightEmbellishcraftGneissApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Apatite Ore (Embellishcraft)").push("embellishcraft_jade_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkEmbellishcraftJadeApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightEmbellishcraftJadeApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightEmbellishcraftJadeApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Apatite Ore (Embellishcraft)").push("embellishcraft_larvikite_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Apatite Ore (Embellishcraft)").push("embellishcraft_marble_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightEmbellishcraftMarbleApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightEmbellishcraftMarbleApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Apatite Ore (Embellishcraft)").push("embellishcraft_slate_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkEmbellishcraftSlateApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightEmbellishcraftSlateApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightEmbellishcraftSlateApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Apatite Ore").push("hardened_stone_apatite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneApatiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneApatiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 17, 0, 65536);
        veinsPerChunkHardenedStoneApatiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightHardenedStoneApatiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 48, 0, 256);
        maxHeightHardenedStoneApatiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistHardenedStoneApatiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneApatiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneApatiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneApatiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Apatite.spec, Main.MOD_ID + "/apatite.toml");
    }
}
