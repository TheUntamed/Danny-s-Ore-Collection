package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Sticky {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableStickyOres;

    public static ForgeConfigSpec.BooleanValue enableStoneStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneStickyOre;
    public static ForgeConfigSpec.IntValue minHeightStoneStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneStickyOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteStickyOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteStickyOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteStickyOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteStickyOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteStickyOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteStickyOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackStickyOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackStickyOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneStickyOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneStickyOre;

    public static ForgeConfigSpec.BooleanValue enableSandStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeSandStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandStickyOre;
    public static ForgeConfigSpec.IntValue minHeightSandStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightSandStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandStickyOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandStickyOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandStickyOre;

    public static ForgeConfigSpec.BooleanValue enableGravelStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelStickyOre;
    public static ForgeConfigSpec.IntValue minHeightGravelStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelStickyOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneStickyOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneStickyOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceStickyOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceStickyOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceStickyOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceStickyOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceStickyOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockStickyOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockStickyOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockStickyOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltStickyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltStickyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneStickyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperStickyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperStickyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleStickyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleStickyOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateStickyOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateStickyOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltStickyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissStickyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeStickyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleStickyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteStickyOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateStickyOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneStickyOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneStickyOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneStickyOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneStickyOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneStickyOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneStickyOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneStickyOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Sticky Ores").push("general");
        disableStickyOres = BUILDER.comment("If false, all sticky ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Sticky Ore").push("stone_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkStoneStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightStoneStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightStoneStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistStoneStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Sticky Ore").push("andesite_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkAndesiteStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightAndesiteStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightAndesiteStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistAndesiteStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Sticky Ore").push("diorite_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkDioriteStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightDioriteStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightDioriteStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistDioriteStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Sticky Ore").push("granite_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGraniteStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightGraniteStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightGraniteStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGraniteStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Sticky Ore").push("netherrack_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkNetherrackStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightNetherrackStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Sticky Ore").push("end_stone_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEndStoneStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEndStoneStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEndStoneStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEndStoneStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Sticky Ore").push("sand_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightSandStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightSandStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Sticky Ore").push("red_sand_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightRedSandStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightRedSandStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Sticky Ore").push("gravel_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGravelStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightGravelStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightGravelStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Sticky Ore").push("sandstone_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandstoneStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightSandstoneStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightSandstoneStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Sticky Ore").push("red_sandstone_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandstoneStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightRedSandstoneStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightRedSandstoneStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Sticky Ore").push("blue_ice_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBlueIceStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightBlueIceStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightBlueIceStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Sticky Ore").push("packed_ice_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkPackedIceStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightPackedIceStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightPackedIceStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Sticky Ore").push("bedrock_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightBedrockStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockStickyOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Sticky Ore (Quark)").push("quark_basalt_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkBasaltStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkBasaltStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkBasaltStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Sticky Ore (Quark)").push("quark_limestone_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkLimestoneStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkLimestoneStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightQuarkLimestoneStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkLimestoneStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Sticky Ore (Quark)").push("quark_jasper_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkJasperStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkJasperStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightQuarkJasperStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkJasperStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Sticky Ore (Quark)").push("quark_marble_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkMarbleStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkMarbleStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightQuarkMarbleStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkMarbleStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Sticky Ore (Quark)").push("quark_slate_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkSlateStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkSlateStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightQuarkSlateStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkSlateStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Sticky Ore (Embellishcraft)").push("embellishcraft_basalt_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftBasaltStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEmbellishcraftBasaltStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Sticky Ore (Embellishcraft)").push("embellishcraft_gneiss_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftGneissStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEmbellishcraftGneissStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Sticky Ore (Embellishcraft)").push("embellishcraft_jade_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftJadeStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEmbellishcraftJadeStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Sticky Ore (Embellishcraft)").push("embellishcraft_larvikite_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftLarvikiteStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEmbellishcraftLarvikiteStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Sticky Ore (Embellishcraft)").push("embellishcraft_marble_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftMarbleStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEmbellishcraftMarbleStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Sticky Ore (Embellishcraft)").push("embellishcraft_slate_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftSlateStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEmbellishcraftSlateStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Sticky Ore").push("hardened_stone_sticky_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneStickyOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneStickyOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkHardenedStoneStickyOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightHardenedStoneStickyOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightHardenedStoneStickyOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistHardenedStoneStickyOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneStickyOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneStickyOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneStickyOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Sticky.spec, Main.MOD_ID + "/sticky.toml");
    }
}
