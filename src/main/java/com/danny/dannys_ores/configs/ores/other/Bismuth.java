package com.danny.dannys_ores.configs.ores.other;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Bismuth {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableBismuthOres;

    public static ForgeConfigSpec.BooleanValue enableStoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightStoneBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableSandBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeSandBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightSandBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightSandBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableGravelBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightGravelBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceBismuthOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockBismuthOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockBismuthOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateBismuthOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteBismuthOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateBismuthOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneBismuthOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneBismuthOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneBismuthOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneBismuthOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneBismuthOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneBismuthOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Bismuth Ores").push(PathHandler.getGeneralPath());
        disableBismuthOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Bismuth Ore").push("stone_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkStoneBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightStoneBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistStoneBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Bismuth Ore").push("andesite_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkAndesiteBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightAndesiteBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistAndesiteBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Bismuth Ore").push("diorite_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkDioriteBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightDioriteBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistDioriteBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Bismuth Ore").push("granite_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkGraniteBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGraniteBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistGraniteBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Bismuth Ore").push("netherrack_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightNetherrackBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistNetherrackBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Bismuth Ore").push("end_stone_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEndStoneBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEndStoneBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightEndStoneBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Bismuth Ore").push("sand_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Bismuth Ore").push("red_sand_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Bismuth Ore").push("gravel_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkGravelBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGravelBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Bismuth Ore").push("sandstone_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandstoneBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandstoneBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Bismuth Ore").push("red_sandstone_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Bismuth Ore").push("blue_ice_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkBlueIceBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBlueIceBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Bismuth Ore").push("packed_ice_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkPackedIceBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightPackedIceBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Bismuth Ore").push("bedrock_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockBismuthOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Bismuth Ore (Quark)").push("quark_basalt_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Bismuth Ore (Quark)").push("quark_limestone_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Bismuth Ore (Quark)").push("quark_jasper_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Bismuth Ore (Quark)").push("quark_marble_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Bismuth Ore (Quark)").push("quark_slate_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Bismuth Ore (Embellishcraft)").push("embellishcraft_basalt_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Bismuth Ore (Embellishcraft)").push("embellishcraft_gneiss_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Bismuth Ore (Embellishcraft)").push("embellishcraft_jade_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Bismuth Ore (Embellishcraft)").push("embellishcraft_larvikite_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Bismuth Ore (Embellishcraft)").push("embellishcraft_marble_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Bismuth Ore (Embellishcraft)").push("embellishcraft_slate_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Bismuth Ore").push("hardened_stone_bismuth_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneBismuthOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Bismuth.spec, path + "/bismuth.toml");
    }
}
