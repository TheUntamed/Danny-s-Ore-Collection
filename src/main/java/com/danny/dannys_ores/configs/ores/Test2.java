package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.util.CommentHandler;
import com.danny.dannys_ores.util.OreTypes;
import com.danny.dannys_ores.util.PathHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Test2 {
    public static ForgeConfigSpec spec;

    private static void create(String path, OreTypes type) {

        ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
        //ForgeConfigSpec spec;
        ForgeConfigSpec.BooleanValue disableAllVariants;

        ForgeConfigSpec.BooleanValue enableStoneVariant;
        ForgeConfigSpec.IntValue veinSizeStoneVariant;
        ForgeConfigSpec.IntValue veinsPerChunkStoneVariant;
        ForgeConfigSpec.IntValue minHeightStoneVariant;
        ForgeConfigSpec.IntValue maxHeightStoneVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistStoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneVariant;

        ForgeConfigSpec.BooleanValue enableAndesiteVariant;
        ForgeConfigSpec.IntValue veinSizeAndesiteVariant;
        ForgeConfigSpec.IntValue veinsPerChunkAndesiteVariant;
        ForgeConfigSpec.IntValue minHeightAndesiteVariant;
        ForgeConfigSpec.IntValue maxHeightAndesiteVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteVariant;

        ForgeConfigSpec.BooleanValue enableDioriteVariant;
        ForgeConfigSpec.IntValue veinSizeDioriteVariant;
        ForgeConfigSpec.IntValue veinsPerChunkDioriteVariant;
        ForgeConfigSpec.IntValue minHeightDioriteVariant;
        ForgeConfigSpec.IntValue maxHeightDioriteVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistDioriteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteVariant;

        ForgeConfigSpec.BooleanValue enableGraniteVariant;
        ForgeConfigSpec.IntValue veinSizeGraniteVariant;
        ForgeConfigSpec.IntValue veinsPerChunkGraniteVariant;
        ForgeConfigSpec.IntValue minHeightGraniteVariant;
        ForgeConfigSpec.IntValue maxHeightGraniteVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistGraniteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteVariant;

        ForgeConfigSpec.BooleanValue enableNetherrackVariant;
        ForgeConfigSpec.IntValue veinSizeNetherrackVariant;
        ForgeConfigSpec.IntValue veinsPerChunkNetherrackVariant;
        ForgeConfigSpec.IntValue minHeightNetherrackVariant;
        ForgeConfigSpec.IntValue maxHeightNetherrackVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackVariant;

        ForgeConfigSpec.BooleanValue enableEndStoneVariant;
        ForgeConfigSpec.IntValue veinSizeEndStoneVariant;
        ForgeConfigSpec.IntValue veinsPerChunkEndStoneVariant;
        ForgeConfigSpec.IntValue minHeightEndStoneVariant;
        ForgeConfigSpec.IntValue maxHeightEndStoneVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneVariant;

        ForgeConfigSpec.BooleanValue enableSandVariant;
        ForgeConfigSpec.IntValue veinSizeSandVariant;
        ForgeConfigSpec.IntValue veinsPerChunkSandVariant;
        ForgeConfigSpec.IntValue minHeightSandVariant;
        ForgeConfigSpec.IntValue maxHeightSandVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistSandVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistSandVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandVariant;

        ForgeConfigSpec.BooleanValue enableRedSandVariant;
        ForgeConfigSpec.IntValue veinSizeRedSandVariant;
        ForgeConfigSpec.IntValue veinsPerChunkRedSandVariant;
        ForgeConfigSpec.IntValue minHeightRedSandVariant;
        ForgeConfigSpec.IntValue maxHeightRedSandVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistRedSandVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandVariant;

        ForgeConfigSpec.BooleanValue enableGravelVariant;
        ForgeConfigSpec.IntValue veinSizeGravelVariant;
        ForgeConfigSpec.IntValue veinsPerChunkGravelVariant;
        ForgeConfigSpec.IntValue minHeightGravelVariant;
        ForgeConfigSpec.IntValue maxHeightGravelVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistGravelVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelVariant;

        ForgeConfigSpec.BooleanValue enableSandstoneVariant;
        ForgeConfigSpec.IntValue veinSizeSandstoneVariant;
        ForgeConfigSpec.IntValue veinsPerChunkSandstoneVariant;
        ForgeConfigSpec.IntValue minHeightSandstoneVariant;
        ForgeConfigSpec.IntValue maxHeightSandstoneVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneVariant;

        ForgeConfigSpec.BooleanValue enableRedSandstoneVariant;
        ForgeConfigSpec.IntValue veinSizeRedSandstoneVariant;
        ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneVariant;
        ForgeConfigSpec.IntValue minHeightRedSandstoneVariant;
        ForgeConfigSpec.IntValue maxHeightRedSandstoneVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneVariant;

        ForgeConfigSpec.BooleanValue enableBlueIceVariant;
        ForgeConfigSpec.IntValue veinSizeBlueIceVariant;
        ForgeConfigSpec.IntValue veinsPerChunkBlueIceVariant;
        ForgeConfigSpec.IntValue minHeightBlueIceVariant;
        ForgeConfigSpec.IntValue maxHeightBlueIceVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceVariant;

        ForgeConfigSpec.BooleanValue enablePackedIceVariant;
        ForgeConfigSpec.IntValue veinSizePackedIceVariant;
        ForgeConfigSpec.IntValue veinsPerChunkPackedIceVariant;
        ForgeConfigSpec.IntValue minHeightPackedIceVariant;
        ForgeConfigSpec.IntValue maxHeightPackedIceVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceVariant;

        ForgeConfigSpec.BooleanValue enableBedrockVariant;
        ForgeConfigSpec.IntValue veinSizeBedrockVariant;
        ForgeConfigSpec.IntValue veinsPerChunkBedrockVariant;
        ForgeConfigSpec.IntValue minHeightBedrockVariant;
        ForgeConfigSpec.IntValue maxHeightBedrockVariant;
        ForgeConfigSpec.DoubleValue resistanceBedrockVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistBedrockVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockVariant;

        // Quark
        ForgeConfigSpec.BooleanValue enableQuarkBasaltVariant;
        ForgeConfigSpec.IntValue veinSizeQuarkBasaltVariant;
        ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltVariant;
        ForgeConfigSpec.IntValue minHeightQuarkBasaltVariant;
        ForgeConfigSpec.IntValue maxHeightQuarkBasaltVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltVariant;

        ForgeConfigSpec.BooleanValue enableQuarkLimestoneVariant;
        ForgeConfigSpec.IntValue veinSizeQuarkLimestoneVariant;
        ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneVariant;
        ForgeConfigSpec.IntValue minHeightQuarkLimestoneVariant;
        ForgeConfigSpec.IntValue maxHeightQuarkLimestoneVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneVariant;

        ForgeConfigSpec.BooleanValue enableQuarkJasperVariant;
        ForgeConfigSpec.IntValue veinSizeQuarkJasperVariant;
        ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperVariant;
        ForgeConfigSpec.IntValue minHeightQuarkJasperVariant;
        ForgeConfigSpec.IntValue maxHeightQuarkJasperVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperVariant;

        ForgeConfigSpec.BooleanValue enableQuarkMarbleVariant;
        ForgeConfigSpec.IntValue veinSizeQuarkMarbleVariant;
        ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleVariant;
        ForgeConfigSpec.IntValue minHeightQuarkMarbleVariant;
        ForgeConfigSpec.IntValue maxHeightQuarkMarbleVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleVariant;

        ForgeConfigSpec.BooleanValue enableQuarkSlateVariant;
        ForgeConfigSpec.IntValue veinSizeQuarkSlateVariant;
        ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateVariant;
        ForgeConfigSpec.IntValue minHeightQuarkSlateVariant;
        ForgeConfigSpec.IntValue maxHeightQuarkSlateVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateVariant;

        // Embellishcraft
        ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltVariant;
        ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltVariant;
        ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltVariant;
        ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltVariant;
        ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltVariant;

        ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissVariant;
        ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissVariant;
        ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissVariant;
        ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissVariant;
        ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissVariant;

        ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeVariant;
        ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeVariant;
        ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeVariant;
        ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeVariant;
        ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeVariant;

        ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleVariant;
        ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleVariant;
        ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleVariant;
        ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleVariant;
        ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleVariant;

        ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteVariant;

        ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateVariant;
        ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateVariant;
        ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateVariant;
        ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateVariant;
        ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateVariant;

        // Danny's Stone Variants
        ForgeConfigSpec.BooleanValue enableHardenedStoneVariant;
        ForgeConfigSpec.IntValue veinSizeHardenedStoneVariant;
        ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneVariant;
        ForgeConfigSpec.IntValue minHeightHardenedStoneVariant;
        ForgeConfigSpec.IntValue maxHeightHardenedStoneVariant;
        ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneVariant;
        ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneVariant;
        ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneVariant;

        // = BUILDER.comment("").define("", false);

        BUILDER.comment(CommentHandler.getVariantComment(type)).push(PathHandler.getGeneralPath());
        disableAllVariants = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Variant").push("stone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkStoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightStoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistStoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Variant").push("andesite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkAndesiteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightAndesiteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistAndesiteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Variant").push("diorite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkDioriteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightDioriteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistDioriteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Variant").push("granite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGraniteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGraniteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistGraniteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Variant").push("netherrack_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkNetherrackVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightNetherrackVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightNetherrackVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Variant").push("end_stone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEndStoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEndStoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEndStoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Variant").push("sand_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightSandVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Variant").push("red_sand_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightRedSandVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Variant").push("gravel_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkGravelVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGravelVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Variant").push("sandstone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkSandstoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightSandstoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Variant").push("red_sandstone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkRedSandstoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightRedSandstoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Variant").push("blue_ice_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBlueIceVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightBlueIceVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Variant").push("packed_ice_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkPackedIceVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightPackedIceVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Variant").push("bedrock_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkBedrockVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightBedrockVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockVariant = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Variant (Quark)").push("quark_basalt_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkBasaltVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkBasaltVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightQuarkBasaltVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Variant (Quark)").push("quark_limestone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Variant (Quark)").push("quark_jasper_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkJasperVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkJasperVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkJasperVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Variant (Quark)").push("quark_marble_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkMarbleVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkMarbleVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Variant (Quark)").push("quark_slate_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkQuarkSlateVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkSlateVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkSlateVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Variant (Embellishcraft)").push("embellishcraft_basalt_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Ore (Embellishcraft)").push("embellishcraft_gneiss_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Variant (Embellishcraft)").push("embellishcraft_jade_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Variant (Embellishcraft)").push("embellishcraft_larvikite_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Variant (Embellishcraft)").push("embellishcraft_marble_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Variant (Embellishcraft)").push("embellishcraft_slate_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Variant").push("hardened_stone_" + PathHandler.getVariantPath(type));
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneVariant = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneVariant = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 2, 0, 65536);
        veinsPerChunkHardenedStoneVariant = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightHardenedStoneVariant = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneVariant = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistHardenedStoneVariant = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneVariant = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneVariant = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneVariant = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Test2.spec, path + "/" + type.toString().toLowerCase() + ".toml");
    }

    public static void loadConfig(String path, OreTypes type) {
        System.err.println("loadConfig oreType: " + type);
        create(path, type);
        //ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Test2.spec, path + "/" + type.toString().toLowerCase() + ".toml");
    }
}
