package com.danny.dannys_ores.configs.ores;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Bauxite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableBauxiteOres;

    public static ForgeConfigSpec.BooleanValue enableStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockBauxiteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockBauxiteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateBauxiteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteBauxiteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateBauxiteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneBauxiteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneBauxiteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Bauxite Ores").push("general");
        disableBauxiteOres = BUILDER.comment("If false, all bauxite ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Bauxite Ore").push("stone_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkStoneBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightStoneBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightStoneBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistStoneBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Bauxite Ore").push("andesite_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkAndesiteBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightAndesiteBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightAndesiteBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistAndesiteBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Bauxite Ore").push("diorite_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkDioriteBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightDioriteBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightDioriteBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistDioriteBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Bauxite Ore").push("granite_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGraniteBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGraniteBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightGraniteBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistGraniteBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Bauxite Ore").push("netherrack_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkNetherrackBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightNetherrackBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightNetherrackBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistNetherrackBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Bauxite Ore").push("end_stone_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEndStoneBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEndStoneBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightEndStoneBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Bauxite Ore").push("sand_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightSandBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Bauxite Ore").push("red_sand_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightRedSandBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Bauxite Ore").push("gravel_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGravelBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGravelBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightGravelBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Bauxite Ore").push("sandstone_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandstoneBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandstoneBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightSandstoneBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Bauxite Ore").push("red_sandstone_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandstoneBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandstoneBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightRedSandstoneBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Bauxite Ore").push("blue_ice_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkBlueIceBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightBlueIceBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightBlueIceBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Bauxite Ore").push("packed_ice_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkPackedIceBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightPackedIceBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightPackedIceBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Bauxite Ore").push("bedrock_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockBauxiteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Bauxite Ore (Quark)").push("quark_basalt_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkBasaltBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkBasaltBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkBasaltBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistQuarkBasaltBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Bauxite Ore (Quark)").push("quark_limestone_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkLimestoneBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkLimestoneBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightQuarkLimestoneBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkLimestoneBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Bauxite Ore (Quark)").push("quark_jasper_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkJasperBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkJasperBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightQuarkJasperBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkJasperBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Bauxite Ore (Quark)").push("quark_marble_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkMarbleBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkMarbleBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightQuarkMarbleBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkMarbleBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Bauxite Ore (Quark)").push("quark_slate_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkSlateBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkSlateBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightQuarkSlateBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkSlateBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Bauxite Ore (Embellishcraft)").push("embellishcraft_basalt_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftBasaltBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightEmbellishcraftBasaltBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Bauxite Ore (Embellishcraft)").push("embellishcraft_gneiss_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftGneissBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightEmbellishcraftGneissBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Bauxite Ore (Embellishcraft)").push("embellishcraft_jade_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftJadeBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightEmbellishcraftJadeBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Bauxite Ore (Embellishcraft)").push("embellishcraft_larvikite_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Bauxite Ore (Embellishcraft)").push("embellishcraft_marble_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftMarbleBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightEmbellishcraftMarbleBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Bauxite Ore (Embellishcraft)").push("embellishcraft_slate_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftSlateBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightEmbellishcraftSlateBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Bauxite Ore").push("hardened_stone_bauxite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneBauxiteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneBauxiteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkHardenedStoneBauxiteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightHardenedStoneBauxiteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightHardenedStoneBauxiteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistHardenedStoneBauxiteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneBauxiteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneBauxiteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneBauxiteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Bauxite.spec, Main.MOD_ID + "/bauxite.toml");
    }
}
