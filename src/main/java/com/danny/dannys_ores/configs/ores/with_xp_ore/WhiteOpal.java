package com.danny.dannys_ores.configs.ores.with_xp_ore;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class WhiteOpal {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableWhiteOpalOres;

    public static ForgeConfigSpec.BooleanValue enableStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableGravelWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightGravelWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockWhiteOpalOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockWhiteOpalOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateWhiteOpalOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteWhiteOpalOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateWhiteOpalOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneWhiteOpalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneWhiteOpalOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("WhiteOpal Ores").push(PathHandler.getGeneralPath());
        disableWhiteOpalOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone WhiteOpal Ore").push("stone_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite WhiteOpal Ore").push("andesite_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite WhiteOpal Ore").push("diorite_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite WhiteOpal Ore").push("granite_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack WhiteOpal Ore").push("netherrack_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone WhiteOpal Ore").push("end_stone_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand WhiteOpal Ore").push("sand_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightSandWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand WhiteOpal Ore").push("red_sand_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel WhiteOpal Ore").push("gravel_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone WhiteOpal Ore").push("sandstone_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone WhiteOpal Ore").push("red_sandstone_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice WhiteOpal Ore").push("blue_ice_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice WhiteOpal Ore").push("packed_ice_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkPackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightPackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock WhiteOpal Ore").push("bedrock_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockWhiteOpalOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt WhiteOpal Ore (Quark)").push("quark_basalt_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone WhiteOpal Ore (Quark)").push("quark_limestone_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper WhiteOpal Ore (Quark)").push("quark_jasper_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble WhiteOpal Ore (Quark)").push("quark_marble_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate WhiteOpal Ore (Quark)").push("quark_slate_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt WhiteOpal Ore (Embellishcraft)").push("embellishcraft_basalt_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss WhiteOpal Ore (Embellishcraft)").push("embellishcraft_gneiss_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade WhiteOpal Ore (Embellishcraft)").push("embellishcraft_jade_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite WhiteOpal Ore (Embellishcraft)").push("embellishcraft_larvikite_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble WhiteOpal Ore (Embellishcraft)").push("embellishcraft_marble_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate WhiteOpal Ore (Embellishcraft)").push("embellishcraft_slate_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone WhiteOpal Ore").push("hardened_stone_white_opal_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(),1, 0, 65536);
        minHeightHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneWhiteOpalOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, WhiteOpal.spec, path + "/white_opal.toml");
    }
}
