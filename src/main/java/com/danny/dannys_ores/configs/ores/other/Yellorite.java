package com.danny.dannys_ores.configs.ores.other;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Yellorite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableYelloriteOres;

    public static ForgeConfigSpec.BooleanValue enableStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableSandYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightSandYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockYelloriteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockYelloriteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateYelloriteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteYelloriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateYelloriteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneYelloriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneYelloriteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Yellorite Ores").push("general");
        disableYelloriteOres = BUILDER.comment("If false, all yellorite ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Yellorite Ore").push("stone_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkStoneYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightStoneYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistStoneYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Yellorite Ore").push("andesite_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkAndesiteYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightAndesiteYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistAndesiteYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Yellorite Ore").push("diorite_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkDioriteYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightDioriteYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistDioriteYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Yellorite Ore").push("granite_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkGraniteYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGraniteYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistGraniteYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Yellorite Ore").push("netherrack_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkNetherrackYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightNetherrackYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightNetherrackYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Yellorite Ore").push("end_stone_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkEndStoneYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEndStoneYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEndStoneYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Yellorite Ore").push("sand_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkSandYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Yellorite Ore").push("red_sand_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkRedSandYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Yellorite Ore").push("gravel_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkGravelYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGravelYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Yellorite Ore").push("sandstone_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkSandstoneYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandstoneYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Yellorite Ore").push("red_sandstone_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkRedSandstoneYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandstoneYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Yellorite Ore").push("blue_ice_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkBlueIceYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightBlueIceYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Yellorite Ore").push("packed_ice_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkPackedIceYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightPackedIceYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Yellorite Ore").push("bedrock_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockYelloriteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistance", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Yellorite Ore (Quark)").push("quark_basalt_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 5, 0, 65536);
        veinsPerChunkQuarkBasaltYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkBasaltYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 64, 0, 256);
        maxHeightQuarkBasaltYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Yellorite Ore (Quark)").push("quark_limestone_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkLimestoneYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkLimestoneYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkLimestoneYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Yellorite Ore (Quark)").push("quark_jasper_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkJasperYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkJasperYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkJasperYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Yellorite Ore (Quark)").push("quark_marble_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkMarbleYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkMarbleYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkMarbleYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Yellorite Ore (Quark)").push("quark_slate_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkQuarkSlateYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkSlateYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistQuarkSlateYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Yellorite Ore (Embellishcraft)").push("embellishcraft_basalt_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftBasaltYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Yellorite Ore (Embellishcraft)").push("embellishcraft_gneiss_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftGneissYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Yellorite Ore (Embellishcraft)").push("embellishcraft_jade_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftJadeYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Yellorite Ore (Embellishcraft)").push("embellishcraft_larvikite_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Yellorite Ore (Embellishcraft)").push("embellishcraft_marble_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftMarbleYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Yellorite Ore (Embellishcraft)").push("embellishcraft_slate_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEmbellishcraftSlateYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Yellorite Ore").push("hardened_stone_yellorite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneYelloriteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneYelloriteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkHardenedStoneYelloriteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightHardenedStoneYelloriteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneYelloriteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistHardenedStoneYelloriteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneYelloriteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneYelloriteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneYelloriteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Yellorite.spec, Main.MOD_ID + "/yellorite.toml");
    }
}
