package com.danny.dannys_ores.configs.ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Inferium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableInferiumOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceInferiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockInferiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockInferiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateInferiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteInferiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateInferiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneInferiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneInferiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneInferiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneInferiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneInferiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneInferiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Inferium Ores").push(PathHandler.getGeneralPath());
        disableInferiumOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Inferium Ore").push("stone_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkStoneInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightStoneInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistStoneInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Inferium Ore").push("andesite_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkAndesiteInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightAndesiteInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistAndesiteInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Inferium Ore").push("diorite_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkDioriteInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightDioriteInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistDioriteInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Inferium Ore").push("granite_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGraniteInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightGraniteInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGraniteInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Inferium Ore").push("netherrack_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightNetherrackInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Inferium Ore").push("end_stone_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEndStoneInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEndStoneInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Inferium Ore").push("sand_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightSandInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Inferium Ore").push("red_sand_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightRedSandInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Inferium Ore").push("gravel_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkGravelInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGravelInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Inferium Ore").push("sandstone_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandstoneInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightSandstoneInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Inferium Ore").push("red_sandstone_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Inferium Ore").push("blue_ice_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkBlueIceInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightBlueIceInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Inferium Ore").push("packed_ice_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkPackedIceInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightPackedIceInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Inferium Ore").push("bedrock_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockInferiumOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Inferium Ore (Quark)").push("quark_basalt_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Inferium Ore (Quark)").push("quark_limestone_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Inferium Ore (Quark)").push("quark_jasper_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Inferium Ore (Quark)").push("quark_marble_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Inferium Ore (Quark)").push("quark_slate_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Inferium Ore (Embellishcraft)").push("embellishcraft_basalt_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Inferium Ore (Embellishcraft)").push("embellishcraft_gneiss_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Inferium Ore (Embellishcraft)").push("embellishcraft_jade_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Inferium Ore (Embellishcraft)").push("embellishcraft_larvikite_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Inferium Ore (Embellishcraft)").push("embellishcraft_marble_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Inferium Ore (Embellishcraft)").push("embellishcraft_slate_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Inferium Ore").push("hardened_stone_inferium_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneInferiumOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Inferium.spec, path + "/inferium.toml");
    }
}
