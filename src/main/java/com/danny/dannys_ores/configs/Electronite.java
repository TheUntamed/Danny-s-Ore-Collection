package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Electronite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableElectroniteOres;

    public static ForgeConfigSpec.BooleanValue enableStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockElectroniteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockElectroniteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateElectroniteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteElectroniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateElectroniteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneElectroniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneElectroniteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Electronite Ores").push("general");
        disableElectroniteOres = BUILDER.comment("If false, all electronite ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Electronite Ore").push("stone_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkStoneElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightStoneElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistStoneElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Electronite Ore").push("andesite_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkAndesiteElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightAndesiteElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistAndesiteElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Electronite Ore").push("diorite_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkDioriteElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightDioriteElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistDioriteElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Electronite Ore").push("granite_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkGraniteElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightGraniteElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistGraniteElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Electronite Ore").push("netherrack_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkNetherrackElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightNetherrackElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 96, 0, 256);
        maxHeightNetherrackElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Electronite Ore").push("end_stone_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStoneElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEndStoneElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 32, 0, 256);
        isTempWhitelistEndStoneElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Electronite Ore").push("sand_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Electronite Ore").push("red_sand_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Electronite Ore").push("gravel_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGravelElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Electronite Ore").push("sandstone_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstoneElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightSandstoneElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Electronite Ore").push("red_sandstone_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstoneElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightRedSandstoneElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Electronite Ore").push("blue_ice_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIceElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightBlueIceElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Electronite Ore").push("packed_ice_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIceElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightPackedIceElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Electronite Ore").push("bedrock_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockElectroniteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockElectroniteOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Electronite Ore (Quark)").push("quark_basalt_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkBasaltElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 96, 0, 256);
        maxHeightQuarkBasaltElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Electronite Ore (Quark)").push("quark_limestone_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkLimestoneElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkLimestoneElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Electronite Ore (Quark)").push("quark_jasper_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkJasperElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkJasperElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkJasperElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Electronite Ore (Quark)").push("quark_marble_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkMarbleElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkMarbleElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkMarbleElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Electronite Ore (Quark)").push("quark_slate_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkSlateElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightQuarkSlateElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistQuarkSlateElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Electronite Ore (Embellishcraft)").push("embellishcraft_basalt_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftBasaltElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Electronite Ore (Embellishcraft)").push("embellishcraft_gneiss_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftGneissElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Electronite Ore (Embellishcraft)").push("embellishcraft_jade_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftJadeElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Electronite Ore (Embellishcraft)").push("embellishcraft_larvikite_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Electronite Ore (Embellishcraft)").push("embellishcraft_marble_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftMarbleElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Electronite Ore (Embellishcraft)").push("embellishcraft_slate_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightEmbellishcraftSlateElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Electronite Ore").push("hardened_stone_electronite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneElectroniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneElectroniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkHardenedStoneElectroniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 8, 0, 65536);
        minHeightHardenedStoneElectroniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneElectroniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 16, 0, 256);
        isTempWhitelistHardenedStoneElectroniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneElectroniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneElectroniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneElectroniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Electronite.spec, Main.MOD_ID + "/electronite.toml");
    }
}
