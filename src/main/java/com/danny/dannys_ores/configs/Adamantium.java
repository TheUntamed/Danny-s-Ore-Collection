package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Adamantium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableAdamantiumOres;

    public static ForgeConfigSpec.BooleanValue enableStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceAdamantiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceAdamantiumOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockAdamantiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockAdamantiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateAdamantiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteAdamantiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateAdamantiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneAdamantiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneAdamantiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Adamantium Ores").push("adamantium_ores");
        enableAdamantiumOres = BUILDER.comment("Enable or disable all Adamantium Ore variants.").define("enableAdamantiumOres", true);
        BUILDER.comment("Stone Adamantium Ore").push("stone_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneAdamantiumOre", true);
        veinSizeStoneAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneAdamantiumOre", 2, 0, 65536);
        veinsPerChunkStoneAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneAdamantiumOre", 8, 0, 65536);
        minHeightStoneAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneAdamantiumOre", 0, 0, 256);
        maxHeightStoneAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneAdamantiumOre", 32, 0, 256);
        isTempWhitelistStoneAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneAdamantiumOre", false);
        temperatureBlacklistStoneAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistStoneAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneAdamantiumOre", false);
        biomeBlacklistStoneAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Adamantium Ore").push("andesite_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteAdamantiumOre", true);
        veinSizeAndesiteAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteAdamantiumOre", 2, 0, 65536);
        veinsPerChunkAndesiteAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteAdamantiumOre", 8, 0, 65536);
        minHeightAndesiteAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteAdamantiumOre", 0, 0, 256);
        maxHeightAndesiteAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteAdamantiumOre", 32, 0, 256);
        isTempWhitelistAndesiteAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteAdamantiumOre", false);
        temperatureBlacklistAndesiteAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteAdamantiumOre", false);
        biomeBlacklistAndesiteAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Adamantium Ore").push("diorite_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteAdamantiumOre", true);
        veinSizeDioriteAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteAdamantiumOre", 2, 0, 65536);
        veinsPerChunkDioriteAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteAdamantiumOre", 8, 0, 65536);
        minHeightDioriteAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteAdamantiumOre", 0, 0, 256);
        maxHeightDioriteAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteAdamantiumOre", 32, 0, 256);
        isTempWhitelistDioriteAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteAdamantiumOre", false);
        temperatureBlacklistDioriteAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistDioriteAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteAdamantiumOre", false);
        biomeBlacklistDioriteAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Adamantium Ore").push("granite_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteAdamantiumOre", true);
        veinSizeGraniteAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteAdamantiumOre", 2, 0, 65536);
        veinsPerChunkGraniteAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteAdamantiumOre", 8, 0, 65536);
        minHeightGraniteAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteAdamantiumOre", 0, 0, 256);
        maxHeightGraniteAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteAdamantiumOre", 32, 0, 256);
        isTempWhitelistGraniteAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteAdamantiumOre", false);
        temperatureBlacklistGraniteAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistGraniteAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteAdamantiumOre", false);
        biomeBlacklistGraniteAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Adamantium Ore").push("netherrack_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackAdamantiumOre", true);
        veinSizeNetherrackAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackAdamantiumOre", 2, 0, 65536);
        veinsPerChunkNetherrackAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackAdamantiumOre", 8, 0, 65536);
        minHeightNetherrackAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackAdamantiumOre", 64, 0, 256);
        maxHeightNetherrackAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackAdamantiumOre", 128, 0, 256);
        isTempWhitelistNetherrackAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackAdamantiumOre", false);
        temperatureBlacklistNetherrackAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackAdamantiumOre", false);
        biomeBlacklistNetherrackAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Adamantium Ore").push("end_stone_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneAdamantiumOre", true);
        veinSizeEndStoneAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneAdamantiumOre", 2, 0, 65536);
        veinsPerChunkEndStoneAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneAdamantiumOre", 8, 0, 65536);
        minHeightEndStoneAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneAdamantiumOre", 0, 0, 256);
        maxHeightEndStoneAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneAdamantiumOre", 64, 0, 256);
        isTempWhitelistEndStoneAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneAdamantiumOre", false);
        temperatureBlacklistEndStoneAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneAdamantiumOre", false);
        biomeBlacklistEndStoneAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Adamantium Ore").push("sand_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandAdamantiumOre", true);
        veinSizeSandAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandAdamantiumOre", 2, 0, 65536);
        veinsPerChunkSandAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandAdamantiumOre", 8, 0, 65536);
        minHeightSandAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandAdamantiumOre", 0, 0, 256);
        maxHeightSandAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandAdamantiumOre", 128, 0, 256);
        isTempWhitelistSandAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandAdamantiumOre", false);
        temperatureBlacklistSandAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistSandAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandAdamantiumOre", false);
        biomeBlacklistSandAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Adamantium Ore").push("red_sand_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandAdamantiumOre", true);
        veinSizeRedSandAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandAdamantiumOre", 2, 0, 65536);
        veinsPerChunkRedSandAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandAdamantiumOre", 8, 0, 65536);
        minHeightRedSandAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandAdamantiumOre", 0, 0, 256);
        maxHeightRedSandAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandAdamantiumOre", 128, 0, 256);
        isTempWhitelistRedSandAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandAdamantiumOre", false);
        temperatureBlacklistRedSandAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistRedSandAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandAdamantiumOre", false);
        biomeBlacklistRedSandAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Adamantium Ore").push("gravel_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelAdamantiumOre", true);
        veinSizeGravelAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelAdamantiumOre", 2, 0, 65536);
        veinsPerChunkGravelAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelAdamantiumOre", 8, 0, 65536);
        minHeightGravelAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelAdamantiumOre", 0, 0, 256);
        maxHeightGravelAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelAdamantiumOre", 128, 0, 256);
        isTempWhitelistGravelAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelAdamantiumOre", false);
        temperatureBlacklistGravelAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistGravelAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelAdamantiumOre", false);
        biomeBlacklistGravelAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Adamantium Ore").push("sandstone_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneAdamantiumOre", true);
        veinSizeSandstoneAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneAdamantiumOre", 2, 0, 65536);
        veinsPerChunkSandstoneAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneAdamantiumOre", 8, 0, 65536);
        minHeightSandstoneAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneAdamantiumOre", 0, 0, 256);
        maxHeightSandstoneAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneAdamantiumOre", 128, 0, 256);
        isTempWhitelistSandstoneAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneAdamantiumOre", false);
        temperatureBlacklistSandstoneAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneAdamantiumOre", false);
        biomeBlacklistSandstoneAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Adamantium Ore").push("red_sandstone_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneAdamantiumOre", true);
        veinSizeRedSandstoneAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneAdamantiumOre", 2, 0, 65536);
        veinsPerChunkRedSandstoneAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneAdamantiumOre", 8, 0, 65536);
        minHeightRedSandstoneAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneAdamantiumOre", 0, 0, 256);
        maxHeightRedSandstoneAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneAdamantiumOre", 128, 0, 256);
        isTempWhitelistRedSandstoneAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneAdamantiumOre", false);
        temperatureBlacklistRedSandstoneAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneAdamantiumOre", false);
        biomeBlacklistRedSandstoneAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Adamantium Ore").push("blue_ice_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceAdamantiumOre", true);
        veinSizeBlueIceAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceAdamantiumOre", 2, 0, 65536);
        veinsPerChunkBlueIceAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceAdamantiumOre", 8, 0, 65536);
        minHeightBlueIceAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceAdamantiumOre", 0, 0, 256);
        maxHeightBlueIceAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceAdamantiumOre", 128, 0, 256);
        isTempWhitelistBlueIceAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceAdamantiumOre", false);
        temperatureBlacklistBlueIceAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceAdamantiumOre", false);
        biomeBlacklistBlueIceAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBlueIceAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Adamantium Ore").push("packed_ice_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceAdamantiumOre", true);
        veinSizePackedIceAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceAdamantiumOre", 2, 0, 65536);
        veinsPerChunkPackedIceAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceAdamantiumOre", 8, 0, 65536);
        minHeightPackedIceAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceAdamantiumOre", 0, 0, 256);
        maxHeightPackedIceAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceAdamantiumOre", 128, 0, 256);
        isTempWhitelistPackedIceAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceAdamantiumOre", false);
        temperatureBlacklistPackedIceAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceAdamantiumOre", false);
        biomeBlacklistPackedIceAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistPackedIceAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Adamantium Ore").push("bedrock_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockAdamantiumOre", true);
        veinSizeBedrockAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockAdamantiumOre", 2, 0, 65536);
        veinsPerChunkBedrockAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockAdamantiumOre", 2, 0, 65536);
        minHeightBedrockAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockAdamantiumOre", 0, 0, 256);
        maxHeightBedrockAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockAdamantiumOre", 256, 0, 256);
        isTempWhitelistBedrockAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockAdamantiumOre", false);
        temperatureBlacklistBedrockAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistBedrockAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockAdamantiumOre", false);
        biomeBlacklistBedrockAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBedrockAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockAdamantiumOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockAdamantiumOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Adamantium Ore (Quark)").push("quark_basalt_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltAdamantiumOre", true);
        veinSizeQuarkBasaltAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltAdamantiumOre", 2, 0, 65536);
        veinsPerChunkQuarkBasaltAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltAdamantiumOre", 8, 0, 65536);
        minHeightQuarkBasaltAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltAdamantiumOre", 64, 0, 256);
        maxHeightQuarkBasaltAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltAdamantiumOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltAdamantiumOre", false);
        temperatureBlacklistQuarkBasaltAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltAdamantiumOre", false);
        biomeBlacklistQuarkBasaltAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Adamantium Ore (Quark)").push("quark_limestone_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneAdamantiumOre", true);
        veinSizeQuarkLimestoneAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneAdamantiumOre", 2, 0, 65536);
        veinsPerChunkQuarkLimestoneAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneAdamantiumOre", 8, 0, 65536);
        minHeightQuarkLimestoneAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneAdamantiumOre", 0, 0, 256);
        maxHeightQuarkLimestoneAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneAdamantiumOre", 32, 0, 256);
        isTempWhitelistQuarkLimestoneAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneAdamantiumOre", false);
        temperatureBlacklistQuarkLimestoneAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneAdamantiumOre", false);
        biomeBlacklistQuarkLimestoneAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Adamantium Ore (Quark)").push("quark_jasper_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperAdamantiumOre", true);
        veinSizeQuarkJasperAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperAdamantiumOre", 2, 0, 65536);
        veinsPerChunkQuarkJasperAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperAdamantiumOre", 8, 0, 65536);
        minHeightQuarkJasperAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperAdamantiumOre", 0, 0, 256);
        maxHeightQuarkJasperAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperAdamantiumOre", 32, 0, 256);
        isTempWhitelistQuarkJasperAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperAdamantiumOre", false);
        temperatureBlacklistQuarkJasperAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperAdamantiumOre", false);
        biomeBlacklistQuarkJasperAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Adamantium Ore (Quark)").push("quark_marble_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleAdamantiumOre", true);
        veinSizeQuarkMarbleAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleAdamantiumOre", 2, 0, 65536);
        veinsPerChunkQuarkMarbleAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleAdamantiumOre", 8, 0, 65536);
        minHeightQuarkMarbleAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleAdamantiumOre", 0, 0, 256);
        maxHeightQuarkMarbleAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleAdamantiumOre", 32, 0, 256);
        isTempWhitelistQuarkMarbleAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleAdamantiumOre", false);
        temperatureBlacklistQuarkMarbleAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleAdamantiumOre", false);
        biomeBlacklistQuarkMarbleAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Adamantium Ore (Quark)").push("quark_slate_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateAdamantiumOre", true);
        veinSizeQuarkSlateAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateAdamantiumOre", 2, 0, 65536);
        veinsPerChunkQuarkSlateAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateAdamantiumOre", 8, 0, 65536);
        minHeightQuarkSlateAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateAdamantiumOre", 0, 0, 256);
        maxHeightQuarkSlateAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateAdamantiumOre", 32, 0, 256);
        isTempWhitelistQuarkSlateAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateAdamantiumOre", false);
        temperatureBlacklistQuarkSlateAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateAdamantiumOre", false);
        biomeBlacklistQuarkSlateAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Adamantium Ore (Embellishcraft)").push("embellishcraft_basalt_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltAdamantiumOre", true);
        veinSizeEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltAdamantiumOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltAdamantiumOre", 8, 0, 65536);
        minHeightEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltAdamantiumOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltAdamantiumOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltAdamantiumOre", false);
        temperatureBlacklistEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltAdamantiumOre", false);
        biomeBlacklistEmbellishcraftBasaltAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Adamantium Ore (Embellishcraft)").push("embellishcraft_gneiss_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissAdamantiumOre", true);
        veinSizeEmbellishcraftGneissAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissAdamantiumOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissAdamantiumOre", 8, 0, 65536);
        minHeightEmbellishcraftGneissAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissAdamantiumOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissAdamantiumOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissAdamantiumOre", false);
        temperatureBlacklistEmbellishcraftGneissAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissAdamantiumOre", false);
        biomeBlacklistEmbellishcraftGneissAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Adamantium Ore (Embellishcraft)").push("embellishcraft_jade_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeAdamantiumOre", true);
        veinSizeEmbellishcraftJadeAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeAdamantiumOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadeAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeAdamantiumOre", 8, 0, 65536);
        minHeightEmbellishcraftJadeAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeAdamantiumOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeAdamantiumOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeAdamantiumOre", false);
        temperatureBlacklistEmbellishcraftJadeAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeAdamantiumOre", false);
        biomeBlacklistEmbellishcraftJadeAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Adamantium Ore (Embellishcraft)").push("embellishcraft_larvikite_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteAdamantiumOre", true);
        veinSizeEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteAdamantiumOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteAdamantiumOre", 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteAdamantiumOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteAdamantiumOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteAdamantiumOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteAdamantiumOre", false);
        biomeBlacklistEmbellishcraftLarvikiteAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Adamantium Ore (Embellishcraft)").push("embellishcraft_marble_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleAdamantiumOre", true);
        veinSizeEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleAdamantiumOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleAdamantiumOre", 8, 0, 65536);
        minHeightEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleAdamantiumOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleAdamantiumOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleAdamantiumOre", false);
        temperatureBlacklistEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleAdamantiumOre", false);
        biomeBlacklistEmbellishcraftMarbleAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Adamantium Ore (Embellishcraft)").push("embellishcraft_slate_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateAdamantiumOre", true);
        veinSizeEmbellishcraftSlateAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateAdamantiumOre", 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlateAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateAdamantiumOre", 8, 0, 65536);
        minHeightEmbellishcraftSlateAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateAdamantiumOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateAdamantiumOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateAdamantiumOre", false);
        temperatureBlacklistEmbellishcraftSlateAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateAdamantiumOre", false);
        biomeBlacklistEmbellishcraftSlateAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Adamantium Ore").push("hardened_stone_adamantium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneAdamantiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneAdamantiumOre", true);
        veinSizeHardenedStoneAdamantiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneAdamantiumOre", 2, 0, 65536);
        veinsPerChunkHardenedStoneAdamantiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneAdamantiumOre", 8, 0, 65536);
        minHeightHardenedStoneAdamantiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneAdamantiumOre", 0, 0, 256);
        maxHeightHardenedStoneAdamantiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneAdamantiumOre", 32, 0, 256);
        isTempWhitelistHardenedStoneAdamantiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneAdamantiumOre", false);
        temperatureBlacklistHardenedStoneAdamantiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneAdamantiumOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneAdamantiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneAdamantiumOre", false);
        biomeBlacklistHardenedStoneAdamantiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistHardenedStoneAdamantiumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Adamantium.spec, Main.MOD_ID + "/adamantium.toml");
    }
}
