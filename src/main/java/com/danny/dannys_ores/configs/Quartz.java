package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Quartz {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableQuartzOres;

    public static ForgeConfigSpec.BooleanValue enableStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightStoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaNetherQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaNetherQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaNetherQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaNetherQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaNetherQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGravelQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGravelQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneQuartzOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateQuartzOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateQuartzOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Quartz Ores").push("quartz_ores");
        enableQuartzOres = BUILDER.comment("Enable or disable all Quartz Ore variants.").define("enableQuartzOres", true);
        BUILDER.comment("Stone Quartz Ore").push("stone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneQuartzOre", true);
        veinSizeStoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneQuartzOre", 9, 0, 65536);
        veinsPerChunkStoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneQuartzOre", 2, 0, 65536);
        minHeightStoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneQuartzOre", 0, 0, 256);
        maxHeightStoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneQuartzOre", 32, 0, 256);
        isTempWhitelistStoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneQuartzOre", false);
        temperatureBlacklistStoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistStoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneQuartzOre", false);
        biomeBlacklistStoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Quartz Ore").push("andesite_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteQuartzOre", true);
        veinSizeAndesiteQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteQuartzOre", 9, 0, 65536);
        veinsPerChunkAndesiteQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteQuartzOre", 2, 0, 65536);
        minHeightAndesiteQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteQuartzOre", 0, 0, 256);
        maxHeightAndesiteQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteQuartzOre", 32, 0, 256);
        isTempWhitelistAndesiteQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteQuartzOre", false);
        temperatureBlacklistAndesiteQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteQuartzOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteQuartzOre", false);
        biomeBlacklistAndesiteQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Quartz Ore").push("diorite_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteQuartzOre", true);
        veinSizeDioriteQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteQuartzOre", 9, 0, 65536);
        veinsPerChunkDioriteQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteQuartzOre", 2, 0, 65536);
        minHeightDioriteQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteQuartzOre", 0, 0, 256);
        maxHeightDioriteQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteQuartzOre", 32, 0, 256);
        isTempWhitelistDioriteQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteQuartzOre", false);
        temperatureBlacklistDioriteQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteQuartzOre", new ArrayList<String>());
        isBiomeWhitelistDioriteQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteQuartzOre", false);
        biomeBlacklistDioriteQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Quartz Ore").push("granite_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteQuartzOre", true);
        veinSizeGraniteQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteQuartzOre", 9, 0, 65536);
        veinsPerChunkGraniteQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteQuartzOre", 2, 0, 65536);
        minHeightGraniteQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteQuartzOre", 0, 0, 256);
        maxHeightGraniteQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteQuartzOre", 32, 0, 256);
        isTempWhitelistGraniteQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteQuartzOre", false);
        temperatureBlacklistGraniteQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteQuartzOre", new ArrayList<String>());
        isBiomeWhitelistGraniteQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteQuartzOre", false);
        biomeBlacklistGraniteQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Vanilla (Netherrack) Quartz Ore").push("vanilla_netherrack_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaNetherQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaNetherQuartzOre", true);
        veinSizeVanillaNetherQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaNetherQuartzOre", 14, 0, 65536);
        veinsPerChunkVanillaNetherQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaNetherQuartzOre", 16, 0, 65536);
        minHeightVanillaNetherQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaNetherQuartzOre", 10, 0, 256);
        maxHeightVanillaNetherQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaNetherQuartzOre", 128, 0, 256);
        isTempWhitelistVanillaNetherQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaNetherQuartzOre", false);
        temperatureBlacklistVanillaNetherQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaNetherQuartzOre", new ArrayList<String>());
        isBiomeWhitelistVanillaNetherQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaNetherQuartzOre", false);
        biomeBlacklistVanillaNetherQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaNetherQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Quartz Ore").push("end_stone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneQuartzOre", true);
        veinSizeEndStoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneQuartzOre", 9, 0, 65536);
        veinsPerChunkEndStoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneQuartzOre", 2, 0, 65536);
        minHeightEndStoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneQuartzOre", 0, 0, 256);
        maxHeightEndStoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneQuartzOre", 64, 0, 256);
        isTempWhitelistEndStoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneQuartzOre", false);
        temperatureBlacklistEndStoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneQuartzOre", false);
        biomeBlacklistEndStoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Quartz Ore").push("sand_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandQuartzOre", true);
        veinSizeSandQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandQuartzOre", 9, 0, 65536);
        veinsPerChunkSandQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandQuartzOre", 2, 0, 65536);
        minHeightSandQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandQuartzOre", 0, 0, 256);
        maxHeightSandQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandQuartzOre", 128, 0, 256);
        isTempWhitelistSandQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandQuartzOre", false);
        temperatureBlacklistSandQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandQuartzOre", new ArrayList<String>());
        isBiomeWhitelistSandQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandQuartzOre", false);
        biomeBlacklistSandQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Quartz Ore").push("gravel_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelQuartzOre", true);
        veinSizeGravelQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelQuartzOre", 9, 0, 65536);
        veinsPerChunkGravelQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelQuartzOre", 2, 0, 65536);
        minHeightGravelQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelQuartzOre", 0, 0, 256);
        maxHeightGravelQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelQuartzOre", 128, 0, 256);
        isTempWhitelistGravelQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelQuartzOre", false);
        temperatureBlacklistGravelQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelQuartzOre", new ArrayList<String>());
        isBiomeWhitelistGravelQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelQuartzOre", false);
        biomeBlacklistGravelQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Quartz Ore").push("sandstone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneQuartzOre", true);
        veinSizeSandstoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneQuartzOre", 9, 0, 65536);
        veinsPerChunkSandstoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneQuartzOre", 2, 0, 65536);
        minHeightSandstoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneQuartzOre", 0, 0, 256);
        maxHeightSandstoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneQuartzOre", 128, 0, 256);
        isTempWhitelistSandstoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneQuartzOre", false);
        temperatureBlacklistSandstoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneQuartzOre", false);
        biomeBlacklistSandstoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Quartz Ore").push("red_sandstone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneQuartzOre", true);
        veinSizeRedSandstoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneQuartzOre", 9, 0, 65536);
        veinsPerChunkRedSandstoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneQuartzOre", 2, 0, 65536);
        minHeightRedSandstoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneQuartzOre", 0, 0, 256);
        maxHeightRedSandstoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneQuartzOre", 128, 0, 256);
        isTempWhitelistRedSandstoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneQuartzOre", false);
        temperatureBlacklistRedSandstoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneQuartzOre", false);
        biomeBlacklistRedSandstoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Quartz Ore (Quark)").push("quark_basalt_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltQuartzOre", true);
        veinSizeQuarkBasaltQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltQuartzOre", 14, 0, 65536);
        veinsPerChunkQuarkBasaltQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltQuartzOre", 16, 0, 65536);
        minHeightQuarkBasaltQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltQuartzOre", 10, 0, 256);
        maxHeightQuarkBasaltQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltQuartzOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltQuartzOre", false);
        temperatureBlacklistQuarkBasaltQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltQuartzOre", false);
        biomeBlacklistQuarkBasaltQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Quartz Ore (Quark)").push("quark_limestone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneQuartzOre", true);
        veinSizeQuarkLimestoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneQuartzOre", 9, 0, 65536);
        veinsPerChunkQuarkLimestoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneQuartzOre", 2, 0, 65536);
        minHeightQuarkLimestoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneQuartzOre", 0, 0, 256);
        maxHeightQuarkLimestoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkLimestoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneQuartzOre", false);
        temperatureBlacklistQuarkLimestoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneQuartzOre", false);
        biomeBlacklistQuarkLimestoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Quartz Ore (Quark)").push("quark_jasper_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperQuartzOre", true);
        veinSizeQuarkJasperQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperQuartzOre", 9, 0, 65536);
        veinsPerChunkQuarkJasperQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperQuartzOre", 2, 0, 65536);
        minHeightQuarkJasperQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperQuartzOre", 0, 0, 256);
        maxHeightQuarkJasperQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkJasperQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperQuartzOre", false);
        temperatureBlacklistQuarkJasperQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperQuartzOre", false);
        biomeBlacklistQuarkJasperQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Quartz Ore (Quark)").push("quark_marble_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleQuartzOre", true);
        veinSizeQuarkMarbleQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleQuartzOre", 9, 0, 65536);
        veinsPerChunkQuarkMarbleQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleQuartzOre", 2, 0, 65536);
        minHeightQuarkMarbleQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleQuartzOre", 0, 0, 256);
        maxHeightQuarkMarbleQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkMarbleQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleQuartzOre", false);
        temperatureBlacklistQuarkMarbleQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleQuartzOre", false);
        biomeBlacklistQuarkMarbleQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Quartz Ore (Quark)").push("quark_slate_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateQuartzOre", true);
        veinSizeQuarkSlateQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateQuartzOre", 9, 0, 65536);
        veinsPerChunkQuarkSlateQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateQuartzOre", 2, 0, 65536);
        minHeightQuarkSlateQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateQuartzOre", 0, 0, 256);
        maxHeightQuarkSlateQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateQuartzOre", 32, 0, 256);
        isTempWhitelistQuarkSlateQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateQuartzOre", false);
        temperatureBlacklistQuarkSlateQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateQuartzOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateQuartzOre", false);
        biomeBlacklistQuarkSlateQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Quartz Ore (Embellishcraft)").push("embellishcraft_basalt_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltQuartzOre", true);
        veinSizeEmbellishcraftBasaltQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltQuartzOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftBasaltQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftBasaltQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltQuartzOre", false);
        temperatureBlacklistEmbellishcraftBasaltQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltQuartzOre", false);
        biomeBlacklistEmbellishcraftBasaltQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Quartz Ore (Embellishcraft)").push("embellishcraft_gneiss_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissQuartzOre", true);
        veinSizeEmbellishcraftGneissQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissQuartzOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftGneissQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftGneissQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissQuartzOre", false);
        temperatureBlacklistEmbellishcraftGneissQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissQuartzOre", false);
        biomeBlacklistEmbellishcraftGneissQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Quartz Ore (Embellishcraft)").push("embellishcraft_jade_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeQuartzOre", true);
        veinSizeEmbellishcraftJadeQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeQuartzOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftJadeQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftJadeQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeQuartzOre", false);
        temperatureBlacklistEmbellishcraftJadeQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeQuartzOre", false);
        biomeBlacklistEmbellishcraftJadeQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Quartz Ore (Embellishcraft)").push("embellishcraft_larvikite_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteQuartzOre", true);
        veinSizeEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteQuartzOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteQuartzOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteQuartzOre", false);
        biomeBlacklistEmbellishcraftLarvikiteQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Quartz Ore (Embellishcraft)").push("embellishcraft_marble_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleQuartzOre", true);
        veinSizeEmbellishcraftMarbleQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleQuartzOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftMarbleQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftMarbleQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleQuartzOre", false);
        temperatureBlacklistEmbellishcraftMarbleQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleQuartzOre", false);
        biomeBlacklistEmbellishcraftMarbleQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Quartz Ore (Embellishcraft)").push("embellishcraft_slate_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateQuartzOre", true);
        veinSizeEmbellishcraftSlateQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateQuartzOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateQuartzOre", 2, 0, 65536);
        minHeightEmbellishcraftSlateQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateQuartzOre", 0, 0, 256);
        maxHeightEmbellishcraftSlateQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateQuartzOre", 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateQuartzOre", false);
        temperatureBlacklistEmbellishcraftSlateQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateQuartzOre", false);
        biomeBlacklistEmbellishcraftSlateQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Quartz.spec, Main.MOD_ID + "/quartz.toml");
    }
}
