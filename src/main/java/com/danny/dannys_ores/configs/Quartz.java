package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Quartz {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableQuartzOres;

    public static ForgeConfigSpec.BooleanValue enableStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightStoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaNetherQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaNetherQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaNetherQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaNetherQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaNetherQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaNetherQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGravelQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGravelQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneQuartzOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Quartz Ores").push("quartz_ores");
        enableQuartzOres = BUILDER.comment("Enable or disable all Quartz Ore variants.").define("enableQuartzOres", true);
        BUILDER.comment("Stone Quartz Ore").push("stone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneQuartzOre", true);
        veinSizeStoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneQuartzOre", 9, 0, 65536);
        veinsPerChunkStoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneQuartzOre", 2, 0, 65536);
        minHeightStoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneQuartzOre", 0, 0, 256);
        maxHeightStoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneQuartzOre", 32, 0, 256);
        isTempWhitelistStoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneQuartzOre", false);
        temperatureBlacklistStoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistStoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneQuartzOre", false);
        biomeBlacklistStoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Quartz Ore").push("andesite_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteQuartzOre", true);
        veinSizeAndesiteQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteQuartzOre", 9, 0, 65536);
        veinsPerChunkAndesiteQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteQuartzOre", 2, 0, 65536);
        minHeightAndesiteQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteQuartzOre", 0, 0, 256);
        maxHeightAndesiteQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteQuartzOre", 32, 0, 256);
        isTempWhitelistAndesiteQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteQuartzOre", false);
        temperatureBlacklistAndesiteQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteQuartzOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteQuartzOre", false);
        biomeBlacklistAndesiteQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Quartz Ore").push("diorite_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteQuartzOre", true);
        veinSizeDioriteQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteQuartzOre", 9, 0, 65536);
        veinsPerChunkDioriteQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteQuartzOre", 2, 0, 65536);
        minHeightDioriteQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteQuartzOre", 0, 0, 256);
        maxHeightDioriteQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteQuartzOre", 32, 0, 256);
        isTempWhitelistDioriteQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteQuartzOre", false);
        temperatureBlacklistDioriteQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteQuartzOre", new ArrayList<String>());
        isBiomeWhitelistDioriteQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteQuartzOre", false);
        biomeBlacklistDioriteQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Quartz Ore").push("granite_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteQuartzOre", true);
        veinSizeGraniteQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteQuartzOre", 9, 0, 65536);
        veinsPerChunkGraniteQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteQuartzOre", 2, 0, 65536);
        minHeightGraniteQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteQuartzOre", 0, 0, 256);
        maxHeightGraniteQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteQuartzOre", 32, 0, 256);
        isTempWhitelistGraniteQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteQuartzOre", false);
        temperatureBlacklistGraniteQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteQuartzOre", new ArrayList<String>());
        isBiomeWhitelistGraniteQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteQuartzOre", false);
        biomeBlacklistGraniteQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Vanilla (Netherrack) Quartz Ore").push("vanilla_netherrack_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaNetherQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaNetherQuartzOre", true);
        veinSizeVanillaNetherQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaNetherQuartzOre", 14, 0, 65536);
        veinsPerChunkVanillaNetherQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaNetherQuartzOre", 16, 0, 65536);
        minHeightVanillaNetherQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaNetherQuartzOre", 10, 0, 256);
        maxHeightVanillaNetherQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaNetherQuartzOre", 128, 0, 256);
        isTempWhitelistVanillaNetherQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaNetherQuartzOre", false);
        temperatureBlacklistVanillaNetherQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaNetherQuartzOre", new ArrayList<String>());
        isBiomeWhitelistVanillaNetherQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaNetherQuartzOre", false);
        biomeBlacklistVanillaNetherQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaNetherQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Quartz Ore").push("end_stone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneQuartzOre", true);
        veinSizeEndStoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneQuartzOre", 9, 0, 65536);
        veinsPerChunkEndStoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneQuartzOre", 2, 0, 65536);
        minHeightEndStoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneQuartzOre", 0, 0, 256);
        maxHeightEndStoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneQuartzOre", 64, 0, 256);
        isTempWhitelistEndStoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneQuartzOre", false);
        temperatureBlacklistEndStoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneQuartzOre", false);
        biomeBlacklistEndStoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Quartz Ore").push("sand_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandQuartzOre", true);
        veinSizeSandQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandQuartzOre", 9, 0, 65536);
        veinsPerChunkSandQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandQuartzOre", 2, 0, 65536);
        minHeightSandQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandQuartzOre", 0, 0, 256);
        maxHeightSandQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandQuartzOre", 128, 0, 256);
        isTempWhitelistSandQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandQuartzOre", false);
        temperatureBlacklistSandQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandQuartzOre", new ArrayList<String>());
        isBiomeWhitelistSandQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandQuartzOre", false);
        biomeBlacklistSandQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Quartz Ore").push("gravel_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelQuartzOre", true);
        veinSizeGravelQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelQuartzOre", 9, 0, 65536);
        veinsPerChunkGravelQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelQuartzOre", 2, 0, 65536);
        minHeightGravelQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelQuartzOre", 0, 0, 256);
        maxHeightGravelQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelQuartzOre", 128, 0, 256);
        isTempWhitelistGravelQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelQuartzOre", false);
        temperatureBlacklistGravelQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelQuartzOre", new ArrayList<String>());
        isBiomeWhitelistGravelQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelQuartzOre", false);
        biomeBlacklistGravelQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Quartz Ore").push("sandstone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneQuartzOre", true);
        veinSizeSandstoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneQuartzOre", 9, 0, 65536);
        veinsPerChunkSandstoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneQuartzOre", 2, 0, 65536);
        minHeightSandstoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneQuartzOre", 0, 0, 256);
        maxHeightSandstoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneQuartzOre", 128, 0, 256);
        isTempWhitelistSandstoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneQuartzOre", false);
        temperatureBlacklistSandstoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneQuartzOre", false);
        biomeBlacklistSandstoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Quartz Ore").push("red_sandstone_quartz_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneQuartzOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneQuartzOre", true);
        veinSizeRedSandstoneQuartzOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneQuartzOre", 9, 0, 65536);
        veinsPerChunkRedSandstoneQuartzOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneQuartzOre", 2, 0, 65536);
        minHeightRedSandstoneQuartzOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneQuartzOre", 0, 0, 256);
        maxHeightRedSandstoneQuartzOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneQuartzOre", 128, 0, 256);
        isTempWhitelistRedSandstoneQuartzOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneQuartzOre", false);
        temperatureBlacklistRedSandstoneQuartzOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneQuartzOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneQuartzOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneQuartzOre", false);
        biomeBlacklistRedSandstoneQuartzOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneQuartzOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Quartz.spec, Main.MOD_ID + "/quartz.toml");
    }
}
