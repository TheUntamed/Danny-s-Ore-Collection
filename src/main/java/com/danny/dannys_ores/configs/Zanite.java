package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Zanite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableZaniteOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceZaniteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockZaniteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockZaniteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateZaniteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateZaniteOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneZaniteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Zanite Ores").push("general");
        disableZaniteOres = BUILDER.comment("If false, all zanite ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Zanite Ore").push("stone_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkStoneZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightStoneZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightStoneZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistStoneZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Zanite Ore").push("andesite_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkAndesiteZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightAndesiteZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightAndesiteZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistAndesiteZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Zanite Ore").push("diorite_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkDioriteZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightDioriteZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightDioriteZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistDioriteZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Zanite Ore").push("granite_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkGraniteZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGraniteZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightGraniteZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistGraniteZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Zanite Ore").push("netherrack_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkNetherrackZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightNetherrackZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Zanite Ore").push("end_stone_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStoneZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEndStoneZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEndStoneZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Zanite Ore").push("sand_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightSandZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Zanite Ore").push("red_sand_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightRedSandZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Zanite Ore").push("gravel_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGravelZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightGravelZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Zanite Ore").push("sandstone_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstoneZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandstoneZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightSandstoneZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Zanite Ore").push("red_sandstone_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstoneZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandstoneZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightRedSandstoneZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Zanite Ore").push("blue_ice_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIceZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightBlueIceZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightBlueIceZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Zanite Ore").push("packed_ice_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIceZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightPackedIceZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightPackedIceZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Zanite Ore").push("bedrock_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightBedrockZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockZaniteOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockZaniteOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Zanite Ore (Quark)").push("quark_basalt_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkBasaltZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Zanite Ore (Quark)").push("quark_limestone_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkLimestoneZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkLimestoneZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkLimestoneZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Zanite Ore (Quark)").push("quark_jasper_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkJasperZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkJasperZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkJasperZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkJasperZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Zanite Ore (Quark)").push("quark_marble_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkMarbleZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkMarbleZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkMarbleZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkMarbleZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Zanite Ore (Quark)").push("quark_slate_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkSlateZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkSlateZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkSlateZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkSlateZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Zanite Ore (Embellishcraft)").push("embellishcraft_basalt_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftBasaltZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftBasaltZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Zanite Ore (Embellishcraft)").push("embellishcraft_gneiss_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftGneissZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftGneissZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Zanite Ore (Embellishcraft)").push("embellishcraft_jade_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftJadeZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftJadeZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftJadeZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Zanite Ore (Embellishcraft)").push("embellishcraft_larvikite_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Zanite Ore (Embellishcraft)").push("embellishcraft_marble_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftMarbleZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftMarbleZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftMarbleZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Zanite Ore (Embellishcraft)").push("embellishcraft_slate_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftSlateZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftSlateZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftSlateZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Zanite Ore").push("hardened_stone_zanite_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneZaniteOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneZaniteOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkHardenedStoneZaniteOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightHardenedStoneZaniteOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightHardenedStoneZaniteOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistHardenedStoneZaniteOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneZaniteOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneZaniteOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneZaniteOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Zanite.spec, Main.MOD_ID + "/zanite.toml");
    }
}
