package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Tertium {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableTertiumOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceTertiumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockTertiumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockTertiumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateTertiumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteTertiumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateTertiumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneTertiumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneTertiumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneTertiumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneTertiumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneTertiumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneTertiumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Tertium Ores").push("general");
        disableTertiumOres = BUILDER.comment("If false, all tertium ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Tertium Ore").push("stone_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkStoneTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightStoneTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistStoneTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Tertium Ore").push("andesite_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkAndesiteTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightAndesiteTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistAndesiteTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Tertium Ore").push("diorite_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkDioriteTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightDioriteTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistDioriteTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Tertium Ore").push("granite_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkGraniteTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightGraniteTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistGraniteTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Tertium Ore").push("netherrack_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkNetherrackTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightNetherrackTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightNetherrackTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Tertium Ore").push("end_stone_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEndStoneTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightEndStoneTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Tertium Ore").push("sand_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Tertium Ore").push("red_sand_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Tertium Ore").push("gravel_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGravelTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightGravelTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Tertium Ore").push("sandstone_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandstoneTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightSandstoneTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Tertium Ore").push("red_sandstone_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandstoneTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightRedSandstoneTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Tertium Ore").push("blue_ice_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBlueIceTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightBlueIceTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Tertium Ore").push("packed_ice_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkPackedIceTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightPackedIceTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Tertium Ore").push("bedrock_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockTertiumOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockTertiumOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Tertium Ore (Quark)").push("quark_basalt_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkBasaltTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 2, 0, 65536);
        minHeightQuarkBasaltTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 32, 0, 256);
        maxHeightQuarkBasaltTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Tertium Ore (Quark)").push("quark_limestone_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkQuarkLimestoneTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkLimestoneTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkLimestoneTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Tertium Ore (Quark)").push("quark_jasper_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkQuarkJasperTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkJasperTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkJasperTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Tertium Ore (Quark)").push("quark_marble_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkQuarkMarbleTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkMarbleTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkMarbleTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Tertium Ore (Quark)").push("quark_slate_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkQuarkSlateTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightQuarkSlateTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkSlateTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Tertium Ore (Embellishcraft)").push("embellishcraft_basalt_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftBasaltTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Tertium Ore (Embellishcraft)").push("embellishcraft_gneiss_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEmbellishcraftGneissTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftGneissTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Tertium Ore (Embellishcraft)").push("embellishcraft_jade_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEmbellishcraftJadeTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftJadeTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftJadeTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Tertium Ore (Embellishcraft)").push("embellishcraft_larvikite_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Tertium Ore (Embellishcraft)").push("embellishcraft_marble_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftMarbleTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftMarbleTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Tertium Ore (Embellishcraft)").push("embellishcraft_slate_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkEmbellishcraftSlateTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightEmbellishcraftSlateTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftSlateTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Tertium Ore").push("hardened_stone_tertium_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneTertiumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneTertiumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 2, 0, 65536);
        veinsPerChunkHardenedStoneTertiumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 4, 0, 65536);
        minHeightHardenedStoneTertiumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneTertiumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistHardenedStoneTertiumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneTertiumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneTertiumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneTertiumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Tertium.spec, Main.MOD_ID + "/tertium.toml");
    }
}
