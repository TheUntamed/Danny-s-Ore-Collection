package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Peridot {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disablePeridotOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStonePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeStonePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStonePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightStonePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightStonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStonePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableAndesitePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesitePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesitePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightAndesitePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesitePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesitePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesitePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesitePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesitePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableDioritePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeDioritePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioritePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightDioritePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightDioritePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioritePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioritePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioritePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioritePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableGranitePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeGranitePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGranitePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightGranitePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightGranitePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGranitePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGranitePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGranitePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGranitePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEndStonePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStonePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStonePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEndStonePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStonePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableSandPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeSandPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightSandPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightSandPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableGravelPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightGravelPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstonePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstonePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstonePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIcePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIcePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIcePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIcePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIcePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIcePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIcePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIcePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIcePeridotOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIcePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIcePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIcePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIcePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIcePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIcePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIcePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIcePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIcePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockPeridotOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockPeridotOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestonePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarblePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarblePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarblePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarblePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarblePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarblePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarblePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarblePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarblePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlatePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlatePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlatePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlatePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlatePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlatePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlatePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlatePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlatePeridotOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissPeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissPeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarblePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarblePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikitePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikitePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlatePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlatePeridotOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStonePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStonePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStonePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStonePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStonePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStonePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStonePeridotOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Peridot Ores").push("general");
        disablePeridotOres = BUILDER.comment("If false, all peridot ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Peridot Ore").push("stone_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStonePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStonePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkStonePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightStonePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightStonePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistStonePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStonePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStonePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStonePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Peridot Ore").push("andesite_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesitePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesitePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkAndesitePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightAndesitePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightAndesitePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistAndesitePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesitePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesitePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesitePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Peridot Ore").push("diorite_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioritePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioritePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkDioritePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightDioritePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightDioritePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistDioritePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioritePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioritePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioritePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Peridot Ore").push("granite_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGranitePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGranitePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkGranitePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGranitePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightGranitePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistGranitePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGranitePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGranitePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGranitePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Peridot Ore").push("netherrack_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
                veinsPerChunkNetherrackPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightNetherrackPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Peridot Ore").push("end_stone_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStonePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStonePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStonePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEndStonePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEndStonePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStonePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStonePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStonePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStonePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Peridot Ore").push("sand_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightSandPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Peridot Ore").push("red_sand_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightRedSandPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Peridot Ore").push("gravel_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGravelPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightGravelPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Peridot Ore").push("sandstone_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstonePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstonePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstonePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandstonePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightSandstonePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstonePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstonePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstonePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstonePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Peridot Ore").push("red_sandstone_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstonePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstonePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstonePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandstonePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightRedSandstonePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstonePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstonePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstonePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstonePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Peridot Ore").push("blue_ice_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIcePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIcePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIcePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightBlueIcePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightBlueIcePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIcePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIcePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIcePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIcePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Peridot Ore").push("packed_ice_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIcePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIcePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIcePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightPackedIcePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightPackedIcePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIcePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIcePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIcePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIcePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Peridot Ore").push("bedrock_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightBedrockPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockPeridotOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockPeridotOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Peridot Ore (Quark)").push("quark_basalt_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkBasaltPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Peridot Ore (Quark)").push("quark_limestone_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestonePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestonePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkLimestonePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkLimestonePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkLimestonePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkLimestonePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestonePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestonePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestonePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Peridot Ore (Quark)").push("quark_jasper_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkJasperPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkJasperPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkJasperPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkJasperPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Peridot Ore (Quark)").push("quark_marble_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarblePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarblePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkMarblePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkMarblePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkMarblePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkMarblePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarblePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarblePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarblePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Peridot Ore (Quark)").push("quark_slate_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlatePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlatePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkSlatePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkSlatePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkSlatePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkSlatePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlatePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlatePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlatePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Peridot Ore (Embellishcraft)").push("embellishcraft_basalt_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftBasaltPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftBasaltPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Peridot Ore (Embellishcraft)").push("embellishcraft_gneiss_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissPeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissPeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissPeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftGneissPeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftGneissPeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissPeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissPeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissPeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissPeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Peridot Ore (Embellishcraft)").push("embellishcraft_jade_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftJadePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftJadePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftJadePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Peridot Ore (Embellishcraft)").push("embellishcraft_larvikite_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikitePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikitePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikitePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftLarvikitePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftLarvikitePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikitePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikitePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikitePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikitePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Peridot Ore (Embellishcraft)").push("embellishcraft_marble_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarblePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarblePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarblePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftMarblePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftMarblePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftMarblePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarblePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarblePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarblePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Peridot Ore (Embellishcraft)").push("embellishcraft_slate_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlatePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlatePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlatePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftSlatePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftSlatePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftSlatePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlatePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlatePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlatePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Peridot Ore").push("hardened_stone_peridot_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStonePeridotOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStonePeridotOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkHardenedStonePeridotOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightHardenedStonePeridotOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightHardenedStonePeridotOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistHardenedStonePeridotOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStonePeridotOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStonePeridotOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStonePeridotOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Peridot.spec, Main.MOD_ID + "/peridot.toml");
    }
}
