package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Coal {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableCoalOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaCoalOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaCoalOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteCoalOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteCoalOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteCoalOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteCoalOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteCoalOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteCoalOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackCoalOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackCoalOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneCoalOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneCoalOre;

    public static ForgeConfigSpec.BooleanValue enableSandCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandCoalOre;
    public static ForgeConfigSpec.IntValue minHeightSandCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandCoalOre;

    public static ForgeConfigSpec.BooleanValue enableGravelCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelCoalOre;
    public static ForgeConfigSpec.IntValue minHeightGravelCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelCoalOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneCoalOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneCoalOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneCoalOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneCoalOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneCoalOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneCoalOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Coal Ores").push("coal_ores");
        enableCoalOres = BUILDER.comment("Enable or disable all Coal Ore variants.").define("enableCoalOres", true);
        BUILDER.comment("Vanilla (Stone) Coal Ore").push("vanilla_stone_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaCoalOre", true);
        veinSizeVanillaCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaCoalOre", 17, 0, 65536);
        veinsPerChunkVanillaCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaCoalOre", 20, 0, 65536);
        minHeightVanillaCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaCoalOre", 0, 0, 256);
        maxHeightVanillaCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaCoalOre", 128, 0, 256);
        isTempWhitelistVanillaCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaCoalOre", false);
        temperatureBlacklistVanillaCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaCoalOre", new ArrayList<String>());
        isBiomeWhitelistVanillaCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaCoalOre", false);
        biomeBlacklistVanillaCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Coal Ore").push("andesite_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteCoalOre", true);
        veinSizeAndesiteCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteCoalOre", 17, 0, 65536);
        veinsPerChunkAndesiteCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteCoalOre", 20, 0, 65536);
        minHeightAndesiteCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteCoalOre", 0, 0, 256);
        maxHeightAndesiteCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteCoalOre", 128, 0, 256);
        isTempWhitelistAndesiteCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteCoalOre", false);
        temperatureBlacklistAndesiteCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteCoalOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteCoalOre", false);
        biomeBlacklistAndesiteCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Coal Ore").push("diorite_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteCoalOre", true);
        veinSizeDioriteCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteCoalOre", 17, 0, 65536);
        veinsPerChunkDioriteCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteCoalOre", 20, 0, 65536);
        minHeightDioriteCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteCoalOre", 0, 0, 256);
        maxHeightDioriteCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteCoalOre", 128, 0, 256);
        isTempWhitelistDioriteCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteCoalOre", false);
        temperatureBlacklistDioriteCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteCoalOre", new ArrayList<String>());
        isBiomeWhitelistDioriteCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteCoalOre", false);
        biomeBlacklistDioriteCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Coal Ore").push("granite_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteCoalOre", true);
        veinSizeGraniteCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteCoalOre", 17, 0, 65536);
        veinsPerChunkGraniteCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteCoalOre", 20, 0, 65536);
        minHeightGraniteCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteCoalOre", 0, 0, 256);
        maxHeightGraniteCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteCoalOre", 128, 0, 256);
        isTempWhitelistGraniteCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteCoalOre", false);
        temperatureBlacklistGraniteCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteCoalOre", new ArrayList<String>());
        isBiomeWhitelistGraniteCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteCoalOre", false);
        biomeBlacklistGraniteCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Coal Ore").push("netherrack_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackCoalOre", true);
        veinSizeNetherrackCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackCoalOre", 17, 0, 65536);
        veinsPerChunkNetherrackCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackCoalOre", 20, 0, 65536);
        minHeightNetherrackCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackCoalOre", 10, 0, 256);
        maxHeightNetherrackCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackCoalOre", 128, 0, 256);
        isTempWhitelistNetherrackCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackCoalOre", false);
        temperatureBlacklistNetherrackCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackCoalOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackCoalOre", false);
        biomeBlacklistNetherrackCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Coal Ore").push("end_stone_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneCoalOre", true);
        veinSizeEndStoneCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneCoalOre", 8, 0, 65536);
        veinsPerChunkEndStoneCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneCoalOre", 10, 0, 65536);
        minHeightEndStoneCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneCoalOre", 10, 0, 256);
        maxHeightEndStoneCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneCoalOre", 128, 0, 256);
        isTempWhitelistEndStoneCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneCoalOre", false);
        temperatureBlacklistEndStoneCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneCoalOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneCoalOre", false);
        biomeBlacklistEndStoneCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Coal Ore").push("sand_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandCoalOre", true);
        veinSizeSandCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandCoalOre", 8, 0, 65536);
        veinsPerChunkSandCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandCoalOre", 10, 0, 65536);
        minHeightSandCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandCoalOre", 0, 0, 256);
        maxHeightSandCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandCoalOre", 128, 0, 256);
        isTempWhitelistSandCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandCoalOre", false);
        temperatureBlacklistSandCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandCoalOre", new ArrayList<String>());
        isBiomeWhitelistSandCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandCoalOre", false);
        biomeBlacklistSandCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Coal Ore").push("gravel_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelCoalOre", true);
        veinSizeGravelCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelCoalOre", 8, 0, 65536);
        veinsPerChunkGravelCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelCoalOre", 10, 0, 65536);
        minHeightGravelCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelCoalOre", 0, 0, 256);
        maxHeightGravelCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelCoalOre", 128, 0, 256);
        isTempWhitelistGravelCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelCoalOre", false);
        temperatureBlacklistGravelCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelCoalOre", new ArrayList<String>());
        isBiomeWhitelistGravelCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelCoalOre", false);
        biomeBlacklistGravelCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Coal Ore").push("sandstone_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneCoalOre", true);
        veinSizeSandstoneCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneCoalOre", 8, 0, 65536);
        veinsPerChunkSandstoneCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneCoalOre", 10, 0, 65536);
        minHeightSandstoneCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneCoalOre", 0, 0, 256);
        maxHeightSandstoneCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneCoalOre", 128, 0, 256);
        isTempWhitelistSandstoneCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneCoalOre", false);
        temperatureBlacklistSandstoneCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneCoalOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneCoalOre", false);
        biomeBlacklistSandstoneCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Coal Ore").push("red_sandstone_coal_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneCoalOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneCoalOre", true);
        veinSizeRedSandstoneCoalOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneCoalOre", 8, 0, 65536);
        veinsPerChunkRedSandstoneCoalOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneCoalOre", 10, 0, 65536);
        minHeightRedSandstoneCoalOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneCoalOre", 0, 0, 256);
        maxHeightRedSandstoneCoalOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneCoalOre", 128, 0, 256);
        isTempWhitelistRedSandstoneCoalOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneCoalOre", false);
        temperatureBlacklistRedSandstoneCoalOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneCoalOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneCoalOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneCoalOre", false);
        biomeBlacklistRedSandstoneCoalOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneCoalOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Coal.spec, Main.MOD_ID + "/coal.toml");
    }
}
