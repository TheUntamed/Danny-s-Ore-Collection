package com.danny.dannys_ores.configs.dense_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DensePyrite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDensePyriteOres;

    // StoneDense
    public static ForgeConfigSpec.BooleanValue enableStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDensePyriteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDensePyriteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDensePyriteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDensePyriteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDensePyriteOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDensePyriteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDensePyriteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Pyrite Ores").push(PathHandler.getGeneralPath());
        disableDensePyriteOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Dense Pyrite Ore").push("stone_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkStoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStoneDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightStoneDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistStoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Pyrite Ore").push("andesite_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Pyrite Ore").push("diorite_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Pyrite Ore").push("granite_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Pyrite Ore").push("netherrack_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Pyrite Ore").push("end_stone_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Pyrite Ore").push("sand_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightSandDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Pyrite Ore").push("red_sand_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Pyrite Ore").push("gravel_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkGravelDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightGravelDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Pyrite Ore").push("sandstone_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Pyrite Ore").push("red_sandstone_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Pyrite Ore").push("blue_ice_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Pyrite Ore").push("packed_ice_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkPackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightPackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Pyrite Ore").push("bedrock_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDensePyriteOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense Pyrite Ore (Quark)").push("quark_basalt_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense Pyrite Ore (Quark)").push("quark_limestone_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense Pyrite Ore (Quark)").push("quark_jasper_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Pyrite Ore (Quark)").push("quark_marble_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Pyrite Ore (Quark)").push("quark_slate_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense Pyrite Ore (Embellishcraft)").push("embellishcraft_basalt_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense Pyrite Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense Pyrite Ore (Embellishcraft)").push("embellishcraft_jade_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense Pyrite Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Pyrite Ore (Embellishcraft)").push("embellishcraft_marble_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Pyrite Ore (Embellishcraft)").push("embellishcraft_slate_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Pyrite Ore").push("hardened_stone_dense_pyrite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDensePyriteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DensePyrite.spec, path + "/dense_pyrite.toml");
    }
}
