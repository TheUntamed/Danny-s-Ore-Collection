package com.danny.dannys_ores.configs.dense_ores.other;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DenseXp {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDenseXpOres;

    public static ForgeConfigSpec.BooleanValue enableStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpStoneDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpAndesiteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpAndesiteDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpDioriteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpDioriteDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpGraniteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpGraniteDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpNetherrackDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpNetherrackDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpEndStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpEndStoneDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpSandDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpGravelDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpGravelDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandstoneDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandstoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandstoneDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpBlueIceDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpBlueIceDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpPackedIceDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpPackedIceDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDenseXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpBedrockDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpBedrockDenseXpOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkBasaltDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkLimestoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkLimestoneDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkJasperDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkJasperDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkMarbleDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkSlateDenseXpOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftBasaltDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftBasaltDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftGneissDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftGneissDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftJadeDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftJadeDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftMarbleDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftMarbleDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftLarvikiteDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftLarvikiteDenseXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftSlateDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftSlateDenseXpOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue minXpHardenedStoneDenseXpOre;
    public static ForgeConfigSpec.IntValue maxXpHardenedStoneDenseXpOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Xp Ores").push(PathHandler.getGeneralPath());
        disableDenseXpOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Dense Xp Ore").push("stone_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkStoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightStoneDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightStoneDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistStoneDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpStoneDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpStoneDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Xp Ore").push("andesite_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpAndesiteDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpAndesiteDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Xp Ore").push("diorite_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkDioriteDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightDioriteDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightDioriteDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistDioriteDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpDioriteDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpDioriteDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Xp Ore").push("granite_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGraniteDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightGraniteDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightGraniteDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGraniteDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpGraniteDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpGraniteDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Xp Ore").push("netherrack_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpNetherrackDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpNetherrackDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Xp Ore").push("end_stone_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEndStoneDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpEndStoneDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Xp Ore").push("sand_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightSandDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightSandDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpSandDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpSandDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Xp Ore").push("red_sand_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightRedSandDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightRedSandDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpRedSandDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpRedSandDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Xp Ore").push("gravel_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkGravelDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightGravelDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightGravelDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpGravelDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpGravelDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Xp Ore").push("sandstone_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpSandstoneDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpSandstoneDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Xp Ore").push("red__sandstone_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpRedSandstoneDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpRedSandstoneDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Xp Ore").push("blue_ice_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpBlueIceDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpBlueIceDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Xp Ore").push("packed_ice_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkPackedIceDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightPackedIceDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightPackedIceDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpPackedIceDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpPackedIceDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Xp Ore").push("bedrock_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 20, 0, 256);
        maxHeightBedrockDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 556, 0, 256);
        isTempWhitelistBedrockDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDenseXpOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpBedrockDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpBedrockDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense Xp Ore (Quark)").push("quark_basalt_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 96, 0, 256);
        isTempWhitelistQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkBasaltDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpQuarkBasaltDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense Xp Ore (Quark)").push("quark_limestone_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkLimestoneDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpQuarkLimestoneDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense Xp Ore (Quark)").push("quark_jasper_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkJasperDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpQuarkJasperDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Xp Ore (Quark)").push("quark_marble_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkMarbleDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpQuarkMarbleDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Xp Ore (Quark)").push("quark_slate_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpQuarkSlateDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpQuarkSlateDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense Xp Ore (Embellishcraft)").push("embellishcraft_basalt_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftBasaltDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpEmbellishcraftBasaltDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense Xp Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftGneissDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpEmbellishcraftGneissDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense Xp Ore (Embellishcraft)").push("embellishcraft_jade_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftJadeDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpEmbellishcraftJadeDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense Xp Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpEmbellishcraftLarvikiteDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Xp Ore (Embellishcraft)").push("embellishcraft_marble_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftMarbleDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpEmbellishcraftMarbleDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Xp Ore (Embellishcraft)").push("embellishcraft_slate_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 11, 0, 65536);
        minHeightEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpEmbellishcraftSlateDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpEmbellishcraftSlateDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Xp Ore").push("hardened_stone_dense_xp_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 20, 0, 65536);
        minHeightHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 40, 0, 256);
        maxHeightHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDenseXpOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push(PathHandler.getPropertiesPath());
        minXpHardenedStoneDenseXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDrop", 20, 0, 1000000);
        maxXpHardenedStoneDenseXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDrop", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DenseXp.spec, path + "/dense_xp.toml");
    }
}
