package com.danny.dannys_ores.configs.dense_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DenseElectrotine {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDenseElectrotineOres;

    public static ForgeConfigSpec.BooleanValue enableStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDenseElectrotineOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDenseElectrotineOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDenseElectrotineOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDenseElectrotineOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDenseElectrotineOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDenseElectrotineOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Electrotine Ores").push(PathHandler.getGeneralPath());
        disableDenseElectrotineOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Dense Electrotine Ore").push("stone_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Electrotine Ore").push("andesite_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Electrotine Ore").push("diorite_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Electrotine Ore").push("granite_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Electrotine Ore").push("netherrack_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Electrotine Ore").push("end_stone_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Electrotine Ore").push("sand_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Electrotine Ore").push("red_sand_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Electrotine Ore").push("gravel_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Electrotine Ore").push("sandstone_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Electrotine Ore").push("red_sandstone_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Electrotine Ore").push("blue_ice_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Electrotine Ore").push("packed_ice_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkPackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightPackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Electrotine Ore").push("bedrock_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDenseElectrotineOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense Electrotine Ore (Quark)").push("quark_basalt_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 96, 0, 256);
        maxHeightQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense Electrotine Ore (Quark)").push("quark_limestone_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense Electrotine Ore (Quark)").push("quark_jasper_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Electrotine Ore (Quark)").push("quark_marble_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Electrotine Ore (Quark)").push("quark_slate_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense Electrotine Ore (Embellishcraft)").push("embellishcraft_basalt_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense Electrotine Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense Electrotine Ore (Embellishcraft)").push("embellishcraft_jade_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense Electrotine Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Electrotine Ore (Embellishcraft)").push("embellishcraft_marble_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Electrotine Ore (Embellishcraft)").push("embellishcraft_slate_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Electrotine Ore").push("hardened_stone_dense_electrotine_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 8, 0, 65536);
        minHeightHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 16, 0, 256);
        isTempWhitelistHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDenseElectrotineOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DenseElectrotine.spec, path + "/dense_electrotine.toml");
    }
}
