package com.danny.dannys_ores.configs.dense_ores.vanilla;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DenseQuartz {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDenseQuartzOres;

    public static ForgeConfigSpec.BooleanValue enableStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDenseQuartzOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDenseQuartzOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDenseQuartzOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDenseQuartzOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDenseQuartzOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDenseQuartzOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDenseQuartzOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Quartz Ores").push(PathHandler.getGeneralPath());
        disableDenseQuartzOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Dense Quartz Ore").push("stone_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Quartz Ore").push("andesite_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Quartz Ore").push("diorite_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Quartz Ore").push("granite_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Quartz Ore").push("netherrack_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 14, 0, 65536);
        veinsPerChunkNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Quartz Ore").push("end_stone_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Quartz Ore").push("sand_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkSandDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Quartz Ore").push("red_sand_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Quartz Ore").push("gravel_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Quartz Ore").push("sandstone_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Quartz Ore").push("red_sandstone_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Quartz Ore").push("blue_ice_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Quartz Ore").push("packed_ice_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 5, 0, 65536);
        veinsPerChunkPackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightPackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Quartz Ore").push("bedrock_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDenseQuartzOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense Quartz Ore (Quark)").push("quark_basalt_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 14, 0, 65536);
        veinsPerChunkQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 16, 0, 65536);
        minHeightQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense Quartz Ore (Quark)").push("quark_limestone_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense Quartz Ore (Quark)").push("quark_jasper_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Quartz Ore (Quark)").push("quark_marble_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Quartz Ore (Quark)").push("quark_slate_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense Quartz Ore (Embellishcraft)").push("embellishcraft_basalt_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense Quartz Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense Quartz Ore (Embellishcraft)").push("embellishcraft_jade_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense Quartz Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Quartz Ore (Embellishcraft)").push("embellishcraft_marble_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Quartz Ore (Embellishcraft)").push("embellishcraft_slate_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Quartz Ore").push("hardened_stone_dense_quartz_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 9, 0, 65536);
        veinsPerChunkHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 32, 0, 256);
        isTempWhitelistHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDenseQuartzOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DenseQuartz.spec, path + "/dense_quartz.toml");
    }
}
