package com.danny.dannys_ores.configs.dense_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DenseZanite {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDenseZaniteOres;

    // StoneDense
    public static ForgeConfigSpec.BooleanValue enableStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDenseZaniteOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDenseZaniteOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDenseZaniteOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDenseZaniteOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDenseZaniteOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDenseZaniteOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDenseZaniteOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Zanite Ores").push(PathHandler.getGeneralPath());
        disableDenseZaniteOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Dense Zanite Ore").push("stone_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Zanite Ore").push("andesite_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Zanite Ore").push("diorite_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Zanite Ore").push("granite_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Zanite Ore").push("netherrack_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Zanite Ore").push("end_stone_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Zanite Ore").push("sand_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightSandDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Zanite Ore").push("red_sand_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Zanite Ore").push("gravel_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Zanite Ore").push("sandstone_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Zanite Ore").push("red_sandstone_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Zanite Ore").push("blue_ice_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Zanite Ore").push("packed_ice_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkPackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightPackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Zanite Ore").push("bedrock_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDenseZaniteOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense Zanite Ore (Quark)").push("quark_basalt_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense Zanite Ore (Quark)").push("quark_limestone_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense Zanite Ore (Quark)").push("quark_jasper_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Zanite Ore (Quark)").push("quark_marble_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Zanite Ore (Quark)").push("quark_slate_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense Zanite Ore (Embellishcraft)").push("embellishcraft_basalt_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense Zanite Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense Zanite Ore (Embellishcraft)").push("embellishcraft_jade_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense Zanite Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Zanite Ore (Embellishcraft)").push("embellishcraft_marble_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Zanite Ore (Embellishcraft)").push("embellishcraft_slate_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Zanite Ore").push("hardened_stone_dense_zanite_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDenseZaniteOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DenseZanite.spec, path + "/dense_zanite.toml");
    }
}
