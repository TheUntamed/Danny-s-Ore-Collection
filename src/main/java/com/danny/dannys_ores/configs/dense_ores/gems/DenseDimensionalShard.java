package com.danny.dannys_ores.configs.dense_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DenseDimensionalShard {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDenseDimensionalShardOres;

    public static ForgeConfigSpec.BooleanValue enableStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDenseDimensionalShardOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDenseDimensionalShardOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDenseDimensionalShardOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDenseDimensionalShardOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDenseDimensionalShardOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDenseDimensionalShardOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Dimensional Shard Ores").push(PathHandler.getGeneralPath());
        disableDenseDimensionalShardOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone (StoneDense) Dimensional Shard Ore").push("stone_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Dimensional Shard Ore").push("andesite_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Dimensional Shard Ore").push("diorite_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Dimensional Shard Ore").push("granite_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Dimensional Shard Ore").push("netherrack_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Dimensional Shard Ore").push("end_stone_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Dimensional Shard Ore").push("sand_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Dimensional Shard Ore").push("red_sand_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Dimensional Shard Ore").push("gravel_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Dimensional Shard Ore").push("sandstone_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Dimensional Shard Ore").push("red_sandstone_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Dimensional Shard Ore").push("blue_ice_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Dimensional Shard Ore").push("packed_ice_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkPackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightPackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightPackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Dimensional Shard Ore").push("bedrock_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense DimensionalShard Ore (Quark)").push("quark_basalt_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 4, 0, 65536);
        veinsPerChunkQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 2, 0, 65536);
        minHeightQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 64, 0, 256);
        maxHeightQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense DimensionalShard Ore (Quark)").push("quark_limestone_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense DimensionalShard Ore (Quark)").push("quark_jasper_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense DimensionalShard Ore (Quark)").push("quark_marble_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense DimensionalShard Ore (Quark)").push("quark_slate_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense DimensionalShard Ore (Embellishcraft)").push("embellishcraft_basalt_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense DimensionalShard Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense DimensionalShard Ore (Embellishcraft)").push("embellishcraft_jade_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense DimensionalShard Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense DimensionalShard Ore (Embellishcraft)").push("embellishcraft_marble_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense DimensionalShard Ore (Embellishcraft)").push("embellishcraft_slate_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Dimensional Shard Ore").push("hardened_stone_dense_dimensional_shard_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 8, 0, 65536);
        veinsPerChunkHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 40, 0, 256);
        isTempWhitelistHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDenseDimensionalShardOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DenseDimensionalShard.spec, path + "/dense_dimensional_shard.toml");
    }
}
