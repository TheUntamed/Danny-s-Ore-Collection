package com.danny.dannys_ores.configs.dense_ores.other;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DenseMithril {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDenseMithrilOres;

    public static ForgeConfigSpec.BooleanValue enableStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDenseMithrilOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDenseMithrilOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDenseMithrilOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDenseMithrilOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDenseMithrilOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDenseMithrilOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDenseMithrilOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Mithril Ores").push(PathHandler.getGeneralPath());
        disableDenseMithrilOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Dense Mithril Ore").push("stone_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Mithril Ore").push("andesite_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Mithril Ore").push("diorite_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Mithril Ore").push("granite_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Mithril Ore").push("netherrack_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Mithril Ore").push("end_stone_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 58, 0, 256);
        isTempWhitelistEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Mithril Ore").push("sand_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkSandDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightSandDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightSandDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Mithril Ore").push("red_sand_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Mithril Ore").push("gravel_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Mithril Ore").push("sandstone_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Mithril Ore").push("red_sandstone_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Mithril Ore").push("blue_ice_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Mithril Ore").push("packed_ice_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkPackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightPackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightPackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Mithril Ore").push("bedrock_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDenseMithrilOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense Mithril Ore (Quark)").push("quark_basalt_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 32, 0, 256);
        maxHeightQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense Mithril Ore (Quark)").push("quark_limestone_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense Mithril Ore (Quark)").push("quark_jasper_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Mithril Ore (Quark)").push("quark_marble_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Mithril Ore (Quark)").push("quark_slate_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense Mithril Ore (Embellishcraft)").push("embellishcraft_basalt_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense Mithril Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense Mithril Ore (Embellishcraft)").push("embellishcraft_jade_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense Mithril Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Mithril Ore (Embellishcraft)").push("embellishcraft_marble_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Mithril Ore (Embellishcraft)").push("embellishcraft_slate_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Mithril Ore").push("hardened_stone_dense_mithril_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 7, 0, 65536);
        veinsPerChunkHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 1, 0, 65536);
        minHeightHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 16, 0, 256);
        maxHeightHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 48, 0, 256);
        isTempWhitelistHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDenseMithrilOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DenseMithril.spec, path + "/dense_mithril.toml");
    }
}
