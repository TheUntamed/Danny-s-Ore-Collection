package com.danny.dannys_ores.configs.dense_ores.gems;

import com.danny.dannys_ores.util.PathHandler;
import com.danny.dannys_ores.util.CommentHandler;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class DensePeridot {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableDensePeridotOres;

    // StoneDense
    public static ForgeConfigSpec.BooleanValue enableStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightSandDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableGravelDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightGravelDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockDensePeridotOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockDensePeridotOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateDensePeridotOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteDensePeridotOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateDensePeridotOre;

    // Danny's Stone Dense Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneDensePeridotOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneDensePeridotOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Dense Peridot Ores").push(PathHandler.getGeneralPath());
        disableDensePeridotOres = BUILDER.comment(CommentHandler.getDisableAllVariantsComment()).define(PathHandler.getDisableAllVariantsPath(), false);
        BUILDER.comment("Stone Dense Peridot Ore").push("stone_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableStoneDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeStoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkStoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightStoneDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightStoneDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistStoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistStoneDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistStoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistStoneDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Dense Peridot Ore").push("andesite_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistAndesiteDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Dense Peridot Ore").push("diorite_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistDioriteDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Dense Peridot Ore").push("granite_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGraniteDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Dense Peridot Ore").push("netherrack_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistNetherrackDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Dense Peridot Ore").push("end_stone_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEndStoneDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Dense Peridot Ore").push("sand_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightSandDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Dense Peridot Ore").push("red_sand_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Dense Peridot Ore").push("gravel_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableGravelDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeGravelDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkGravelDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightGravelDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightGravelDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistGravelDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistGravelDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistGravelDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistGravelDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Dense Peridot Ore").push("sandstone_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Dense Peridot Ore").push("red_sandstone_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistRedSandstoneDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Dense Peridot Ore").push("blue_ice_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBlueIceDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Dense Peridot Ore").push("packed_ice_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enablePackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizePackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkPackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightPackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightPackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistPackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistPackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistPackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistPackedIceDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Dense Peridot Ore").push("bedrock_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 1, 0, 65536);
        veinsPerChunkBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 4, 0, 65536);
        minHeightBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 256, 0, 256);
        isTempWhitelistBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment(CommentHandler.getPropertiesComment()).push(PathHandler.getPropertiesPath());
        resistanceBedrockDensePeridotOre = BUILDER.comment(CommentHandler.getResistanceComment()).defineInRange(PathHandler.getResistancePath(), 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Dense Peridot Ore (Quark)").push("quark_basalt_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 3, 0, 65536);
        veinsPerChunkQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 0, 0, 256);
        maxHeightQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 128, 0, 256);
        isTempWhitelistQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Lime Stone Dense Peridot Ore (Quark)").push("quark_limestone_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkLimestoneDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Dense Peridot Ore (Quark)").push("quark_jasper_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkJasperDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Peridot Ore (Quark)").push("quark_marble_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Peridot Ore (Quark)").push("quark_slate_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistQuarkSlateDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Dense Peridot Ore (Embellishcraft)").push("embellishcraft_basalt_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftBasaltDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Dense Peridot Ore (Embellishcraft)").push("embellishcraft_gneiss_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftGneissDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Dense Peridot Ore (Embellishcraft)").push("embellishcraft_jade_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftJadeDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Dense Peridot Ore (Embellishcraft)").push("embellishcraft_larvikite_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftLarvikiteDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Dense Peridot Ore (Embellishcraft)").push("embellishcraft_marble_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftMarbleDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Dense Peridot Ore (Embellishcraft)").push("embellishcraft_slate_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistEmbellishcraftSlateDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Dense Variants
        BUILDER.comment("Hardened Stone Dense Peridot Ore").push("hardened_stone_dense_peridot_ore");
        BUILDER.comment(CommentHandler.getGenerationComment()).push(PathHandler.getGenerationPath());
        enableHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getEnableVariantComment()).define(PathHandler.getEnableVariantPath(), true);
        veinSizeHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinSizeComment()).defineInRange(PathHandler.getVeinSizePath(), 6, 0, 65536);
        veinsPerChunkHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getVeinsPerChunkComment()).defineInRange(PathHandler.getVeinsPerChunkPath(), 3, 0, 65536);
        minHeightHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getMinHeightComment()).defineInRange(PathHandler.getMinHeightPath(), 8, 0, 256);
        maxHeightHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getMaxHeightComment()).defineInRange(PathHandler.getMaxHeightPath(), 64, 0, 256);
        isTempWhitelistHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsTempWhitelistComment()).define(PathHandler.getIsTempWhitelistPath(), false);
        temperatureBlacklistHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getTemperatureBlacklistComment()).define(PathHandler.getTemperatureBlacklistPath(), new ArrayList<String>());
        isBiomeWhitelistHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getIsBiomeWhitelistComment()).define(PathHandler.getIsBiomeWhitelistPath(), false);
        biomeBlacklistHardenedStoneDensePeridotOre = BUILDER.comment(CommentHandler.getBiomeBlacklistComment()).define(PathHandler.getBiomeBlacklistPath(), new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig(String path) {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, DensePeridot.spec, path + "/dense_peridot.toml");
    }
}
