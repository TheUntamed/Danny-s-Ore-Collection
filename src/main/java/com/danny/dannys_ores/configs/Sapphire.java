package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Sapphire {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableSapphireOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightStoneSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableSandSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeSandSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightSandSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightSandSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableGravelSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightGravelSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceSapphireOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockSapphireOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockSapphireOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateSapphireOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteSapphireOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateSapphireOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneSapphireOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneSapphireOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneSapphireOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneSapphireOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneSapphireOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneSapphireOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Sapphire Ores").push("general");
        disableSapphireOres = BUILDER.comment("If false, all sapphire ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Sapphire Ore").push("stone_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkStoneSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightStoneSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightStoneSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistStoneSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Sapphire Ore").push("andesite_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkAndesiteSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightAndesiteSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightAndesiteSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistAndesiteSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Sapphire Ore").push("diorite_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkDioriteSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightDioriteSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightDioriteSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistDioriteSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Sapphire Ore").push("granite_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkGraniteSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGraniteSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightGraniteSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistGraniteSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Sapphire Ore").push("netherrack_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkNetherrackSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightNetherrackSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Sapphire Ore").push("end_stone_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkEndStoneSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEndStoneSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEndStoneSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Sapphire Ore").push("sand_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightSandSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Sapphire Ore").push("red_sand_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightRedSandSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Sapphire Ore").push("gravel_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkGravelSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightGravelSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightGravelSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Sapphire Ore").push("sandstone_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkSandstoneSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightSandstoneSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightSandstoneSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Sapphire Ore").push("red_sandstone_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkRedSandstoneSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightRedSandstoneSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightRedSandstoneSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Sapphire Ore").push("blue_ice_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkBlueIceSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightBlueIceSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightBlueIceSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Sapphire Ore").push("packed_ice_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkPackedIceSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightPackedIceSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightPackedIceSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Sapphire Ore").push("bedrock_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightBedrockSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockSapphireOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockSapphireOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Sapphire Ore (Quark)").push("quark_basalt_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 3, 0, 65536);
        veinsPerChunkQuarkBasaltSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkBasaltSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Sapphire Ore (Quark)").push("quark_limestone_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkLimestoneSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkLimestoneSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkLimestoneSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkLimestoneSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Sapphire Ore (Quark)").push("quark_jasper_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkJasperSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkJasperSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkJasperSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkJasperSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Sapphire Ore (Quark)").push("quark_marble_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkMarbleSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkMarbleSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkMarbleSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkMarbleSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Sapphire Ore (Quark)").push("quark_slate_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkQuarkSlateSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightQuarkSlateSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightQuarkSlateSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistQuarkSlateSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Sapphire Ore (Embellishcraft)").push("embellishcraft_basalt_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftBasaltSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftBasaltSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftBasaltSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Sapphire Ore (Embellishcraft)").push("embellishcraft_gneiss_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftGneissSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftGneissSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftGneissSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftGneissSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Sapphire Ore (Embellishcraft)").push("embellishcraft_jade_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftJadeSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftJadeSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftJadeSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftJadeSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Sapphire Ore (Embellishcraft)").push("embellishcraft_larvikite_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Sapphire Ore (Embellishcraft)").push("embellishcraft_marble_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftMarbleSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftMarbleSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftMarbleSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Sapphire Ore (Embellishcraft)").push("embellishcraft_slate_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkEmbellishcraftSlateSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightEmbellishcraftSlateSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightEmbellishcraftSlateSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistEmbellishcraftSlateSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Sapphire Ore").push("hardened_stone_sapphire_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneSapphireOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneSapphireOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 6, 0, 65536);
        veinsPerChunkHardenedStoneSapphireOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 3, 0, 65536);
        minHeightHardenedStoneSapphireOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 8, 0, 256);
        maxHeightHardenedStoneSapphireOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 64, 0, 256);
        isTempWhitelistHardenedStoneSapphireOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneSapphireOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneSapphireOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneSapphireOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Sapphire.spec, Main.MOD_ID + "/sapphire.toml");
    }
}
