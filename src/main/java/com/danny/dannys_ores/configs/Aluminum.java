package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Aluminum {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableAluminumOres;

    public static ForgeConfigSpec.BooleanValue enableStoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightStoneAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableSandAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightSandAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableGravelAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightGravelAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceAluminumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceAluminumOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceAluminumOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockAluminumOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockAluminumOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateAluminumOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteAluminumOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateAluminumOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneAluminumOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneAluminumOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneAluminumOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneAluminumOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneAluminumOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneAluminumOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Aluminum Ores").push("aluminum_ores");
        enableAluminumOres = BUILDER.comment("Enable or disable all Aluminum Ore variants.").define("enableAluminumOres", true);
        BUILDER.comment("Stone Aluminum Ore").push("stone_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneAluminumOre", true);
        veinSizeStoneAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneAluminumOre", 4, 0, 65536);
        veinsPerChunkStoneAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneAluminumOre", 4, 0, 65536);
        minHeightStoneAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneAluminumOre", 20, 0, 256);
        maxHeightStoneAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneAluminumOre", 50, 0, 256);
        isTempWhitelistStoneAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneAluminumOre", false);
        temperatureBlacklistStoneAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneAluminumOre", new ArrayList<String>());
        isBiomeWhitelistStoneAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneAluminumOre", false);
        biomeBlacklistStoneAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Aluminum Ore").push("andesite_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteAluminumOre", true);
        veinSizeAndesiteAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteAluminumOre", 4, 0, 65536);
        veinsPerChunkAndesiteAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteAluminumOre", 4, 0, 65536);
        minHeightAndesiteAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteAluminumOre", 20, 0, 256);
        maxHeightAndesiteAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteAluminumOre", 50, 0, 256);
        isTempWhitelistAndesiteAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteAluminumOre", false);
        temperatureBlacklistAndesiteAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteAluminumOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteAluminumOre", false);
        biomeBlacklistAndesiteAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Aluminum Ore").push("diorite_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteAluminumOre", true);
        veinSizeDioriteAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteAluminumOre", 4, 0, 65536);
        veinsPerChunkDioriteAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteAluminumOre", 4, 0, 65536);
        minHeightDioriteAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteAluminumOre", 20, 0, 256);
        maxHeightDioriteAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteAluminumOre", 50, 0, 256);
        isTempWhitelistDioriteAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteAluminumOre", false);
        temperatureBlacklistDioriteAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteAluminumOre", new ArrayList<String>());
        isBiomeWhitelistDioriteAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteAluminumOre", false);
        biomeBlacklistDioriteAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Aluminum Ore").push("granite_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteAluminumOre", true);
        veinSizeGraniteAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteAluminumOre", 4, 0, 65536);
        veinsPerChunkGraniteAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteAluminumOre", 4, 0, 65536);
        minHeightGraniteAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteAluminumOre", 20, 0, 256);
        maxHeightGraniteAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteAluminumOre", 50, 0, 256);
        isTempWhitelistGraniteAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteAluminumOre", false);
        temperatureBlacklistGraniteAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteAluminumOre", new ArrayList<String>());
        isBiomeWhitelistGraniteAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteAluminumOre", false);
        biomeBlacklistGraniteAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Aluminum Ore").push("netherrack_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackAluminumOre", true);
        veinSizeNetherrackAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackAluminumOre", 4, 0, 65536);
        veinsPerChunkNetherrackAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackAluminumOre", 4, 0, 65536);
        minHeightNetherrackAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackAluminumOre", 10, 0, 256);
        maxHeightNetherrackAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackAluminumOre", 96, 0, 256);
        isTempWhitelistNetherrackAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackAluminumOre", false);
        temperatureBlacklistNetherrackAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackAluminumOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackAluminumOre", false);
        biomeBlacklistNetherrackAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Aluminum Ore").push("end_stone_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneAluminumOre", true);
        veinSizeEndStoneAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneAluminumOre", 4, 0, 65536);
        veinsPerChunkEndStoneAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneAluminumOre", 4, 0, 65536);
        minHeightEndStoneAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneAluminumOre", 60, 0, 256);
        maxHeightEndStoneAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneAluminumOre", 128, 0, 256);
        isTempWhitelistEndStoneAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneAluminumOre", false);
        temperatureBlacklistEndStoneAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneAluminumOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneAluminumOre", false);
        biomeBlacklistEndStoneAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Aluminum Ore").push("sand_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandAluminumOre", true);
        veinSizeSandAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandAluminumOre", 4, 0, 65536);
        veinsPerChunkSandAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandAluminumOre", 4, 0, 65536);
        minHeightSandAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandAluminumOre", 20, 0, 256);
        maxHeightSandAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandAluminumOre", 128, 0, 256);
        isTempWhitelistSandAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandAluminumOre", false);
        temperatureBlacklistSandAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandAluminumOre", new ArrayList<String>());
        isBiomeWhitelistSandAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandAluminumOre", false);
        biomeBlacklistSandAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Aluminum Ore").push("red_sand_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandAluminumOre", true);
        veinSizeRedSandAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandAluminumOre", 4, 0, 65536);
        veinsPerChunkRedSandAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandAluminumOre", 4, 0, 65536);
        minHeightRedSandAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandAluminumOre", 20, 0, 256);
        maxHeightRedSandAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandAluminumOre", 128, 0, 256);
        isTempWhitelistRedSandAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandAluminumOre", false);
        temperatureBlacklistRedSandAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandAluminumOre", new ArrayList<String>());
        isBiomeWhitelistRedSandAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandAluminumOre", false);
        biomeBlacklistRedSandAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Aluminum Ore").push("gravel_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelAluminumOre", true);
        veinSizeGravelAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelAluminumOre", 4, 0, 65536);
        veinsPerChunkGravelAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelAluminumOre", 4, 0, 65536);
        minHeightGravelAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelAluminumOre", 20, 0, 256);
        maxHeightGravelAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelAluminumOre", 128, 0, 256);
        isTempWhitelistGravelAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelAluminumOre", false);
        temperatureBlacklistGravelAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelAluminumOre", new ArrayList<String>());
        isBiomeWhitelistGravelAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelAluminumOre", false);
        biomeBlacklistGravelAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Aluminum Ore").push("sandstone_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneAluminumOre", true);
        veinSizeSandstoneAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneAluminumOre", 4, 0, 65536);
        veinsPerChunkSandstoneAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneAluminumOre", 4, 0, 65536);
        minHeightSandstoneAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneAluminumOre", 20, 0, 256);
        maxHeightSandstoneAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneAluminumOre", 128, 0, 256);
        isTempWhitelistSandstoneAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneAluminumOre", false);
        temperatureBlacklistSandstoneAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneAluminumOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneAluminumOre", false);
        biomeBlacklistSandstoneAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Aluminum Ore").push("red_sandstone_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneAluminumOre", true);
        veinSizeRedSandstoneAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneAluminumOre", 4, 0, 65536);
        veinsPerChunkRedSandstoneAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneAluminumOre", 4, 0, 65536);
        minHeightRedSandstoneAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneAluminumOre", 20, 0, 256);
        maxHeightRedSandstoneAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneAluminumOre", 128, 0, 256);
        isTempWhitelistRedSandstoneAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneAluminumOre", false);
        temperatureBlacklistRedSandstoneAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneAluminumOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneAluminumOre", false);
        biomeBlacklistRedSandstoneAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Aluminum Ore").push("blue_ice_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceAluminumOre", true);
        veinSizeBlueIceAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceAluminumOre", 4, 0, 65536);
        veinsPerChunkBlueIceAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceAluminumOre", 4, 0, 65536);
        minHeightBlueIceAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceAluminumOre", 20, 0, 256);
        maxHeightBlueIceAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceAluminumOre", 128, 0, 256);
        isTempWhitelistBlueIceAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceAluminumOre", false);
        temperatureBlacklistBlueIceAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceAluminumOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceAluminumOre", false);
        biomeBlacklistBlueIceAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBlueIceAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Aluminum Ore").push("packed_ice_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceAluminumOre", true);
        veinSizePackedIceAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceAluminumOre", 4, 0, 65536);
        veinsPerChunkPackedIceAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceAluminumOre", 4, 0, 65536);
        minHeightPackedIceAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceAluminumOre", 20, 0, 256);
        maxHeightPackedIceAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceAluminumOre", 128, 0, 256);
        isTempWhitelistPackedIceAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceAluminumOre", false);
        temperatureBlacklistPackedIceAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceAluminumOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceAluminumOre", false);
        biomeBlacklistPackedIceAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistPackedIceAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Aluminum Ore").push("bedrock_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockAluminumOre", true);
        veinSizeBedrockAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockAluminumOre", 1, 0, 65536);
        veinsPerChunkBedrockAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockAluminumOre", 1, 0, 65536);
        minHeightBedrockAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockAluminumOre", 20, 0, 256);
        maxHeightBedrockAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockAluminumOre", 256, 0, 256);
        isTempWhitelistBedrockAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockAluminumOre", false);
        temperatureBlacklistBedrockAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockAluminumOre", new ArrayList<String>());
        isBiomeWhitelistBedrockAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockAluminumOre", false);
        biomeBlacklistBedrockAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBedrockAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockAluminumOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockAluminumOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Aluminum Ore (Quark)").push("quark_basalt_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltAluminumOre", true);
        veinSizeQuarkBasaltAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltAluminumOre", 4, 0, 65536);
        veinsPerChunkQuarkBasaltAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltAluminumOre", 4, 0, 65536);
        minHeightQuarkBasaltAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltAluminumOre", 10, 0, 256);
        maxHeightQuarkBasaltAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltAluminumOre", 96, 0, 256);
        isTempWhitelistQuarkBasaltAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltAluminumOre", false);
        temperatureBlacklistQuarkBasaltAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltAluminumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltAluminumOre", false);
        biomeBlacklistQuarkBasaltAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Aluminum Ore (Quark)").push("quark_limestone_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneAluminumOre", true);
        veinSizeQuarkLimestoneAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneAluminumOre", 4, 0, 65536);
        veinsPerChunkQuarkLimestoneAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneAluminumOre", 4, 0, 65536);
        minHeightQuarkLimestoneAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneAluminumOre", 20, 0, 256);
        maxHeightQuarkLimestoneAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneAluminumOre", 50, 0, 256);
        isTempWhitelistQuarkLimestoneAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneAluminumOre", false);
        temperatureBlacklistQuarkLimestoneAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneAluminumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneAluminumOre", false);
        biomeBlacklistQuarkLimestoneAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Aluminum Ore (Quark)").push("quark_jasper_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperAluminumOre", true);
        veinSizeQuarkJasperAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperAluminumOre", 4, 0, 65536);
        veinsPerChunkQuarkJasperAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperAluminumOre", 4, 0, 65536);
        minHeightQuarkJasperAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperAluminumOre", 20, 0, 256);
        maxHeightQuarkJasperAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperAluminumOre", 50, 0, 256);
        isTempWhitelistQuarkJasperAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperAluminumOre", false);
        temperatureBlacklistQuarkJasperAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperAluminumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperAluminumOre", false);
        biomeBlacklistQuarkJasperAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Aluminum Ore (Quark)").push("quark_marble_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleAluminumOre", true);
        veinSizeQuarkMarbleAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleAluminumOre", 4, 0, 65536);
        veinsPerChunkQuarkMarbleAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleAluminumOre", 4, 0, 65536);
        minHeightQuarkMarbleAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleAluminumOre", 20, 0, 256);
        maxHeightQuarkMarbleAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleAluminumOre", 50, 0, 256);
        isTempWhitelistQuarkMarbleAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleAluminumOre", false);
        temperatureBlacklistQuarkMarbleAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleAluminumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleAluminumOre", false);
        biomeBlacklistQuarkMarbleAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Aluminum Ore (Quark)").push("quark_slate_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateAluminumOre", true);
        veinSizeQuarkSlateAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateAluminumOre", 4, 0, 65536);
        veinsPerChunkQuarkSlateAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateAluminumOre", 4, 0, 65536);
        minHeightQuarkSlateAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateAluminumOre", 20, 0, 256);
        maxHeightQuarkSlateAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateAluminumOre", 50, 0, 256);
        isTempWhitelistQuarkSlateAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateAluminumOre", false);
        temperatureBlacklistQuarkSlateAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateAluminumOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateAluminumOre", false);
        biomeBlacklistQuarkSlateAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Aluminum Ore (Embellishcraft)").push("embellishcraft_basalt_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltAluminumOre", true);
        veinSizeEmbellishcraftBasaltAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltAluminumOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltAluminumOre", 4, 0, 65536);
        minHeightEmbellishcraftBasaltAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltAluminumOre", 20, 0, 256);
        maxHeightEmbellishcraftBasaltAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltAluminumOre", 50, 0, 256);
        isTempWhitelistEmbellishcraftBasaltAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltAluminumOre", false);
        temperatureBlacklistEmbellishcraftBasaltAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltAluminumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltAluminumOre", false);
        biomeBlacklistEmbellishcraftBasaltAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Aluminum Ore (Embellishcraft)").push("embellishcraft_gneiss_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissAluminumOre", true);
        veinSizeEmbellishcraftGneissAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissAluminumOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftGneissAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissAluminumOre", 4, 0, 65536);
        minHeightEmbellishcraftGneissAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissAluminumOre", 20, 0, 256);
        maxHeightEmbellishcraftGneissAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissAluminumOre", 50, 0, 256);
        isTempWhitelistEmbellishcraftGneissAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissAluminumOre", false);
        temperatureBlacklistEmbellishcraftGneissAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissAluminumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissAluminumOre", false);
        biomeBlacklistEmbellishcraftGneissAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Aluminum Ore (Embellishcraft)").push("embellishcraft_jade_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeAluminumOre", true);
        veinSizeEmbellishcraftJadeAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeAluminumOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftJadeAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeAluminumOre", 4, 0, 65536);
        minHeightEmbellishcraftJadeAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeAluminumOre", 20, 0, 256);
        maxHeightEmbellishcraftJadeAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeAluminumOre", 50, 0, 256);
        isTempWhitelistEmbellishcraftJadeAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeAluminumOre", false);
        temperatureBlacklistEmbellishcraftJadeAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeAluminumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeAluminumOre", false);
        biomeBlacklistEmbellishcraftJadeAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Aluminum Ore (Embellishcraft)").push("embellishcraft_larvikite_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteAluminumOre", true);
        veinSizeEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteAluminumOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteAluminumOre", 4, 0, 65536);
        minHeightEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteAluminumOre", 20, 0, 256);
        maxHeightEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteAluminumOre", 50, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteAluminumOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteAluminumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteAluminumOre", false);
        biomeBlacklistEmbellishcraftLarvikiteAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Aluminum Ore (Embellishcraft)").push("embellishcraft_marble_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleAluminumOre", true);
        veinSizeEmbellishcraftMarbleAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleAluminumOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleAluminumOre", 4, 0, 65536);
        minHeightEmbellishcraftMarbleAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleAluminumOre", 20, 0, 256);
        maxHeightEmbellishcraftMarbleAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleAluminumOre", 50, 0, 256);
        isTempWhitelistEmbellishcraftMarbleAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleAluminumOre", false);
        temperatureBlacklistEmbellishcraftMarbleAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleAluminumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleAluminumOre", false);
        biomeBlacklistEmbellishcraftMarbleAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Aluminum Ore (Embellishcraft)").push("embellishcraft_slate_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateAluminumOre", true);
        veinSizeEmbellishcraftSlateAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateAluminumOre", 4, 0, 65536);
        veinsPerChunkEmbellishcraftSlateAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateAluminumOre", 4, 0, 65536);
        minHeightEmbellishcraftSlateAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateAluminumOre", 20, 0, 256);
        maxHeightEmbellishcraftSlateAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateAluminumOre", 50, 0, 256);
        isTempWhitelistEmbellishcraftSlateAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateAluminumOre", false);
        temperatureBlacklistEmbellishcraftSlateAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateAluminumOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateAluminumOre", false);
        biomeBlacklistEmbellishcraftSlateAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Aluminum Ore").push("hardened_stone_aluminum_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneAluminumOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneAluminumOre", true);
        veinSizeHardenedStoneAluminumOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneAluminumOre", 4, 0, 65536);
        veinsPerChunkHardenedStoneAluminumOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneAluminumOre", 4, 0, 65536);
        minHeightHardenedStoneAluminumOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneAluminumOre", 20, 0, 256);
        maxHeightHardenedStoneAluminumOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneAluminumOre", 50, 0, 256);
        isTempWhitelistHardenedStoneAluminumOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneAluminumOre", false);
        temperatureBlacklistHardenedStoneAluminumOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneAluminumOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneAluminumOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneAluminumOre", false);
        biomeBlacklistHardenedStoneAluminumOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistHardenedStoneAluminumOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Aluminum.spec, Main.MOD_ID + "/aluminum.toml");
    }
}
