package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.util.ArrayList;
import java.util.List;

public class Xp {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableXpOres;

    public static ForgeConfigSpec.BooleanValue enableStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minXpAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxXpAndesiteXpOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteXpOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteXpOre;
    public static ForgeConfigSpec.IntValue minXpDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxXpDioriteXpOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteXpOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteXpOre;
    public static ForgeConfigSpec.IntValue minXpGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxXpGraniteXpOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minXpNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxXpNetherrackXpOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpEndStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandXpOre;
    public static ForgeConfigSpec.IntValue minXpSandXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandXpOre;

    public static ForgeConfigSpec.BooleanValue enableGravelXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelXpOre;
    public static ForgeConfigSpec.IntValue minHeightGravelXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelXpOre;
    public static ForgeConfigSpec.IntValue minXpGravelXpOre;
    public static ForgeConfigSpec.IntValue maxXpGravelXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandstoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandstoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceXpOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceXpOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceXpOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceXpOre;
    public static ForgeConfigSpec.IntValue minXpBlueIceXpOre;
    public static ForgeConfigSpec.IntValue maxXpBlueIceXpOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceXpOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceXpOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceXpOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceXpOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceXpOre;
    public static ForgeConfigSpec.IntValue minXpPackedIceXpOre;
    public static ForgeConfigSpec.IntValue maxXpPackedIceXpOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockXpOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockXpOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockXpOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockXpOre;
    public static ForgeConfigSpec.IntValue minXpBedrockXpOre;
    public static ForgeConfigSpec.IntValue maxXpBedrockXpOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkBasaltXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkLimestoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkJasperXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkMarbleXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkSlateXpOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftBasaltXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftGneissXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftJadeXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftMarbleXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftLarvikiteXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftSlateXpOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpHardenedStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpHardenedStoneXpOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Xp Ores").push("general");
        disableXpOres = BUILDER.comment("If false, all redstone ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Xp Ore").push("stone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpStoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXp", 20, 0, 1000000);
        maxXpStoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXp", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Xp Ore").push("andesite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkAndesiteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightAndesiteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightAndesiteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpAndesiteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpAndesiteXpOre", 20, 0, 1000000);
        maxXpAndesiteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpAndesiteXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Xp Ore").push("diorite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkDioriteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightDioriteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightDioriteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistDioriteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpDioriteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDioriteXpOre", 20, 0, 1000000);
        maxXpDioriteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDioriteXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Xp Ore").push("granite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGraniteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightGraniteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightGraniteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGraniteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpGraniteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpGraniteXpOre", 20, 0, 1000000);
        maxXpGraniteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpGraniteXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Xp Ore").push("netherrack_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkNetherrackXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightNetherrackXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpNetherrackXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpNetherrackXpOre", 20, 0, 1000000);
        maxXpNetherrackXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpNetherrackXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Xp Ore").push("end_stone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEndStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEndStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightEndStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEndStoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEndStoneXpOre", 20, 0, 1000000);
        maxXpEndStoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEndStoneXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Xp Ore").push("sand_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightSandXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightSandXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpSandXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpSandXpOre", 20, 0, 1000000);
        maxXpSandXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpSandXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Xp Ore").push("red_sand_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightRedSandXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightRedSandXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpRedSandXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpRedSandXpOre", 20, 0, 1000000);
        maxXpRedSandXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpRedSandXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Xp Ore").push("gravel_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkGravelXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightGravelXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightGravelXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpGravelXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpGravelXpOre", 20, 0, 1000000);
        maxXpGravelXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpGravelXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Xp Ore").push("sandstone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpSandstoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpSandstoneXpOre", 20, 0, 1000000);
        maxXpSandstoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpSandstoneXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Xp Ore").push("red_sandstone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkRedSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightRedSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightRedSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpRedSandstoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpRedSandstoneXpOre", 20, 0, 1000000);
        maxXpRedSandstoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpRedSandstoneXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Xp Ore").push("blue_ice_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBlueIceXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightBlueIceXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightBlueIceXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpBlueIceXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpBlueIceXpOre", 20, 0, 1000000);
        maxXpBlueIceXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpBlueIceXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Xp Ore").push("packed_ice_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkPackedIceXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightPackedIceXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightPackedIceXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpPackedIceXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpPackedIceXpOre", 20, 0, 1000000);
        maxXpPackedIceXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpPackedIceXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Xp Ore").push("bedrock_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 20, 0, 256);
        maxHeightBedrockXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 556, 0, 256);
        isTempWhitelistBedrockXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockXpOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockXpOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpBedrockXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpBedrockXpOre", 20, 0, 1000000);
        maxXpBedrockXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpBedrockXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Xp Ore (Quark)").push("quark_basalt_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkBasaltXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkBasaltXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 96, 0, 256);
        isTempWhitelistQuarkBasaltXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkBasaltXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkBasaltXpOre", 20, 0, 1000000);
        maxXpQuarkBasaltXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkBasaltXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Xp Ore (Quark)").push("quark_limestone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkLimestoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkLimestoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightQuarkLimestoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkLimestoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkLimestoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkLimestoneXpOre", 20, 0, 1000000);
        maxXpQuarkLimestoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkLimestoneXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Xp Ore (Quark)").push("quark_jasper_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkJasperXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkJasperXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightQuarkJasperXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkJasperXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkJasperXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkJasperXpOre", 20, 0, 1000000);
        maxXpQuarkJasperXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkJasperXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Xp Ore (Quark)").push("quark_marble_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkMarbleXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkMarbleXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightQuarkMarbleXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkMarbleXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkMarbleXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkMarbleXpOre", 20, 0, 1000000);
        maxXpQuarkMarbleXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkMarbleXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Xp Ore (Quark)").push("quark_slate_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkQuarkSlateXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightQuarkSlateXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightQuarkSlateXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkSlateXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkSlateXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkSlateXpOre", 20, 0, 1000000);
        maxXpQuarkSlateXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkSlateXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Xp Ore (Embellishcraft)").push("embellishcraft_basalt_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftBasaltXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightEmbellishcraftBasaltXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftBasaltXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftBasaltXpOre", 20, 0, 1000000);
        maxXpEmbellishcraftBasaltXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftBasaltXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Xp Ore (Embellishcraft)").push("embellishcraft_gneiss_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftGneissXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightEmbellishcraftGneissXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftGneissXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftGneissXpOre", 20, 0, 1000000);
        maxXpEmbellishcraftGneissXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftGneissXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Xp Ore (Embellishcraft)").push("embellishcraft_jade_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftJadeXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightEmbellishcraftJadeXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftJadeXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftJadeXpOre", 20, 0, 1000000);
        maxXpEmbellishcraftJadeXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftJadeXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Xp Ore (Embellishcraft)").push("embellishcraft_larvikite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftLarvikiteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightEmbellishcraftLarvikiteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftLarvikiteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftLarvikiteXpOre", 20, 0, 1000000);
        maxXpEmbellishcraftLarvikiteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftLarvikiteXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Xp Ore (Embellishcraft)").push("embellishcraft_marble_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftMarbleXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightEmbellishcraftMarbleXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftMarbleXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftMarbleXpOre", 20, 0, 1000000);
        maxXpEmbellishcraftMarbleXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftMarbleXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Xp Ore (Embellishcraft)").push("embellishcraft_slate_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 11, 0, 65536);
        minHeightEmbellishcraftSlateXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightEmbellishcraftSlateXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftSlateXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftSlateXpOre", 20, 0, 1000000);
        maxXpEmbellishcraftSlateXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftSlateXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Xp Ore").push("hardened_stone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 9, 0, 65536);
        veinsPerChunkHardenedStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 20, 0, 65536);
        minHeightHardenedStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 40, 0, 256);
        maxHeightHardenedStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistHardenedStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpHardenedStoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpHardenedStoneXpOre", 20, 0, 1000000);
        maxXpHardenedStoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpHardenedStoneXpOre", 50, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Xp.spec, Main.MOD_ID + "/xp.toml");
    }
}
