package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.util.ArrayList;
import java.util.List;

public class Xp {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableXpOres;

    public static ForgeConfigSpec.BooleanValue enableStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minXpAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxXpAndesiteXpOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteXpOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteXpOre;
    public static ForgeConfigSpec.IntValue minXpDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxXpDioriteXpOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteXpOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteXpOre;
    public static ForgeConfigSpec.IntValue minXpGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxXpGraniteXpOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minXpNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxXpNetherrackXpOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpEndStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandXpOre;
    public static ForgeConfigSpec.IntValue minXpSandXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandXpOre;

    public static ForgeConfigSpec.BooleanValue enableGravelXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelXpOre;
    public static ForgeConfigSpec.IntValue minHeightGravelXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelXpOre;
    public static ForgeConfigSpec.IntValue minXpGravelXpOre;
    public static ForgeConfigSpec.IntValue maxXpGravelXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandstoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandstoneXpOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Xp Ores").push("xp_ores");
        enableXpOres = BUILDER.comment("Enable or disable all Xp Ore variants.").define("enableXpOres", true);
        BUILDER.comment("Stone Xp Ore").push("stone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneXpOre", true);
        veinSizeStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneXpOre", 8, 0, 65536);
        veinsPerChunkStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneXpOre", 8, 0, 65536);
        minHeightStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneXpOre", 0, 0, 256);
        maxHeightStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneXpOre", 60, 0, 256);
        isTempWhitelistStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneXpOre", false);
        temperatureBlacklistStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneXpOre", new ArrayList<String>());
        isBiomeWhitelistStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneXpOre", false);
        biomeBlacklistStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpStoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpStoneXpOre", 0, 0, 1000000);
        maxXpStoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpStoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Xp Ore").push("andesite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteXpOre", true);
        veinSizeAndesiteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteXpOre", 8, 0, 65536);
        veinsPerChunkAndesiteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteXpOre", 8, 0, 65536);
        minHeightAndesiteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteXpOre", 0, 0, 256);
        maxHeightAndesiteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteXpOre", 60, 0, 256);
        isTempWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteXpOre", false);
        temperatureBlacklistAndesiteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteXpOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteXpOre", false);
        biomeBlacklistAndesiteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpAndesiteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpAndesiteXpOre", 0, 0, 1000000);
        maxXpAndesiteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpAndesiteXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Xp Ore").push("diorite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteXpOre", true);
        veinSizeDioriteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteXpOre", 8, 0, 65536);
        veinsPerChunkDioriteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteXpOre", 8, 0, 65536);
        minHeightDioriteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteXpOre", 0, 0, 256);
        maxHeightDioriteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteXpOre", 60, 0, 256);
        isTempWhitelistDioriteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteXpOre", false);
        temperatureBlacklistDioriteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteXpOre", new ArrayList<String>());
        isBiomeWhitelistDioriteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteXpOre", false);
        biomeBlacklistDioriteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpDioriteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDioriteXpOre", 0, 0, 1000000);
        maxXpDioriteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDioriteXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Xp Ore").push("granite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteXpOre", true);
        veinSizeGraniteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteXpOre", 8, 0, 65536);
        veinsPerChunkGraniteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteXpOre", 8, 0, 65536);
        minHeightGraniteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteXpOre", 0, 0, 256);
        maxHeightGraniteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteXpOre", 60, 0, 256);
        isTempWhitelistGraniteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteXpOre", false);
        temperatureBlacklistGraniteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteXpOre", new ArrayList<String>());
        isBiomeWhitelistGraniteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteXpOre", false);
        biomeBlacklistGraniteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpGraniteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpGraniteXpOre", 0, 0, 1000000);
        maxXpGraniteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpGraniteXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Xp Ore").push("netherrack_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackXpOre", true);
        veinSizeNetherrackXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackXpOre", 8, 0, 65536);
        veinsPerChunkNetherrackXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackXpOre", 8, 0, 65536);
        minHeightNetherrackXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackXpOre", 0, 0, 256);
        maxHeightNetherrackXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackXpOre", 60, 0, 256);
        isTempWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackXpOre", false);
        temperatureBlacklistNetherrackXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackXpOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackXpOre", false);
        biomeBlacklistNetherrackXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpNetherrackXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpNetherrackXpOre", 0, 0, 1000000);
        maxXpNetherrackXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpNetherrackXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Xp Ore").push("end_stone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneXpOre", true);
        veinSizeEndStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneXpOre", 8, 0, 65536);
        veinsPerChunkEndStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneXpOre", 8, 0, 65536);
        minHeightEndStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneXpOre", 0, 0, 256);
        maxHeightEndStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneXpOre", 60, 0, 256);
        isTempWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneXpOre", false);
        temperatureBlacklistEndStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneXpOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneXpOre", false);
        biomeBlacklistEndStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpEndStoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEndStoneXpOre", 0, 0, 1000000);
        maxXpEndStoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEndStoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Xp Ore").push("sand_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandXpOre", true);
        veinSizeSandXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandXpOre", 8, 0, 65536);
        veinsPerChunkSandXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandXpOre", 8, 0, 65536);
        minHeightSandXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandXpOre", 0, 0, 256);
        maxHeightSandXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandXpOre", 60, 0, 256);
        isTempWhitelistSandXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandXpOre", false);
        temperatureBlacklistSandXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandXpOre", new ArrayList<String>());
        isBiomeWhitelistSandXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandXpOre", false);
        biomeBlacklistSandXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpSandXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpSandXpOre", 0, 0, 1000000);
        maxXpSandXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpSandXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Xp Ore").push("gravel_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelXpOre", true);
        veinSizeGravelXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelXpOre", 8, 0, 65536);
        veinsPerChunkGravelXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelXpOre", 8, 0, 65536);
        minHeightGravelXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelXpOre", 0, 0, 256);
        maxHeightGravelXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelXpOre", 60, 0, 256);
        isTempWhitelistGravelXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelXpOre", false);
        temperatureBlacklistGravelXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelXpOre", new ArrayList<String>());
        isBiomeWhitelistGravelXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelXpOre", false);
        biomeBlacklistGravelXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpGravelXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpGravelXpOre", 0, 0, 1000000);
        maxXpGravelXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpGravelXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Xp Ore").push("sandstone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneXpOre", true);
        veinSizeSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneXpOre", 8, 0, 65536);
        veinsPerChunkSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneXpOre", 8, 0, 65536);
        minHeightSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneXpOre", 0, 0, 256);
        maxHeightSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneXpOre", 60, 0, 256);
        isTempWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneXpOre", false);
        temperatureBlacklistSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneXpOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneXpOre", false);
        biomeBlacklistSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpSandstoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpSandstoneXpOre", 0, 0, 1000000);
        maxXpSandstoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpSandstoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Xp Ore").push("red_sandstone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneXpOre", true);
        veinSizeRedSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneXpOre", 8, 0, 65536);
        veinsPerChunkRedSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneXpOre", 8, 0, 65536);
        minHeightRedSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneXpOre", 0, 0, 256);
        maxHeightRedSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneXpOre", 60, 0, 256);
        isTempWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneXpOre", false);
        temperatureBlacklistRedSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneXpOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneXpOre", false);
        biomeBlacklistRedSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Generation settings for this ore.").push("generation");
        minXpRedSandstoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpRedSandstoneXpOre", 0, 0, 1000000);
        maxXpRedSandstoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpRedSandstoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Xp.spec, Main.MOD_ID + "/xp.toml");
    }
}
