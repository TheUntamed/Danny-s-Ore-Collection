package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.util.ArrayList;
import java.util.List;

public class Xp {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableXpOres;

    public static ForgeConfigSpec.BooleanValue enableStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minXpAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxXpAndesiteXpOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteXpOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteXpOre;
    public static ForgeConfigSpec.IntValue minXpDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxXpDioriteXpOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteXpOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteXpOre;
    public static ForgeConfigSpec.IntValue minXpGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxXpGraniteXpOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minXpNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxXpNetherrackXpOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpEndStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandXpOre;
    public static ForgeConfigSpec.IntValue minXpSandXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandXpOre;

    public static ForgeConfigSpec.BooleanValue enableGravelXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelXpOre;
    public static ForgeConfigSpec.IntValue minHeightGravelXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelXpOre;
    public static ForgeConfigSpec.IntValue minXpGravelXpOre;
    public static ForgeConfigSpec.IntValue maxXpGravelXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpSandstoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpRedSandstoneXpOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkBasaltXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkLimestoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkLimestoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkJasperXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkJasperXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkMarbleXpOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue minXpQuarkSlateXpOre;
    public static ForgeConfigSpec.IntValue maxXpQuarkSlateXpOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftBasaltXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftBasaltXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftGneissXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftGneissXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftJadeXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftJadeXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftMarbleXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftMarbleXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftLarvikiteXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftLarvikiteXpOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue minXpEmbellishcraftSlateXpOre;
    public static ForgeConfigSpec.IntValue maxXpEmbellishcraftSlateXpOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Xp Ores").push("xp_ores");
        enableXpOres = BUILDER.comment("Enable or disable all Xp Ore variants.").define("enableXpOres", true);
        BUILDER.comment("Stone Xp Ore").push("stone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneXpOre", true);
        veinSizeStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneXpOre", 1, 0, 65536);
        veinsPerChunkStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneXpOre", 11, 0, 65536);
        minHeightStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneXpOre", 40, 0, 256);
        maxHeightStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneXpOre", 128, 0, 256);
        isTempWhitelistStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneXpOre", false);
        temperatureBlacklistStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneXpOre", new ArrayList<String>());
        isBiomeWhitelistStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneXpOre", false);
        biomeBlacklistStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpStoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpStoneXpOre", 0, 0, 1000000);
        maxXpStoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpStoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Xp Ore").push("andesite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteXpOre", true);
        veinSizeAndesiteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteXpOre", 1, 0, 65536);
        veinsPerChunkAndesiteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteXpOre", 11, 0, 65536);
        minHeightAndesiteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteXpOre", 40, 0, 256);
        maxHeightAndesiteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteXpOre", 128, 0, 256);
        isTempWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteXpOre", false);
        temperatureBlacklistAndesiteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteXpOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteXpOre", false);
        biomeBlacklistAndesiteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpAndesiteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpAndesiteXpOre", 0, 0, 1000000);
        maxXpAndesiteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpAndesiteXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Xp Ore").push("diorite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteXpOre", true);
        veinSizeDioriteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteXpOre", 1, 0, 65536);
        veinsPerChunkDioriteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteXpOre", 11, 0, 65536);
        minHeightDioriteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteXpOre", 40, 0, 256);
        maxHeightDioriteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteXpOre", 128, 0, 256);
        isTempWhitelistDioriteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteXpOre", false);
        temperatureBlacklistDioriteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteXpOre", new ArrayList<String>());
        isBiomeWhitelistDioriteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteXpOre", false);
        biomeBlacklistDioriteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpDioriteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpDioriteXpOre", 0, 0, 1000000);
        maxXpDioriteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpDioriteXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Xp Ore").push("granite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteXpOre", true);
        veinSizeGraniteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteXpOre", 1, 0, 65536);
        veinsPerChunkGraniteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteXpOre", 11, 0, 65536);
        minHeightGraniteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteXpOre", 40, 0, 256);
        maxHeightGraniteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteXpOre", 128, 0, 256);
        isTempWhitelistGraniteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteXpOre", false);
        temperatureBlacklistGraniteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteXpOre", new ArrayList<String>());
        isBiomeWhitelistGraniteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteXpOre", false);
        biomeBlacklistGraniteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpGraniteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpGraniteXpOre", 0, 0, 1000000);
        maxXpGraniteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpGraniteXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Xp Ore").push("netherrack_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackXpOre", true);
        veinSizeNetherrackXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackXpOre", 1, 0, 65536);
        veinsPerChunkNetherrackXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackXpOre", 11, 0, 65536);
        minHeightNetherrackXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackXpOre", 10, 0, 256);
        maxHeightNetherrackXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackXpOre", 96, 0, 256);
        isTempWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackXpOre", false);
        temperatureBlacklistNetherrackXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackXpOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackXpOre", false);
        biomeBlacklistNetherrackXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpNetherrackXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpNetherrackXpOre", 0, 0, 1000000);
        maxXpNetherrackXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpNetherrackXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Xp Ore").push("end_stone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneXpOre", true);
        veinSizeEndStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneXpOre", 8, 0, 65536);
        veinsPerChunkEndStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneXpOre", 8, 0, 65536);
        minHeightEndStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneXpOre", 40, 0, 256);
        maxHeightEndStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneXpOre", 128, 0, 256);
        isTempWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneXpOre", false);
        temperatureBlacklistEndStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneXpOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneXpOre", false);
        biomeBlacklistEndStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEndStoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEndStoneXpOre", 0, 0, 1000000);
        maxXpEndStoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEndStoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Xp Ore").push("sand_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandXpOre", true);
        veinSizeSandXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandXpOre", 1, 0, 65536);
        veinsPerChunkSandXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandXpOre", 11, 0, 65536);
        minHeightSandXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandXpOre", 40, 0, 256);
        maxHeightSandXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandXpOre", 128, 0, 256);
        isTempWhitelistSandXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandXpOre", false);
        temperatureBlacklistSandXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandXpOre", new ArrayList<String>());
        isBiomeWhitelistSandXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandXpOre", false);
        biomeBlacklistSandXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpSandXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpSandXpOre", 0, 0, 1000000);
        maxXpSandXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpSandXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Xp Ore").push("gravel_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelXpOre", true);
        veinSizeGravelXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelXpOre", 1, 0, 65536);
        veinsPerChunkGravelXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelXpOre", 11, 0, 65536);
        minHeightGravelXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelXpOre", 40, 0, 256);
        maxHeightGravelXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelXpOre", 128, 0, 256);
        isTempWhitelistGravelXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelXpOre", false);
        temperatureBlacklistGravelXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelXpOre", new ArrayList<String>());
        isBiomeWhitelistGravelXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelXpOre", false);
        biomeBlacklistGravelXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpGravelXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpGravelXpOre", 0, 0, 1000000);
        maxXpGravelXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpGravelXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Xp Ore").push("sandstone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneXpOre", true);
        veinSizeSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneXpOre", 1, 0, 65536);
        veinsPerChunkSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneXpOre", 11, 0, 65536);
        minHeightSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneXpOre", 40, 0, 256);
        maxHeightSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneXpOre", 128, 0, 256);
        isTempWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneXpOre", false);
        temperatureBlacklistSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneXpOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneXpOre", false);
        biomeBlacklistSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpSandstoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpSandstoneXpOre", 0, 0, 1000000);
        maxXpSandstoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpSandstoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Xp Ore").push("red_sandstone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneXpOre", true);
        veinSizeRedSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneXpOre", 1, 0, 65536);
        veinsPerChunkRedSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneXpOre", 11, 0, 65536);
        minHeightRedSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneXpOre", 40, 0, 256);
        maxHeightRedSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneXpOre", 128, 0, 256);
        isTempWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneXpOre", false);
        temperatureBlacklistRedSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneXpOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneXpOre", false);
        biomeBlacklistRedSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpRedSandstoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpRedSandstoneXpOre", 0, 0, 1000000);
        maxXpRedSandstoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpRedSandstoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Xp Ore (Quark)").push("quark_basalt_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltXpOre", true);
        veinSizeQuarkBasaltXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltXpOre", 1, 0, 65536);
        veinsPerChunkQuarkBasaltXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltXpOre", 11, 0, 65536);
        minHeightQuarkBasaltXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltXpOre", 40, 0, 256);
        maxHeightQuarkBasaltXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltXpOre", 128, 0, 256);
        isTempWhitelistQuarkBasaltXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltXpOre", false);
        temperatureBlacklistQuarkBasaltXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltXpOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltXpOre", false);
        biomeBlacklistQuarkBasaltXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkBasaltXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkBasaltXpOre", 0, 0, 1000000);
        maxXpQuarkBasaltXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkBasaltXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Xp Ore (Quark)").push("quark_limestone_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneXpOre", true);
        veinSizeQuarkLimestoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneXpOre", 1, 0, 65536);
        veinsPerChunkQuarkLimestoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneXpOre", 11, 0, 65536);
        minHeightQuarkLimestoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneXpOre", 40, 0, 256);
        maxHeightQuarkLimestoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneXpOre", 128, 0, 256);
        isTempWhitelistQuarkLimestoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneXpOre", false);
        temperatureBlacklistQuarkLimestoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneXpOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneXpOre", false);
        biomeBlacklistQuarkLimestoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkLimestoneXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkLimestoneXpOre", 0, 0, 1000000);
        maxXpQuarkLimestoneXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkLimestoneXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Xp Ore (Quark)").push("quark_jasper_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperXpOre", true);
        veinSizeQuarkJasperXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperXpOre", 1, 0, 65536);
        veinsPerChunkQuarkJasperXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperXpOre", 11, 0, 65536);
        minHeightQuarkJasperXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperXpOre", 40, 0, 256);
        maxHeightQuarkJasperXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperXpOre", 128, 0, 256);
        isTempWhitelistQuarkJasperXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperXpOre", false);
        temperatureBlacklistQuarkJasperXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperXpOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperXpOre", false);
        biomeBlacklistQuarkJasperXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkJasperXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkJasperXpOre", 0, 0, 1000000);
        maxXpQuarkJasperXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkJasperXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Xp Ore (Quark)").push("quark_marble_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleXpOre", true);
        veinSizeQuarkMarbleXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleXpOre", 1, 0, 65536);
        veinsPerChunkQuarkMarbleXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleXpOre", 11, 0, 65536);
        minHeightQuarkMarbleXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleXpOre", 40, 0, 256);
        maxHeightQuarkMarbleXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleXpOre", 128, 0, 256);
        isTempWhitelistQuarkMarbleXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleXpOre", false);
        temperatureBlacklistQuarkMarbleXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleXpOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleXpOre", false);
        biomeBlacklistQuarkMarbleXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkMarbleXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkMarbleXpOre", 0, 0, 1000000);
        maxXpQuarkMarbleXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkMarbleXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Xp Ore (Quark)").push("quark_slate_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateXpOre", true);
        veinSizeQuarkSlateXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateXpOre", 1, 0, 65536);
        veinsPerChunkQuarkSlateXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateXpOre", 11, 0, 65536);
        minHeightQuarkSlateXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateXpOre", 40, 0, 256);
        maxHeightQuarkSlateXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateXpOre", 128, 0, 256);
        isTempWhitelistQuarkSlateXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateXpOre", false);
        temperatureBlacklistQuarkSlateXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateXpOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateXpOre", false);
        biomeBlacklistQuarkSlateXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpQuarkSlateXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpQuarkSlateXpOre", 0, 0, 1000000);
        maxXpQuarkSlateXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpQuarkSlateXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Xp Ore (Embellishcraft)").push("embellishcraft_basalt_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltXpOre", true);
        veinSizeEmbellishcraftBasaltXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltXpOre", 1, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltXpOre", 11, 0, 65536);
        minHeightEmbellishcraftBasaltXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltXpOre", 40, 0, 256);
        maxHeightEmbellishcraftBasaltXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltXpOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltXpOre", false);
        temperatureBlacklistEmbellishcraftBasaltXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltXpOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltXpOre", false);
        biomeBlacklistEmbellishcraftBasaltXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftBasaltXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftBasaltXpOre", 0, 0, 1000000);
        maxXpEmbellishcraftBasaltXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftBasaltXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Xp Ore (Embellishcraft)").push("embellishcraft_gneiss_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissXpOre", true);
        veinSizeEmbellishcraftGneissXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissXpOre", 1, 0, 65536);
        veinsPerChunkEmbellishcraftGneissXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissXpOre", 11, 0, 65536);
        minHeightEmbellishcraftGneissXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissXpOre", 40, 0, 256);
        maxHeightEmbellishcraftGneissXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissXpOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissXpOre", false);
        temperatureBlacklistEmbellishcraftGneissXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissXpOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissXpOre", false);
        biomeBlacklistEmbellishcraftGneissXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftGneissXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftGneissXpOre", 0, 0, 1000000);
        maxXpEmbellishcraftGneissXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftGneissXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Xp Ore (Embellishcraft)").push("embellishcraft_jade_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeXpOre", true);
        veinSizeEmbellishcraftJadeXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeXpOre", 1, 0, 65536);
        veinsPerChunkEmbellishcraftJadeXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeXpOre", 11, 0, 65536);
        minHeightEmbellishcraftJadeXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeXpOre", 40, 0, 256);
        maxHeightEmbellishcraftJadeXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeXpOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeXpOre", false);
        temperatureBlacklistEmbellishcraftJadeXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeXpOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeXpOre", false);
        biomeBlacklistEmbellishcraftJadeXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftJadeXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftJadeXpOre", 0, 0, 1000000);
        maxXpEmbellishcraftJadeXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftJadeXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Xp Ore (Embellishcraft)").push("embellishcraft_larvikite_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteXpOre", true);
        veinSizeEmbellishcraftLarvikiteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteXpOre", 1, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteXpOre", 11, 0, 65536);
        minHeightEmbellishcraftLarvikiteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteXpOre", 40, 0, 256);
        maxHeightEmbellishcraftLarvikiteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteXpOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteXpOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteXpOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteXpOre", false);
        biomeBlacklistEmbellishcraftLarvikiteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftLarvikiteXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftLarvikiteXpOre", 0, 0, 1000000);
        maxXpEmbellishcraftLarvikiteXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftLarvikiteXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Xp Ore (Embellishcraft)").push("embellishcraft_marble_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleXpOre", true);
        veinSizeEmbellishcraftMarbleXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleXpOre", 1, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleXpOre", 11, 0, 65536);
        minHeightEmbellishcraftMarbleXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleXpOre", 40, 0, 256);
        maxHeightEmbellishcraftMarbleXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleXpOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleXpOre", false);
        temperatureBlacklistEmbellishcraftMarbleXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleXpOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleXpOre", false);
        biomeBlacklistEmbellishcraftMarbleXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftMarbleXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftMarbleXpOre", 0, 0, 1000000);
        maxXpEmbellishcraftMarbleXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftMarbleXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Xp Ore (Embellishcraft)").push("embellishcraft_slate_xp_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateXpOre", true);
        veinSizeEmbellishcraftSlateXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateXpOre", 1, 0, 65536);
        veinsPerChunkEmbellishcraftSlateXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateXpOre", 11, 0, 65536);
        minHeightEmbellishcraftSlateXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateXpOre", 40, 0, 256);
        maxHeightEmbellishcraftSlateXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateXpOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateXpOre", false);
        temperatureBlacklistEmbellishcraftSlateXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateXpOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateXpOre", false);
        biomeBlacklistEmbellishcraftSlateXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateXpOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Define how much xp this ore should drop.").push("xp_drop");
        minXpEmbellishcraftSlateXpOre = BUILDER.comment("The minimum amount of xp this ore drops.").defineInRange("minXpEmbellishcraftSlateXpOre", 0, 0, 1000000);
        maxXpEmbellishcraftSlateXpOre = BUILDER.comment("The maximum amount of xp this ore drops.").defineInRange("maxXpEmbellishcraftSlateXpOre", 0, 0, 1000000);
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Xp.spec, Main.MOD_ID + "/xp.toml");
    }
}
