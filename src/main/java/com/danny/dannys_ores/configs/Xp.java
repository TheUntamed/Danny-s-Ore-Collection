package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import com.electronwill.nightconfig.core.file.CommentedFileConfig;
import com.electronwill.nightconfig.core.io.WritingMode;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.fml.loading.FMLPaths;

import java.util.ArrayList;
import java.util.List;

public class Xp {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableXpOres;

    public static ForgeConfigSpec.BooleanValue enableStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelStoneXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelStoneXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelStoneXpOre;
    public static ForgeConfigSpec.IntValue lightValueStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpDropStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropStoneXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceStoneXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeStoneXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionStoneXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsStoneXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelAndesiteXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelAndesiteXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelAndesiteXpOre;
    public static ForgeConfigSpec.IntValue lightValueAndesiteXpOre;
    public static ForgeConfigSpec.IntValue minXpDropAndesiteXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropAndesiteXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceAndesiteXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectAndesiteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsAndesiteXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandAndesiteXpOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteXpOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelDioriteXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelDioriteXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelDioriteXpOre;
    public static ForgeConfigSpec.IntValue lightValueDioriteXpOre;
    public static ForgeConfigSpec.IntValue minXpDropDioriteXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropDioriteXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceDioriteXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectDioriteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsDioriteXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandDioriteXpOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteXpOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelGraniteXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelGraniteXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelGraniteXpOre;
    public static ForgeConfigSpec.IntValue lightValueGraniteXpOre;
    public static ForgeConfigSpec.IntValue minXpDropGraniteXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropGraniteXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceGraniteXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectGraniteXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsGraniteXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandGraniteXpOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelNetherrackXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelNetherrackXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelNetherrackXpOre;
    public static ForgeConfigSpec.IntValue lightValueNetherrackXpOre;
    public static ForgeConfigSpec.IntValue minXpDropNetherrackXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropNetherrackXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceNetherrackXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectNetherrackXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsNetherrackXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandNetherrackXpOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelEndStoneXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelEndStoneXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelEndStoneXpOre;
    public static ForgeConfigSpec.IntValue lightValueEndStoneXpOre;
    public static ForgeConfigSpec.IntValue minXpDropEndStoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropEndStoneXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceEndStoneXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectEndStoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsEndStoneXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandEndStoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelSandXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelSandXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelSandXpOre;
    public static ForgeConfigSpec.IntValue lightValueSandXpOre;
    public static ForgeConfigSpec.IntValue minXpDropSandXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropSandXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceSandXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeSandXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionSandXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectSandXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsSandXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandSandXpOre;

    public static ForgeConfigSpec.BooleanValue enableGravelXpOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelXpOre;
    public static ForgeConfigSpec.IntValue minHeightGravelXpOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelGravelXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelGravelXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelGravelXpOre;
    public static ForgeConfigSpec.IntValue lightValueGravelXpOre;
    public static ForgeConfigSpec.IntValue minXpDropGravelXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropGravelXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceGravelXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeGravelXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionGravelXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectGravelXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsGravelXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandGravelXpOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelSandstoneXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelSandstoneXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelSandstoneXpOre;
    public static ForgeConfigSpec.IntValue lightValueSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpDropSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropSandstoneXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceSandstoneXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandSandstoneXpOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue harvestLevelRedSandstoneXpOre;
    public static ForgeConfigSpec.DoubleValue hardnessLevelRedSandstoneXpOre;
    public static ForgeConfigSpec.DoubleValue resistanceLevelRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue lightValueRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue minXpDropRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue maxXpDropRedSandstoneXpOre;
    public static ForgeConfigSpec.IntValue explosionChanceRedSandstoneXpOre;
    public static ForgeConfigSpec.DoubleValue explosionRangeRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue enableExplosionDestructionRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue hasGlowEffectRedSandstoneXpOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> statusEffectsRedSandstoneXpOre;
    public static ForgeConfigSpec.BooleanValue onlyInHandRedSandstoneXpOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Xp Ores").push("xp_ores");
        enableXpOres = BUILDER.comment("Enable or disable all Xp Ore variants.").define("enableXpOres", true);
            BUILDER.comment("Stone Xp Ore").push("stone_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneXpOre", true);
            veinSizeStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneXpOre", 8, 0, 65536);
            veinsPerChunkStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneXpOre", 8, 0, 65536);
            minHeightStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneXpOre", 0, 0, 256);
            maxHeightStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneXpOre", 60, 0, 256);
            isTempWhitelistStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneXpOre", false);
            temperatureBlacklistStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneXpOre", new ArrayList<String>());
            isBiomeWhitelistStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneXpOre", false);
            biomeBlacklistStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistStoneXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelStoneXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelStoneXpOre", 1, 0, 2000000000);
            hardnessLevelStoneXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelStoneXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelStoneXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelStoneXpOre", 3.0, 0.0, 3600000.0);
            lightValueStoneXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueStoneXpOre", 0, 0, 15);
            minXpDropStoneXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropStoneXpOre", 0, 0, 100000);
            maxXpDropStoneXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropStoneXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceStoneXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceStoneXpOre", 0, 0, 1000);
            explosionRangeStoneXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeStoneXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionStoneXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionStoneXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectStoneXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectStoneXpOre", false);
            statusEffectsStoneXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsStoneXpOre", new ArrayList<String>());
            onlyInHandStoneXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandStoneXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Andesite Xp Ore").push("andesite_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableAndesiteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteXpOre", true);
            veinSizeAndesiteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteXpOre", 8, 0, 65536);
            veinsPerChunkAndesiteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteXpOre", 8, 0, 65536);
            minHeightAndesiteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteXpOre", 0, 0, 256);
            maxHeightAndesiteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteXpOre", 60, 0, 256);
            isTempWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteXpOre", false);
            temperatureBlacklistAndesiteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteXpOre", new ArrayList<String>());
            isBiomeWhitelistAndesiteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteXpOre", false);
            biomeBlacklistAndesiteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelAndesiteXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelAndesiteXpOre", 1, 0, 2000000000);
            hardnessLevelAndesiteXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelAndesiteXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelAndesiteXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelAndesiteXpOre", 3.0, 0.0, 3600000.0);
            lightValueAndesiteXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueAndesiteXpOre", 0, 0, 15);
            minXpDropAndesiteXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropAndesiteXpOre", 0, 0, 100000);
            maxXpDropAndesiteXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropAndesiteXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceAndesiteXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceAndesiteXpOre", 0, 0, 1000);
            explosionRangeAndesiteXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeAndesiteXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionAndesiteXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionAndesiteXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectAndesiteXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectAndesiteXpOre", false);
            statusEffectsAndesiteXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsAndesiteXpOre", new ArrayList<String>());
            onlyInHandAndesiteXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandAndesiteXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Diorite Xp Ore").push("diorite_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableDioriteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteXpOre", true);
            veinSizeDioriteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteXpOre", 8, 0, 65536);
            veinsPerChunkDioriteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteXpOre", 8, 0, 65536);
            minHeightDioriteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteXpOre", 0, 0, 256);
            maxHeightDioriteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteXpOre", 60, 0, 256);
            isTempWhitelistDioriteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteXpOre", false);
            temperatureBlacklistDioriteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteXpOre", new ArrayList<String>());
            isBiomeWhitelistDioriteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteXpOre", false);
            biomeBlacklistDioriteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelDioriteXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelDioriteXpOre", 1, 0, 2000000000);
            hardnessLevelDioriteXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelDioriteXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelDioriteXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelDioriteXpOre", 3.0, 0.0, 3600000.0);
            lightValueDioriteXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueDioriteXpOre", 0, 0, 15);
            minXpDropDioriteXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropDioriteXpOre", 0, 0, 100000);
            maxXpDropDioriteXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropDioriteXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceDioriteXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceDioriteXpOre", 0, 0, 1000);
            explosionRangeDioriteXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeDioriteXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionDioriteXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionDioriteXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectDioriteXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectDioriteXpOre", false);
            statusEffectsDioriteXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsDioriteXpOre", new ArrayList<String>());
            onlyInHandDioriteXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandDioriteXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Granite Xp Ore").push("granite_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableGraniteXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteXpOre", true);
            veinSizeGraniteXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteXpOre", 8, 0, 65536);
            veinsPerChunkGraniteXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteXpOre", 8, 0, 65536);
            minHeightGraniteXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteXpOre", 0, 0, 256);
            maxHeightGraniteXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteXpOre", 60, 0, 256);
            isTempWhitelistGraniteXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteXpOre", false);
            temperatureBlacklistGraniteXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteXpOre", new ArrayList<String>());
            isBiomeWhitelistGraniteXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteXpOre", false);
            biomeBlacklistGraniteXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelGraniteXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelGraniteXpOre", 1, 0, 2000000000);
            hardnessLevelGraniteXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelGraniteXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelGraniteXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelGraniteXpOre", 3.0, 0.0, 3600000.0);
            lightValueGraniteXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueGraniteXpOre", 0, 0, 15);
            minXpDropGraniteXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropGraniteXpOre", 0, 0, 100000);
            maxXpDropGraniteXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropGraniteXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceGraniteXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceGraniteXpOre", 0, 0, 1000);
            explosionRangeGraniteXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeGraniteXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionGraniteXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionGraniteXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectGraniteXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectGraniteXpOre", false);
            statusEffectsGraniteXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsGraniteXpOre", new ArrayList<String>());
            onlyInHandGraniteXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandGraniteXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Netherrack Xp Ore").push("netherrack_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableNetherrackXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackXpOre", true);
            veinSizeNetherrackXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackXpOre", 8, 0, 65536);
            veinsPerChunkNetherrackXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackXpOre", 8, 0, 65536);
            minHeightNetherrackXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackXpOre", 0, 0, 256);
            maxHeightNetherrackXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackXpOre", 60, 0, 256);
            isTempWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackXpOre", false);
            temperatureBlacklistNetherrackXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackXpOre", new ArrayList<String>());
            isBiomeWhitelistNetherrackXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackXpOre", false);
            biomeBlacklistNetherrackXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelNetherrackXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelNetherrackXpOre", 1, 0, 2000000000);
            hardnessLevelNetherrackXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelNetherrackXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelNetherrackXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelNetherrackXpOre", 3.0, 0.0, 3600000.0);
            lightValueNetherrackXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueNetherrackXpOre", 0, 0, 15);
            minXpDropNetherrackXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropNetherrackXpOre", 0, 0, 100000);
            maxXpDropNetherrackXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropNetherrackXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceNetherrackXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceNetherrackXpOre", 0, 0, 1000);
            explosionRangeNetherrackXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeNetherrackXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionNetherrackXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionNetherrackXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectNetherrackXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectNetherrackXpOre", false);
            statusEffectsNetherrackXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsNetherrackXpOre", new ArrayList<String>());
            onlyInHandNetherrackXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandNetherrackXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("End Stone Xp Ore").push("end_stone_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableEndStoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneXpOre", true);
            veinSizeEndStoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneXpOre", 8, 0, 65536);
            veinsPerChunkEndStoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneXpOre", 8, 0, 65536);
            minHeightEndStoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneXpOre", 0, 0, 256);
            maxHeightEndStoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneXpOre", 60, 0, 256);
            isTempWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneXpOre", false);
            temperatureBlacklistEndStoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneXpOre", new ArrayList<String>());
            isBiomeWhitelistEndStoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneXpOre", false);
            biomeBlacklistEndStoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelEndStoneXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelEndStoneXpOre", 1, 0, 2000000000);
            hardnessLevelEndStoneXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelEndStoneXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelEndStoneXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelEndStoneXpOre", 3.0, 0.0, 3600000.0);
            lightValueEndStoneXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueEndStoneXpOre", 0, 0, 15);
            minXpDropEndStoneXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropEndStoneXpOre", 0, 0, 100000);
            maxXpDropEndStoneXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropEndStoneXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceEndStoneXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceEndStoneXpOre", 0, 0, 1000);
            explosionRangeEndStoneXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeEndStoneXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionEndStoneXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionEndStoneXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectEndStoneXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectEndStoneXpOre", false);
            statusEffectsEndStoneXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsEndStoneXpOre", new ArrayList<String>());
            onlyInHandEndStoneXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandEndStoneXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sand Xp Ore").push("sand_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableSandXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandXpOre", true);
            veinSizeSandXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandXpOre", 8, 0, 65536);
            veinsPerChunkSandXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandXpOre", 8, 0, 65536);
            minHeightSandXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandXpOre", 0, 0, 256);
            maxHeightSandXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandXpOre", 60, 0, 256);
            isTempWhitelistSandXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandXpOre", false);
            temperatureBlacklistSandXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandXpOre", new ArrayList<String>());
            isBiomeWhitelistSandXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandXpOre", false);
            biomeBlacklistSandXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelSandXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelSandXpOre", 1, 0, 2000000000);
            hardnessLevelSandXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelSandXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelSandXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelSandXpOre", 3.0, 0.0, 3600000.0);
            lightValueSandXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueSandXpOre", 0, 0, 15);
            minXpDropSandXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropSandXpOre", 0, 0, 100000);
            maxXpDropSandXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropSandXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceSandXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceSandXpOre", 0, 0, 1000);
            explosionRangeSandXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeSandXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionSandXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionSandXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectSandXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectSandXpOre", false);
            statusEffectsSandXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsSandXpOre", new ArrayList<String>());
            onlyInHandSandXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandSandXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Gravel Xp Ore").push("gravel_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableGravelXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelXpOre", true);
            veinSizeGravelXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelXpOre", 8, 0, 65536);
            veinsPerChunkGravelXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelXpOre", 8, 0, 65536);
            minHeightGravelXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelXpOre", 0, 0, 256);
            maxHeightGravelXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelXpOre", 60, 0, 256);
            isTempWhitelistGravelXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelXpOre", false);
            temperatureBlacklistGravelXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelXpOre", new ArrayList<String>());
            isBiomeWhitelistGravelXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelXpOre", false);
            biomeBlacklistGravelXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelGravelXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelGravelXpOre", 1, 0, 2000000000);
            hardnessLevelGravelXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelGravelXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelGravelXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelGravelXpOre", 3.0, 0.0, 3600000.0);
            lightValueGravelXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueGravelXpOre", 0, 0, 15);
            minXpDropGravelXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropGravelXpOre", 0, 0, 100000);
            maxXpDropGravelXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropGravelXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceGravelXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceGravelXpOre", 0, 0, 1000);
            explosionRangeGravelXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeGravelXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionGravelXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionGravelXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectGravelXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectGravelXpOre", false);
            statusEffectsGravelXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsGravelXpOre", new ArrayList<String>());
            onlyInHandGravelXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandGravelXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Sandstone Xp Ore").push("sandstone_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneXpOre", true);
            veinSizeSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneXpOre", 8, 0, 65536);
            veinsPerChunkSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneXpOre", 8, 0, 65536);
            minHeightSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneXpOre", 0, 0, 256);
            maxHeightSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneXpOre", 60, 0, 256);
            isTempWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneXpOre", false);
            temperatureBlacklistSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneXpOre", new ArrayList<String>());
            isBiomeWhitelistSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneXpOre", false);
            biomeBlacklistSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelSandstoneXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelSandstoneXpOre", 1, 0, 2000000000);
            hardnessLevelSandstoneXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelSandstoneXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelSandstoneXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelSandstoneXpOre", 3.0, 0.0, 3600000.0);
            lightValueSandstoneXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueSandstoneXpOre", 0, 0, 15);
            minXpDropSandstoneXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropSandstoneXpOre", 0, 0, 100000);
            maxXpDropSandstoneXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropSandstoneXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceSandstoneXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceSandstoneXpOre", 0, 0, 1000);
            explosionRangeSandstoneXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeSandstoneXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionSandstoneXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionSandstoneXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectSandstoneXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectSandstoneXpOre", false);
            statusEffectsSandstoneXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsSandstoneXpOre", new ArrayList<String>());
            onlyInHandSandstoneXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandSandstoneXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
            BUILDER.comment("Red Sandstone Xp Ore").push("red_sandstone_xp_ore");
            BUILDER.comment("Generation settings for this ore. (Game restart required.)").push("generation");
            enableRedSandstoneXpOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneXpOre", true);
            veinSizeRedSandstoneXpOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneXpOre", 8, 0, 65536);
            veinsPerChunkRedSandstoneXpOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneXpOre", 8, 0, 65536);
            minHeightRedSandstoneXpOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneXpOre", 0, 0, 256);
            maxHeightRedSandstoneXpOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneXpOre", 60, 0, 256);
            isTempWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneXpOre", false);
            temperatureBlacklistRedSandstoneXpOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneXpOre", new ArrayList<String>());
            isBiomeWhitelistRedSandstoneXpOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneXpOre", false);
            biomeBlacklistRedSandstoneXpOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneXpOre", new ArrayList<String>());
            BUILDER.pop();
            BUILDER.comment("Block properties for this ore. (Game restart required.)").push("properties");
            harvestLevelRedSandstoneXpOre = BUILDER.comment("The required tool level. Wood/Gold: 0, Stone: 1, Iron: 2, Diamond: 3, Above Diamond: 4+").defineInRange("harvestLevelRedSandstoneXpOre", 1, 0, 2000000000);
            hardnessLevelRedSandstoneXpOre = BUILDER.comment("How long it takes to break the block. Has nothing to do with the required tool level. Default value is equal to the value of vanilla ores. Obsidian: 50.0, Bedrock: -1.00 (unbreakable)").defineInRange("hardnessLevelRedSandstoneXpOre", 3.0, -1.0, 3600000.0);
            resistanceLevelRedSandstoneXpOre = BUILDER.comment("The Blast Resistance of the block. Default value is equal to the value of vanilla ores. Obsidian: 1200.0, Bedrock: 3600000.00").defineInRange("resistanceLevelRedSandstoneXpOre", 3.0, 0.0, 3600000.0);
            lightValueRedSandstoneXpOre = BUILDER.comment("Should this block emit light? 0: disabled, 15: glowstone").defineInRange("lightValueRedSandstoneXpOre", 0, 0, 15);
            minXpDropRedSandstoneXpOre = BUILDER.comment("The minimum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("minXpDropRedSandstoneXpOre", 0, 0, 100000);
            maxXpDropRedSandstoneXpOre = BUILDER.comment("The maximum xp that drops from this ore. Is always 0 if silktouch is used.").defineInRange("maxXpDropRedSandstoneXpOre", 0, 0,100000);
            BUILDER.pop();
            BUILDER.comment("Explosion settings for this ore. (Can be applied live.)").push("explosion");
            explosionChanceRedSandstoneXpOre = BUILDER.comment("The chance that this ore will explode when harvested. Unfortunately the values are not exact. Tests showed that 500 is much more than 50%.").defineInRange("explosionChanceRedSandstoneXpOre", 0, 0, 1000);
            explosionRangeRedSandstoneXpOre = BUILDER.comment("The range of the explosion.").defineInRange("explosionRangeRedSandstoneXpOre", 3.0, 0.0, 100.0);
            enableExplosionDestructionRedSandstoneXpOre = BUILDER.comment("If true, the explosion of this ore will destroy blocks.").define("enableExplosionDestructionRedSandstoneXpOre", false);
            BUILDER.pop();
            BUILDER.comment("The abilities of the ore as item. (Can be applied live.)").push("item");
            hasGlowEffectRedSandstoneXpOre = BUILDER.comment("If true, the item has the enchanted glow.").define("hasGlowEffectRedSandstoneXpOre", false);
            statusEffectsRedSandstoneXpOre = BUILDER.comment("The effects the ore should apply to the player while in his/her inventory. Syntax: \"effectid:level\". E.g.: [\"1:2\", \"3:5\"] provides Speed II and Haste V. Max level is 255. See the wiki for ID list.").define("statusEffectsRedSandstoneXpOre", new ArrayList<String>());
            onlyInHandRedSandstoneXpOre = BUILDER.comment("If true, status effects are only applied if the item is in hand.").define("onlyInHandRedSandstoneXpOre", false);
            BUILDER.pop();
            BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Xp.spec, Main.MOD_ID + "/xp.toml");
        final CommentedFileConfig configData = CommentedFileConfig.builder(FMLPaths.CONFIGDIR.get().resolve(Main.MOD_ID + "/xp.toml"))
                .sync()
                .autosave()
                .writingMode(WritingMode.REPLACE)
                .build();
        configData.load();
        spec.setConfig(configData);
    }
}
