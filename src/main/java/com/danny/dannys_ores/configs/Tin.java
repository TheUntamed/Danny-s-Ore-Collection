package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Tin {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableTinOres;

    public static ForgeConfigSpec.BooleanValue enableStoneTinOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneTinOre;
    public static ForgeConfigSpec.IntValue minHeightStoneTinOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneTinOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteTinOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteTinOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteTinOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteTinOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteTinOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteTinOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteTinOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteTinOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteTinOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteTinOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteTinOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteTinOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackTinOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackTinOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackTinOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackTinOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneTinOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneTinOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneTinOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneTinOre;

    public static ForgeConfigSpec.BooleanValue enableSandTinOre;
    public static ForgeConfigSpec.IntValue veinSizeSandTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandTinOre;
    public static ForgeConfigSpec.IntValue minHeightSandTinOre;
    public static ForgeConfigSpec.IntValue maxHeightSandTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandTinOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandTinOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandTinOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandTinOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandTinOre;

    public static ForgeConfigSpec.BooleanValue enableGravelTinOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelTinOre;
    public static ForgeConfigSpec.IntValue minHeightGravelTinOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelTinOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneTinOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneTinOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneTinOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneTinOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneTinOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneTinOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneTinOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneTinOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceTinOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceTinOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceTinOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceTinOre;
    public static ForgeConfigSpec.DoubleValue resistanceBlueIceTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceTinOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceTinOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceTinOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceTinOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceTinOre;
    public static ForgeConfigSpec.DoubleValue resistancePackedIceTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceTinOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockTinOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockTinOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockTinOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockTinOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockTinOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltTinOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltTinOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltTinOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltTinOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneTinOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneTinOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneTinOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneTinOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperTinOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperTinOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperTinOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperTinOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleTinOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleTinOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleTinOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleTinOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateTinOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateTinOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateTinOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateTinOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltTinOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissTinOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeTinOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleTinOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteTinOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateTinOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneTinOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneTinOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneTinOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneTinOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneTinOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneTinOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneTinOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneTinOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Tin Ores").push("tin_ores");
        enableTinOres = BUILDER.comment("Enable or disable all Tin Ore variants.").define("enableTinOres", true);
        BUILDER.comment("Stone Tin Ore").push("stone_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableStoneTinOre", true);
        veinSizeStoneTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeStoneTinOre", 9, 0, 65536);
        veinsPerChunkStoneTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkStoneTinOre", 20, 0, 65536);
        minHeightStoneTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightStoneTinOre", 40, 0, 256);
        maxHeightStoneTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightStoneTinOre", 128, 0, 256);
        isTempWhitelistStoneTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistStoneTinOre", false);
        temperatureBlacklistStoneTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistStoneTinOre", new ArrayList<String>());
        isBiomeWhitelistStoneTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistStoneTinOre", false);
        biomeBlacklistStoneTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistStoneTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Tin Ore").push("andesite_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteTinOre", true);
        veinSizeAndesiteTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteTinOre", 9, 0, 65536);
        veinsPerChunkAndesiteTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteTinOre", 20, 0, 65536);
        minHeightAndesiteTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteTinOre", 40, 0, 256);
        maxHeightAndesiteTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteTinOre", 128, 0, 256);
        isTempWhitelistAndesiteTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteTinOre", false);
        temperatureBlacklistAndesiteTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteTinOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteTinOre", false);
        biomeBlacklistAndesiteTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistAndesiteTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Tin Ore").push("diorite_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteTinOre", true);
        veinSizeDioriteTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteTinOre", 9, 0, 65536);
        veinsPerChunkDioriteTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteTinOre", 20, 0, 65536);
        minHeightDioriteTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteTinOre", 40, 0, 256);
        maxHeightDioriteTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteTinOre", 128, 0, 256);
        isTempWhitelistDioriteTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteTinOre", false);
        temperatureBlacklistDioriteTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteTinOre", new ArrayList<String>());
        isBiomeWhitelistDioriteTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteTinOre", false);
        biomeBlacklistDioriteTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistDioriteTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Tin Ore").push("granite_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteTinOre", true);
        veinSizeGraniteTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteTinOre", 9, 0, 65536);
        veinsPerChunkGraniteTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteTinOre", 20, 0, 65536);
        minHeightGraniteTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteTinOre", 40, 0, 256);
        maxHeightGraniteTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteTinOre", 128, 0, 256);
        isTempWhitelistGraniteTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteTinOre", false);
        temperatureBlacklistGraniteTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteTinOre", new ArrayList<String>());
        isBiomeWhitelistGraniteTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteTinOre", false);
        biomeBlacklistGraniteTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGraniteTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Tin Ore").push("netherrack_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackTinOre", true);
        veinSizeNetherrackTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackTinOre", 5, 0, 65536);
        veinsPerChunkNetherrackTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackTinOre", 10, 0, 65536);
        minHeightNetherrackTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackTinOre", 10, 0, 256);
        maxHeightNetherrackTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackTinOre", 96, 0, 256);
        isTempWhitelistNetherrackTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackTinOre", false);
        temperatureBlacklistNetherrackTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackTinOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackTinOre", false);
        biomeBlacklistNetherrackTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistNetherrackTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Tin Ore").push("end_stone_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneTinOre", true);
        veinSizeEndStoneTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneTinOre", 5, 0, 65536);
        veinsPerChunkEndStoneTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneTinOre", 10, 0, 65536);
        minHeightEndStoneTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneTinOre", 60, 0, 256);
        maxHeightEndStoneTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneTinOre", 128, 0, 256);
        isTempWhitelistEndStoneTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneTinOre", false);
        temperatureBlacklistEndStoneTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneTinOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneTinOre", false);
        biomeBlacklistEndStoneTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEndStoneTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Tin Ore").push("sand_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandTinOre", true);
        veinSizeSandTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandTinOre", 5, 0, 65536);
        veinsPerChunkSandTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandTinOre", 10, 0, 65536);
        minHeightSandTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandTinOre", 40, 0, 256);
        maxHeightSandTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandTinOre", 128, 0, 256);
        isTempWhitelistSandTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandTinOre", false);
        temperatureBlacklistSandTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandTinOre", new ArrayList<String>());
        isBiomeWhitelistSandTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandTinOre", false);
        biomeBlacklistSandTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Tin Ore").push("red_sand_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandTinOre", true);
        veinSizeRedSandTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandTinOre", 5, 0, 65536);
        veinsPerChunkRedSandTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandTinOre", 10, 0, 65536);
        minHeightRedSandTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandTinOre", 40, 0, 256);
        maxHeightRedSandTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandTinOre", 128, 0, 256);
        isTempWhitelistRedSandTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandTinOre", false);
        temperatureBlacklistRedSandTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandTinOre", new ArrayList<String>());
        isBiomeWhitelistRedSandTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandTinOre", false);
        biomeBlacklistRedSandTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Tin Ore").push("gravel_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelTinOre", true);
        veinSizeGravelTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelTinOre", 5, 0, 65536);
        veinsPerChunkGravelTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelTinOre", 10, 0, 65536);
        minHeightGravelTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelTinOre", 40, 0, 256);
        maxHeightGravelTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelTinOre", 128, 0, 256);
        isTempWhitelistGravelTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelTinOre", false);
        temperatureBlacklistGravelTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelTinOre", new ArrayList<String>());
        isBiomeWhitelistGravelTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelTinOre", false);
        biomeBlacklistGravelTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistGravelTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Tin Ore").push("sandstone_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneTinOre", true);
        veinSizeSandstoneTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneTinOre", 5, 0, 65536);
        veinsPerChunkSandstoneTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneTinOre", 10, 0, 65536);
        minHeightSandstoneTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneTinOre", 40, 0, 256);
        maxHeightSandstoneTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneTinOre", 128, 0, 256);
        isTempWhitelistSandstoneTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneTinOre", false);
        temperatureBlacklistSandstoneTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneTinOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneTinOre", false);
        biomeBlacklistSandstoneTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistSandstoneTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Tin Ore").push("red_sandstone_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneTinOre", true);
        veinSizeRedSandstoneTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneTinOre", 5, 0, 65536);
        veinsPerChunkRedSandstoneTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneTinOre", 10, 0, 65536);
        minHeightRedSandstoneTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneTinOre", 40, 0, 256);
        maxHeightRedSandstoneTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneTinOre", 128, 0, 256);
        isTempWhitelistRedSandstoneTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneTinOre", false);
        temperatureBlacklistRedSandstoneTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneTinOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneTinOre", false);
        biomeBlacklistRedSandstoneTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistRedSandstoneTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Tin Ore").push("blue_ice_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBlueIceTinOre", true);
        veinSizeBlueIceTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBlueIceTinOre", 5, 0, 65536);
        veinsPerChunkBlueIceTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBlueIceTinOre", 10, 0, 65536);
        minHeightBlueIceTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBlueIceTinOre", 0, 0, 256);
        maxHeightBlueIceTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBlueIceTinOre", 128, 0, 256);
        isTempWhitelistBlueIceTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBlueIceTinOre", false);
        temperatureBlacklistBlueIceTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBlueIceTinOre", new ArrayList<String>());
        isBiomeWhitelistBlueIceTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBlueIceTinOre", false);
        biomeBlacklistBlueIceTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBlueIceTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Tin Ore").push("packed_ice_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enablePackedIceTinOre", true);
        veinSizePackedIceTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizePackedIceTinOre", 5, 0, 65536);
        veinsPerChunkPackedIceTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkPackedIceTinOre", 10, 0, 65536);
        minHeightPackedIceTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightPackedIceTinOre", 0, 0, 256);
        maxHeightPackedIceTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightPackedIceTinOre", 128, 0, 256);
        isTempWhitelistPackedIceTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistPackedIceTinOre", false);
        temperatureBlacklistPackedIceTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistPackedIceTinOre", new ArrayList<String>());
        isBiomeWhitelistPackedIceTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistPackedIceTinOre", false);
        biomeBlacklistPackedIceTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistPackedIceTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Tin Ore").push("stone_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableBedrockTinOre", true);
        veinSizeBedrockTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeBedrockTinOre", 1, 0, 65536);
        veinsPerChunkBedrockTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkBedrockTinOre", 1, 0, 65536);
        minHeightBedrockTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightBedrockTinOre", 0, 0, 256);
        maxHeightBedrockTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightBedrockTinOre", 256, 0, 256);
        isTempWhitelistBedrockTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistBedrockTinOre", false);
        temperatureBlacklistBedrockTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistBedrockTinOre", new ArrayList<String>());
        isBiomeWhitelistBedrockTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistBedrockTinOre", false);
        biomeBlacklistBedrockTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistBedrockTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockTinOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockTinOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Tin Ore (Quark)").push("quark_basalt_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkBasaltTinOre", true);
        veinSizeQuarkBasaltTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkBasaltTinOre", 5, 0, 65536);
        veinsPerChunkQuarkBasaltTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkBasaltTinOre", 10, 0, 65536);
        minHeightQuarkBasaltTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkBasaltTinOre", 10, 0, 256);
        maxHeightQuarkBasaltTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkBasaltTinOre", 96, 0, 256);
        isTempWhitelistQuarkBasaltTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkBasaltTinOre", false);
        temperatureBlacklistQuarkBasaltTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkBasaltTinOre", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkBasaltTinOre", false);
        biomeBlacklistQuarkBasaltTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkBasaltTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Tin Ore (Quark)").push("quark_limestone_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkLimestoneTinOre", true);
        veinSizeQuarkLimestoneTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkLimestoneTinOre", 9, 0, 65536);
        veinsPerChunkQuarkLimestoneTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkLimestoneTinOre", 20, 0, 65536);
        minHeightQuarkLimestoneTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkLimestoneTinOre", 40, 0, 256);
        maxHeightQuarkLimestoneTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkLimestoneTinOre", 128, 0, 256);
        isTempWhitelistQuarkLimestoneTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkLimestoneTinOre", false);
        temperatureBlacklistQuarkLimestoneTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkLimestoneTinOre", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkLimestoneTinOre", false);
        biomeBlacklistQuarkLimestoneTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkLimestoneTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Tin Ore (Quark)").push("quark_jasper_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkJasperTinOre", true);
        veinSizeQuarkJasperTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkJasperTinOre", 9, 0, 65536);
        veinsPerChunkQuarkJasperTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkJasperTinOre", 20, 0, 65536);
        minHeightQuarkJasperTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkJasperTinOre", 40, 0, 256);
        maxHeightQuarkJasperTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkJasperTinOre", 128, 0, 256);
        isTempWhitelistQuarkJasperTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkJasperTinOre", false);
        temperatureBlacklistQuarkJasperTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkJasperTinOre", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkJasperTinOre", false);
        biomeBlacklistQuarkJasperTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkJasperTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Tin Ore (Quark)").push("quark_marble_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkMarbleTinOre", true);
        veinSizeQuarkMarbleTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkMarbleTinOre", 9, 0, 65536);
        veinsPerChunkQuarkMarbleTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkMarbleTinOre", 20, 0, 65536);
        minHeightQuarkMarbleTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkMarbleTinOre", 40, 0, 256);
        maxHeightQuarkMarbleTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkMarbleTinOre", 128, 0, 256);
        isTempWhitelistQuarkMarbleTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkMarbleTinOre", false);
        temperatureBlacklistQuarkMarbleTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkMarbleTinOre", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkMarbleTinOre", false);
        biomeBlacklistQuarkMarbleTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkMarbleTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Tin Ore (Quark)").push("quark_slate_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableQuarkSlateTinOre", true);
        veinSizeQuarkSlateTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeQuarkSlateTinOre", 9, 0, 65536);
        veinsPerChunkQuarkSlateTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkQuarkSlateTinOre", 20, 0, 65536);
        minHeightQuarkSlateTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightQuarkSlateTinOre", 40, 0, 256);
        maxHeightQuarkSlateTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightQuarkSlateTinOre", 128, 0, 256);
        isTempWhitelistQuarkSlateTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistQuarkSlateTinOre", false);
        temperatureBlacklistQuarkSlateTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistQuarkSlateTinOre", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistQuarkSlateTinOre", false);
        biomeBlacklistQuarkSlateTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistQuarkSlateTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Tin Ore (Embellishcraft)").push("embellishcraft_basalt_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftBasaltTinOre", true);
        veinSizeEmbellishcraftBasaltTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftBasaltTinOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftBasaltTinOre", 20, 0, 65536);
        minHeightEmbellishcraftBasaltTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftBasaltTinOre", 40, 0, 256);
        maxHeightEmbellishcraftBasaltTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftBasaltTinOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftBasaltTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftBasaltTinOre", false);
        temperatureBlacklistEmbellishcraftBasaltTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftBasaltTinOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftBasaltTinOre", false);
        biomeBlacklistEmbellishcraftBasaltTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftBasaltTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Tin Ore (Embellishcraft)").push("embellishcraft_gneiss_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftGneissTinOre", true);
        veinSizeEmbellishcraftGneissTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftGneissTinOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftGneissTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftGneissTinOre", 20, 0, 65536);
        minHeightEmbellishcraftGneissTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftGneissTinOre", 40, 0, 256);
        maxHeightEmbellishcraftGneissTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftGneissTinOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftGneissTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftGneissTinOre", false);
        temperatureBlacklistEmbellishcraftGneissTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftGneissTinOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftGneissTinOre", false);
        biomeBlacklistEmbellishcraftGneissTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftGneissTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Tin Ore (Embellishcraft)").push("embellishcraft_jade_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftJadeTinOre", true);
        veinSizeEmbellishcraftJadeTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftJadeTinOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftJadeTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftJadeTinOre", 20, 0, 65536);
        minHeightEmbellishcraftJadeTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftJadeTinOre", 40, 0, 256);
        maxHeightEmbellishcraftJadeTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftJadeTinOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftJadeTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftJadeTinOre", false);
        temperatureBlacklistEmbellishcraftJadeTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftJadeTinOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftJadeTinOre", false);
        biomeBlacklistEmbellishcraftJadeTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftJadeTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Tin Ore (Embellishcraft)").push("embellishcraft_larvikite_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftLarvikiteTinOre", true);
        veinSizeEmbellishcraftLarvikiteTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftLarvikiteTinOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftLarvikiteTinOre", 20, 0, 65536);
        minHeightEmbellishcraftLarvikiteTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftLarvikiteTinOre", 40, 0, 256);
        maxHeightEmbellishcraftLarvikiteTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftLarvikiteTinOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftLarvikiteTinOre", false);
        temperatureBlacklistEmbellishcraftLarvikiteTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftLarvikiteTinOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftLarvikiteTinOre", false);
        biomeBlacklistEmbellishcraftLarvikiteTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftLarvikiteTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Tin Ore (Embellishcraft)").push("embellishcraft_marble_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftMarbleTinOre", true);
        veinSizeEmbellishcraftMarbleTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftMarbleTinOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftMarbleTinOre", 20, 0, 65536);
        minHeightEmbellishcraftMarbleTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftMarbleTinOre", 40, 0, 256);
        maxHeightEmbellishcraftMarbleTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftMarbleTinOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftMarbleTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftMarbleTinOre", false);
        temperatureBlacklistEmbellishcraftMarbleTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftMarbleTinOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftMarbleTinOre", false);
        biomeBlacklistEmbellishcraftMarbleTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftMarbleTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Tin Ore (Embellishcraft)").push("embellishcraft_slate_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEmbellishcraftSlateTinOre", true);
        veinSizeEmbellishcraftSlateTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEmbellishcraftSlateTinOre", 9, 0, 65536);
        veinsPerChunkEmbellishcraftSlateTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEmbellishcraftSlateTinOre", 20, 0, 65536);
        minHeightEmbellishcraftSlateTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEmbellishcraftSlateTinOre", 40, 0, 256);
        maxHeightEmbellishcraftSlateTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEmbellishcraftSlateTinOre", 128, 0, 256);
        isTempWhitelistEmbellishcraftSlateTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEmbellishcraftSlateTinOre", false);
        temperatureBlacklistEmbellishcraftSlateTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEmbellishcraftSlateTinOre", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEmbellishcraftSlateTinOre", false);
        biomeBlacklistEmbellishcraftSlateTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistEmbellishcraftSlateTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Tin Ore").push("hardened_stone_tin_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneTinOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableHardenedStoneTinOre", true);
        veinSizeHardenedStoneTinOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeHardenedStoneTinOre", 9, 0, 65536);
        veinsPerChunkHardenedStoneTinOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkHardenedStoneTinOre", 20, 0, 65536);
        minHeightHardenedStoneTinOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightHardenedStoneTinOre", 40, 0, 256);
        maxHeightHardenedStoneTinOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightHardenedStoneTinOre", 128, 0, 256);
        isTempWhitelistHardenedStoneTinOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistHardenedStoneTinOre", false);
        temperatureBlacklistHardenedStoneTinOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistHardenedStoneTinOre", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneTinOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistHardenedStoneTinOre", false);
        biomeBlacklistHardenedStoneTinOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklistHardenedStoneTinOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Tin.spec, Main.MOD_ID + "/tin.toml");
    }
}
