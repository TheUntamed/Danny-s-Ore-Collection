package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Emerald {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableEmeraldOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableSandEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightSandEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightGravelEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneEmeraldOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneEmeraldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneEmeraldOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Emerald Ores").push("emerald_ores");
        enableEmeraldOres = BUILDER.comment("Enable or disable all Emerald Ore variants.").define("enableEmeraldOres", true);
        BUILDER.comment("Vanilla (Stone) Emerald Ore").push("vanilla_stone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaEmeraldOre", true);
        veinSizeVanillaEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaEmeraldOre", 1, 0, 65536);
        veinsPerChunkVanillaEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaEmeraldOre", 11, 0, 65536);
        minHeightVanillaEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaEmeraldOre", 0, 0, 256);
        maxHeightVanillaEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaEmeraldOre", 32, 0, 256);
        isTempWhitelistVanillaEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaEmeraldOre", false);
        temperatureBlacklistVanillaEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistVanillaEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaEmeraldOre", false);
        biomeBlacklistVanillaEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Emerald Ore").push("andesite_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteEmeraldOre", true);
        veinSizeAndesiteEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteEmeraldOre", 1, 0, 65536);
        veinsPerChunkAndesiteEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteEmeraldOre", 11, 0, 65536);
        minHeightAndesiteEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteEmeraldOre", 0, 0, 256);
        maxHeightAndesiteEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteEmeraldOre", 32, 0, 256);
        isTempWhitelistAndesiteEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteEmeraldOre", false);
        temperatureBlacklistAndesiteEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteEmeraldOre", false);
        biomeBlacklistAndesiteEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Emerald Ore").push("diorite_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteEmeraldOre", true);
        veinSizeDioriteEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteEmeraldOre", 1, 0, 65536);
        veinsPerChunkDioriteEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteEmeraldOre", 11, 0, 65536);
        minHeightDioriteEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteEmeraldOre", 0, 0, 256);
        maxHeightDioriteEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteEmeraldOre", 32, 0, 256);
        isTempWhitelistDioriteEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteEmeraldOre", false);
        temperatureBlacklistDioriteEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistDioriteEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteEmeraldOre", false);
        biomeBlacklistDioriteEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Emerald Ore").push("granite_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteEmeraldOre", true);
        veinSizeGraniteEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteEmeraldOre", 1, 0, 65536);
        veinsPerChunkGraniteEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteEmeraldOre", 11, 0, 65536);
        minHeightGraniteEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteEmeraldOre", 0, 0, 256);
        maxHeightGraniteEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteEmeraldOre", 32, 0, 256);
        isTempWhitelistGraniteEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteEmeraldOre", false);
        temperatureBlacklistGraniteEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistGraniteEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteEmeraldOre", false);
        biomeBlacklistGraniteEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Emerald Ore").push("netherrack_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackEmeraldOre", true);
        veinSizeNetherrackEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackEmeraldOre", 1, 0, 65536);
        veinsPerChunkNetherrackEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackEmeraldOre", 11, 0, 65536);
        minHeightNetherrackEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackEmeraldOre", 64, 0, 256);
        maxHeightNetherrackEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackEmeraldOre", 128, 0, 256);
        isTempWhitelistNetherrackEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackEmeraldOre", false);
        temperatureBlacklistNetherrackEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackEmeraldOre", false);
        biomeBlacklistNetherrackEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Emerald Ore").push("end_stone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneEmeraldOre", true);
        veinSizeEndStoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneEmeraldOre", 1, 0, 65536);
        veinsPerChunkEndStoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneEmeraldOre", 11, 0, 65536);
        minHeightEndStoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneEmeraldOre", 0, 0, 256);
        maxHeightEndStoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneEmeraldOre", 64, 0, 256);
        isTempWhitelistEndStoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneEmeraldOre", false);
        temperatureBlacklistEndStoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneEmeraldOre", false);
        biomeBlacklistEndStoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Emerald Ore").push("sand_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandEmeraldOre", true);
        veinSizeSandEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandEmeraldOre", 1, 0, 65536);
        veinsPerChunkSandEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandEmeraldOre", 11, 0, 65536);
        minHeightSandEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandEmeraldOre", 0, 0, 256);
        maxHeightSandEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandEmeraldOre", 128, 0, 256);
        isTempWhitelistSandEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandEmeraldOre", false);
        temperatureBlacklistSandEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistSandEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandEmeraldOre", false);
        biomeBlacklistSandEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Emerald Ore").push("gravel_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelEmeraldOre", true);
        veinSizeGravelEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelEmeraldOre", 1, 0, 65536);
        veinsPerChunkGravelEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelEmeraldOre", 11, 0, 65536);
        minHeightGravelEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelEmeraldOre", 0, 0, 256);
        maxHeightGravelEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelEmeraldOre", 128, 0, 256);
        isTempWhitelistGravelEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelEmeraldOre", false);
        temperatureBlacklistGravelEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistGravelEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelEmeraldOre", false);
        biomeBlacklistGravelEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Emerald Ore").push("sandstone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneEmeraldOre", true);
        veinSizeSandstoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneEmeraldOre", 1, 0, 65536);
        veinsPerChunkSandstoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneEmeraldOre", 11, 0, 65536);
        minHeightSandstoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneEmeraldOre", 0, 0, 256);
        maxHeightSandstoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneEmeraldOre", 128, 0, 256);
        isTempWhitelistSandstoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneEmeraldOre", false);
        temperatureBlacklistSandstoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneEmeraldOre", false);
        biomeBlacklistSandstoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Emerald Ore").push("red_sandstone_emerald_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneEmeraldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneEmeraldOre", true);
        veinSizeRedSandstoneEmeraldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneEmeraldOre", 1, 0, 65536);
        veinsPerChunkRedSandstoneEmeraldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneEmeraldOre", 11, 0, 65536);
        minHeightRedSandstoneEmeraldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneEmeraldOre", 0, 0, 256);
        maxHeightRedSandstoneEmeraldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneEmeraldOre", 128, 0, 256);
        isTempWhitelistRedSandstoneEmeraldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneEmeraldOre", false);
        temperatureBlacklistRedSandstoneEmeraldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneEmeraldOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneEmeraldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneEmeraldOre", false);
        biomeBlacklistRedSandstoneEmeraldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneEmeraldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Emerald.spec, Main.MOD_ID + "/emerald.toml");
    }
}
