package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Prosperity {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue disableProsperityOres;

    // Stone
    public static ForgeConfigSpec.BooleanValue enableStoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeStoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkStoneProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightStoneProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightStoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistStoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistStoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistStoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistStoneProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableSandProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeSandProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightSandProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightSandProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableGravelProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightGravelProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableBlueIceProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeBlueIceProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBlueIceProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightBlueIceProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightBlueIceProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBlueIceProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBlueIceProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBlueIceProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBlueIceProsperityOre;

    public static ForgeConfigSpec.BooleanValue enablePackedIceProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizePackedIceProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkPackedIceProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightPackedIceProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightPackedIceProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistPackedIceProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistPackedIceProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistPackedIceProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistPackedIceProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableBedrockProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeBedrockProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkBedrockProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightBedrockProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightBedrockProsperityOre;
    public static ForgeConfigSpec.DoubleValue resistanceBedrockProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistBedrockProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistBedrockProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistBedrockProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistBedrockProsperityOre;

    // Quark
    public static ForgeConfigSpec.BooleanValue enableQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkBasaltProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkBasaltProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkLimestoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkLimestoneProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkJasperProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkJasperProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkJasperProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkJasperProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkJasperProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkJasperProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkJasperProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkJasperProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkJasperProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkMarbleProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkMarbleProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableQuarkSlateProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeQuarkSlateProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkQuarkSlateProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightQuarkSlateProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightQuarkSlateProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistQuarkSlateProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistQuarkSlateProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistQuarkSlateProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistQuarkSlateProsperityOre;

    // Embellishcraft
    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftBasaltProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftBasaltProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftGneissProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftGneissProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftJadeProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftJadeProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftMarbleProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftMarbleProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftLarvikiteProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftLarvikiteProsperityOre;

    public static ForgeConfigSpec.BooleanValue enableEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEmbellishcraftSlateProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEmbellishcraftSlateProsperityOre;

    // Danny's Stone Variants
    public static ForgeConfigSpec.BooleanValue enableHardenedStoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinSizeHardenedStoneProsperityOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkHardenedStoneProsperityOre;
    public static ForgeConfigSpec.IntValue minHeightHardenedStoneProsperityOre;
    public static ForgeConfigSpec.IntValue maxHeightHardenedStoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistHardenedStoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistHardenedStoneProsperityOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistHardenedStoneProsperityOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistHardenedStoneProsperityOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Prosperity Ores").push("general");
        disableProsperityOres = BUILDER.comment("If false, all prosperity ore variants will be disabled.").define("disableAllVariants", false);
        BUILDER.comment("Stone Prosperity Ore").push("stone_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableStoneProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeStoneProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkStoneProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightStoneProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightStoneProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistStoneProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistStoneProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistStoneProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistStoneProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Prosperity Ore").push("andesite_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeAndesiteProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkAndesiteProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightAndesiteProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightAndesiteProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistAndesiteProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistAndesiteProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistAndesiteProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistAndesiteProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Prosperity Ore").push("diorite_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeDioriteProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkDioriteProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightDioriteProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightDioriteProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistDioriteProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistDioriteProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistDioriteProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistDioriteProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Prosperity Ore").push("granite_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGraniteProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkGraniteProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightGraniteProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGraniteProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistGraniteProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGraniteProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGraniteProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGraniteProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Prosperity Ore").push("netherrack_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeNetherrackProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkNetherrackProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightNetherrackProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightNetherrackProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistNetherrackProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistNetherrackProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistNetherrackProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistNetherrackProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Prosperity Ore").push("end_stone_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEndStoneProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkEndStoneProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightEndStoneProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEndStoneProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistEndStoneProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEndStoneProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEndStoneProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEndStoneProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Prosperity Ore").push("sand_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightSandProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sand Prosperity Ore").push("red_sand_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightRedSandProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Prosperity Ore").push("gravel_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeGravelProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkGravelProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightGravelProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightGravelProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistGravelProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistGravelProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistGravelProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistGravelProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Prosperity Ore").push("sandstone_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeSandstoneProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkSandstoneProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightSandstoneProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightSandstoneProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistSandstoneProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistSandstoneProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistSandstoneProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistSandstoneProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Prosperity Ore").push("red_sandstone_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeRedSandstoneProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkRedSandstoneProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightRedSandstoneProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightRedSandstoneProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistRedSandstoneProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistRedSandstoneProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistRedSandstoneProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Blue Ice Prosperity Ore").push("blue_ice_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBlueIceProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBlueIceProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkBlueIceProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightBlueIceProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBlueIceProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistBlueIceProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBlueIceProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBlueIceProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBlueIceProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Packed Ice Prosperity Ore").push("packed_ice_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enablePackedIceProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizePackedIceProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkPackedIceProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightPackedIceProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightPackedIceProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistPackedIceProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistPackedIceProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistPackedIceProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistPackedIceProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Bedrock Prosperity Ore").push("bedrock_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableBedrockProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeBedrockProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 1, 0, 65536);
        veinsPerChunkBedrockProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 1, 0, 65536);
        minHeightBedrockProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightBedrockProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 256, 0, 256);
        isTempWhitelistBedrockProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistBedrockProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistBedrockProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistBedrockProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.comment("Block properties").push("properties");
        resistanceBedrockProsperityOre = BUILDER.comment("A higher value means a stronger explosion is needed to destroy this ore. Stone has 6.0 and Obsidian 1200.0").defineInRange("resistanceBedrockProsperityOre", 9.0, 0.0, 3600000.0);
        BUILDER.pop();
        BUILDER.pop();

        //Quark
        BUILDER.comment("Basalt Prosperity Ore (Quark)").push("quark_basalt_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkBasaltProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkBasaltProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 4, 0, 65536);
        veinsPerChunkQuarkBasaltProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 6, 0, 65536);
        minHeightQuarkBasaltProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 10, 0, 256);
        maxHeightQuarkBasaltProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 128, 0, 256);
        isTempWhitelistQuarkBasaltProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkBasaltProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkBasaltProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkBasaltProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Limestone Prosperity Ore (Quark)").push("quark_limestone_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkLimestoneProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkLimestoneProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkLimestoneProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkLimestoneProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkLimestoneProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkLimestoneProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkLimestoneProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkLimestoneProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkLimestoneProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jasper Prosperity Ore (Quark)").push("quark_jasper_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkJasperProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkJasperProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkJasperProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkJasperProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkJasperProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkJasperProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkJasperProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkJasperProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkJasperProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Prosperity Ore (Quark)").push("quark_marble_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkMarbleProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkMarbleProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkMarbleProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkMarbleProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkMarbleProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkMarbleProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkMarbleProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkMarbleProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkMarbleProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Prosperity Ore (Quark)").push("quark_slate_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableQuarkSlateProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeQuarkSlateProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkQuarkSlateProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightQuarkSlateProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightQuarkSlateProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistQuarkSlateProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistQuarkSlateProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistQuarkSlateProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistQuarkSlateProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        //Embellishcraft
        BUILDER.comment("Basalt Prosperity Ore (Embellishcraft)").push("embellishcraft_basalt_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftBasaltProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftBasaltProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftBasaltProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftBasaltProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftBasaltProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftBasaltProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftBasaltProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftBasaltProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftBasaltProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gneiss Prosperity Ore (Embellishcraft)").push("embellishcraft_gneiss_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftGneissProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftGneissProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftGneissProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftGneissProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftGneissProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftGneissProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftGneissProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftGneissProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftGneissProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Jade Prosperity Ore (Embellishcraft)").push("embellishcraft_jade_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftJadeProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftJadeProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftJadeProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftJadeProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftJadeProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftJadeProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftJadeProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftJadeProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftJadeProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Larvikite Prosperity Ore (Embellishcraft)").push("embellishcraft_larvikite_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftLarvikiteProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Marble Prosperity Ore (Embellishcraft)").push("embellishcraft_marble_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftMarbleProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftMarbleProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftMarbleProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftMarbleProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftMarbleProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftMarbleProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftMarbleProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftMarbleProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftMarbleProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Slate Prosperity Ore (Embellishcraft)").push("embellishcraft_slate_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEmbellishcraftSlateProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeEmbellishcraftSlateProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkEmbellishcraftSlateProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightEmbellishcraftSlateProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightEmbellishcraftSlateProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistEmbellishcraftSlateProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistEmbellishcraftSlateProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistEmbellishcraftSlateProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistEmbellishcraftSlateProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:alps\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();

        // Danny's Stone Variants
        BUILDER.comment("Hardened Stone Prosperity Ore").push("hardened_stone_prosperity_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableHardenedStoneProsperityOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVariant", true);
        veinSizeHardenedStoneProsperityOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSize", 8, 0, 65536);
        veinsPerChunkHardenedStoneProsperityOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunk", 12, 0, 65536);
        minHeightHardenedStoneProsperityOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeight", 0, 0, 256);
        maxHeightHardenedStoneProsperityOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeight", 48, 0, 256);
        isTempWhitelistHardenedStoneProsperityOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelist", false);
        temperatureBlacklistHardenedStoneProsperityOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklist", new ArrayList<String>());
        isBiomeWhitelistHardenedStoneProsperityOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelist", false);
        biomeBlacklistHardenedStoneProsperityOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklist", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Prosperity.spec, Main.MOD_ID + "/prosperity.toml");
    }
}
