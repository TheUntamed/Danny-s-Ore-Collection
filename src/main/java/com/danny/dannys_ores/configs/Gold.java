package com.danny.dannys_ores.configs;

import com.danny.dannys_ores.Main;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.config.ModConfig;

import java.util.ArrayList;
import java.util.List;

public class Gold {
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static ForgeConfigSpec spec;
    public static ForgeConfigSpec.BooleanValue enableGoldOres;

    public static ForgeConfigSpec.BooleanValue enableVanillaGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeVanillaGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkVanillaGoldOre;
    public static ForgeConfigSpec.IntValue minHeightVanillaGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightVanillaGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistVanillaGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistVanillaGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistVanillaGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistVanillaGoldOre;

    public static ForgeConfigSpec.BooleanValue enableAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue minHeightAndesiteGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightAndesiteGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistAndesiteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistAndesiteGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistAndesiteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistAndesiteGoldOre;

    public static ForgeConfigSpec.BooleanValue enableDioriteGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeDioriteGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkDioriteGoldOre;
    public static ForgeConfigSpec.IntValue minHeightDioriteGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightDioriteGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistDioriteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistDioriteGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistDioriteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistDioriteGoldOre;

    public static ForgeConfigSpec.BooleanValue enableGraniteGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeGraniteGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGraniteGoldOre;
    public static ForgeConfigSpec.IntValue minHeightGraniteGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightGraniteGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGraniteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGraniteGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGraniteGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGraniteGoldOre;

    public static ForgeConfigSpec.BooleanValue enableNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue minHeightNetherrackGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightNetherrackGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistNetherrackGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistNetherrackGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistNetherrackGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistNetherrackGoldOre;

    public static ForgeConfigSpec.BooleanValue enableEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightEndStoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightEndStoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistEndStoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistEndStoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistEndStoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistEndStoneGoldOre;

    public static ForgeConfigSpec.BooleanValue enableSandGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandGoldOre;
    public static ForgeConfigSpec.IntValue minHeightSandGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandGoldOre;

    public static ForgeConfigSpec.BooleanValue enableGravelGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeGravelGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkGravelGoldOre;
    public static ForgeConfigSpec.IntValue minHeightGravelGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightGravelGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistGravelGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistGravelGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistGravelGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistGravelGoldOre;

    public static ForgeConfigSpec.BooleanValue enableSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistSandstoneGoldOre;

    public static ForgeConfigSpec.BooleanValue enableRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinSizeRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue veinsPerChunkRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue minHeightRedSandstoneGoldOre;
    public static ForgeConfigSpec.IntValue maxHeightRedSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isTempWhitelistRedSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> temperatureBlacklistRedSandstoneGoldOre;
    public static ForgeConfigSpec.BooleanValue isBiomeWhitelistRedSandstoneGoldOre;
    public static ForgeConfigSpec.ConfigValue<List<String>> biomeBlacklistRedSandstoneGoldOre;

    static {
        // = BUILDER.comment("").define("", false);

        BUILDER.comment("Gold Ores").push("gold_ores");
        enableGoldOres = BUILDER.comment("Enable or disable all Gold Ore variants.").define("enableGoldOres", true);
        BUILDER.comment("Vanilla (Stone) Gold Ore").push("vanilla_stone_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableVanillaGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableVanillaGoldOre", true);
        veinSizeVanillaGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeVanillaGoldOre", 9, 0, 65536);
        veinsPerChunkVanillaGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkVanillaGoldOre", 2, 0, 65536);
        minHeightVanillaGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightVanillaGoldOre", 0, 0, 256);
        maxHeightVanillaGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightVanillaGoldOre", 32, 0, 256);
        isTempWhitelistVanillaGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistVanillaGoldOre", false);
        temperatureBlacklistVanillaGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistVanillaGoldOre", new ArrayList<String>());
        isBiomeWhitelistVanillaGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistVanillaGoldOre", false);
        biomeBlacklistVanillaGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistVanillaGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Andesite Gold Ore").push("andesite_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableAndesiteGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableAndesiteGoldOre", true);
        veinSizeAndesiteGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeAndesiteGoldOre", 9, 0, 65536);
        veinsPerChunkAndesiteGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkAndesiteGoldOre", 2, 0, 65536);
        minHeightAndesiteGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightAndesiteGoldOre", 0, 0, 256);
        maxHeightAndesiteGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightAndesiteGoldOre", 32, 0, 256);
        isTempWhitelistAndesiteGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistAndesiteGoldOre", false);
        temperatureBlacklistAndesiteGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistAndesiteGoldOre", new ArrayList<String>());
        isBiomeWhitelistAndesiteGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistAndesiteGoldOre", false);
        biomeBlacklistAndesiteGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistAndesiteGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Diorite Gold Ore").push("diorite_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableDioriteGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableDioriteGoldOre", true);
        veinSizeDioriteGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeDioriteGoldOre", 9, 0, 65536);
        veinsPerChunkDioriteGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkDioriteGoldOre", 2, 0, 65536);
        minHeightDioriteGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightDioriteGoldOre", 0, 0, 256);
        maxHeightDioriteGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightDioriteGoldOre", 32, 0, 256);
        isTempWhitelistDioriteGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistDioriteGoldOre", false);
        temperatureBlacklistDioriteGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistDioriteGoldOre", new ArrayList<String>());
        isBiomeWhitelistDioriteGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistDioriteGoldOre", false);
        biomeBlacklistDioriteGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistDioriteGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Granite Gold Ore").push("granite_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGraniteGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGraniteGoldOre", true);
        veinSizeGraniteGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGraniteGoldOre", 9, 0, 65536);
        veinsPerChunkGraniteGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGraniteGoldOre", 2, 0, 65536);
        minHeightGraniteGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGraniteGoldOre", 0, 0, 256);
        maxHeightGraniteGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGraniteGoldOre", 32, 0, 256);
        isTempWhitelistGraniteGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGraniteGoldOre", false);
        temperatureBlacklistGraniteGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGraniteGoldOre", new ArrayList<String>());
        isBiomeWhitelistGraniteGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGraniteGoldOre", false);
        biomeBlacklistGraniteGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGraniteGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Netherrack Gold Ore").push("netherrack_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableNetherrackGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableNetherrackGoldOre", true);
        veinSizeNetherrackGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeNetherrackGoldOre", 9, 0, 65536);
        veinsPerChunkNetherrackGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkNetherrackGoldOre", 2, 0, 65536);
        minHeightNetherrackGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightNetherrackGoldOre", 64, 0, 256);
        maxHeightNetherrackGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightNetherrackGoldOre", 128, 0, 256);
        isTempWhitelistNetherrackGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistNetherrackGoldOre", false);
        temperatureBlacklistNetherrackGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistNetherrackGoldOre", new ArrayList<String>());
        isBiomeWhitelistNetherrackGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistNetherrackGoldOre", false);
        biomeBlacklistNetherrackGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistNetherrackGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("End Stone Gold Ore").push("end_stone_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableEndStoneGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableEndStoneGoldOre", true);
        veinSizeEndStoneGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeEndStoneGoldOre", 4, 0, 65536);
        veinsPerChunkEndStoneGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkEndStoneGoldOre", 2, 0, 65536);
        minHeightEndStoneGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightEndStoneGoldOre", 0, 0, 256);
        maxHeightEndStoneGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightEndStoneGoldOre", 64, 0, 256);
        isTempWhitelistEndStoneGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistEndStoneGoldOre", false);
        temperatureBlacklistEndStoneGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistEndStoneGoldOre", new ArrayList<String>());
        isBiomeWhitelistEndStoneGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistEndStoneGoldOre", false);
        biomeBlacklistEndStoneGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistEndStoneGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sand Gold Ore").push("sand_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandGoldOre", true);
        veinSizeSandGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandGoldOre", 9, 0, 65536);
        veinsPerChunkSandGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandGoldOre", 2, 0, 65536);
        minHeightSandGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandGoldOre", 0, 0, 256);
        maxHeightSandGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandGoldOre", 128, 0, 256);
        isTempWhitelistSandGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandGoldOre", false);
        temperatureBlacklistSandGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandGoldOre", new ArrayList<String>());
        isBiomeWhitelistSandGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandGoldOre", false);
        biomeBlacklistSandGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Gravel Gold Ore").push("gravel_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableGravelGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableGravelGoldOre", true);
        veinSizeGravelGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeGravelGoldOre", 9, 0, 65536);
        veinsPerChunkGravelGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkGravelGoldOre", 2, 0, 65536);
        minHeightGravelGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightGravelGoldOre", 0, 0, 256);
        maxHeightGravelGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightGravelGoldOre", 128, 0, 256);
        isTempWhitelistGravelGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistGravelGoldOre", false);
        temperatureBlacklistGravelGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistGravelGoldOre", new ArrayList<String>());
        isBiomeWhitelistGravelGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistGravelGoldOre", false);
        biomeBlacklistGravelGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistGravelGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Sandstone Gold Ore").push("sandstone_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableSandstoneGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableSandstoneGoldOre", true);
        veinSizeSandstoneGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeSandstoneGoldOre", 9, 0, 65536);
        veinsPerChunkSandstoneGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkSandstoneGoldOre", 2, 0, 65536);
        minHeightSandstoneGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightSandstoneGoldOre", 0, 0, 256);
        maxHeightSandstoneGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightSandstoneGoldOre", 128, 0, 256);
        isTempWhitelistSandstoneGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistSandstoneGoldOre", false);
        temperatureBlacklistSandstoneGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistSandstoneGoldOre", new ArrayList<String>());
        isBiomeWhitelistSandstoneGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistSandstoneGoldOre", false);
        biomeBlacklistSandstoneGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistSandstoneGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.comment("Red Sandstone Gold Ore").push("red_sandstone_gold_ore");
        BUILDER.comment("Generation settings for this ore.").push("generation");
        enableRedSandstoneGoldOre = BUILDER.comment("If false, this ore variant will not generate.").define("enableRedSandstoneGoldOre", true);
        veinSizeRedSandstoneGoldOre = BUILDER.comment("The amount of ores in one vein.").defineInRange("veinSizeRedSandstoneGoldOre", 9, 0, 65536);
        veinsPerChunkRedSandstoneGoldOre = BUILDER.comment("How many veins per chunk.").defineInRange("veinsPerChunkRedSandstoneGoldOre", 2, 0, 65536);
        minHeightRedSandstoneGoldOre = BUILDER.comment("The min y-level the ore will generate.").defineInRange("minHeightRedSandstoneGoldOre", 0, 0, 256);
        maxHeightRedSandstoneGoldOre = BUILDER.comment("The max y-level the ore will generate.").defineInRange("maxHeightRedSandstoneGoldOre", 128, 0, 256);
        isTempWhitelistRedSandstoneGoldOre = BUILDER.comment("If true, the biome temperature blacklist is a whitelist.").define("isTempWhitelistRedSandstoneGoldOre", false);
        temperatureBlacklistRedSandstoneGoldOre = BUILDER.comment("Possible Entries: \"MEDIUM\", \"WARM\", \"COLD\", \"OCEAN\"").define("temperatureBlacklistRedSandstoneGoldOre", new ArrayList<String>());
        isBiomeWhitelistRedSandstoneGoldOre = BUILDER.comment("If true, the biome blacklist is a whitelist.").define("isBiomeWhitelistRedSandstoneGoldOre", false);
        biomeBlacklistRedSandstoneGoldOre = BUILDER.comment("Syntax: \"modid:biome\". E.g.: [\"minecraft:plains\", \"biomesoplenty:meadow\"])").define("biomeBlacklistRedSandstoneGoldOre", new ArrayList<String>());
        BUILDER.pop();
        BUILDER.pop();
        BUILDER.pop();
        spec = BUILDER.build();
        //BUILDER.comment("").push("");
        //
        //BUILDER.pop();
    }

    public static void loadConfig() {
        ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, Gold.spec, Main.MOD_ID + "/gold.toml");
    }
}
